// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module LINEAR_Block_split10_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        Wt_X,
        Wt_Y,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] Wt_X;
input  [31:0] Wt_Y;
output  [27:0] ap_return_0;
output  [27:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[27:0] ap_return_0;
reg[27:0] ap_return_1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
wire   [31:0] sub_ln440_fu_50_p2;
wire   [26:0] trunc_ln440_1_fu_56_p4;
wire   [27:0] zext_ln440_fu_66_p1;
wire   [26:0] trunc_ln440_2_fu_76_p4;
wire   [0:0] tmp_fu_42_p3;
wire   [27:0] sub_ln440_1_fu_70_p2;
wire   [27:0] zext_ln440_1_fu_86_p1;
wire   [33:0] mul_ln441_fu_102_p1;
wire   [64:0] mul_ln441_fu_102_p2;
wire  signed [31:0] tmp_106_fu_114_p1;
wire   [64:0] sub_ln441_fu_108_p2;
wire   [0:0] tmp_106_fu_114_p3;
wire   [27:0] tmp_107_fu_122_p4;
wire   [27:0] tmp_108_fu_132_p4;
wire   [27:0] select_ln441_fu_142_p3;
wire   [27:0] sub_ln441_1_fu_150_p2;
wire   [27:0] block_num_x_fu_90_p3;
wire   [27:0] select_ln441_1_fu_156_p3;
reg   [27:0] ap_return_0_preg;
reg   [27:0] ap_return_1_preg;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_return_0_preg = 28'd0;
#0 ap_return_1_preg = 28'd0;
end

LINEAR_mul_32s_34ns_65_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 65 ))
mul_32s_34ns_65_1_1_U2(
    .din0(Wt_Y),
    .din1(mul_ln441_fu_102_p1),
    .dout(mul_ln441_fu_102_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 28'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_0_preg <= block_num_x_fu_90_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 28'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_1_preg <= select_ln441_1_fu_156_p3;
        end
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_0 = block_num_x_fu_90_p3;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_1 = select_ln441_1_fu_156_p3;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign block_num_x_fu_90_p3 = ((tmp_fu_42_p3[0:0] == 1'b1) ? sub_ln440_1_fu_70_p2 : zext_ln440_1_fu_86_p1);

assign mul_ln441_fu_102_p1 = 65'd6871947674;

assign select_ln441_1_fu_156_p3 = ((tmp_106_fu_114_p3[0:0] == 1'b1) ? sub_ln441_1_fu_150_p2 : tmp_108_fu_132_p4);

assign select_ln441_fu_142_p3 = ((tmp_106_fu_114_p3[0:0] == 1'b1) ? tmp_107_fu_122_p4 : tmp_108_fu_132_p4);

assign sub_ln440_1_fu_70_p2 = (28'd0 - zext_ln440_fu_66_p1);

assign sub_ln440_fu_50_p2 = (32'd0 - Wt_X);

assign sub_ln441_1_fu_150_p2 = (28'd0 - select_ln441_fu_142_p3);

assign sub_ln441_fu_108_p2 = (65'd0 - mul_ln441_fu_102_p2);

assign tmp_106_fu_114_p1 = Wt_Y;

assign tmp_106_fu_114_p3 = tmp_106_fu_114_p1[32'd31];

assign tmp_107_fu_122_p4 = {{sub_ln441_fu_108_p2[64:37]}};

assign tmp_108_fu_132_p4 = {{mul_ln441_fu_102_p2[64:37]}};

assign tmp_fu_42_p3 = Wt_X[32'd31];

assign trunc_ln440_1_fu_56_p4 = {{sub_ln440_fu_50_p2[31:5]}};

assign trunc_ln440_2_fu_76_p4 = {{Wt_X[31:5]}};

assign zext_ln440_1_fu_86_p1 = trunc_ln440_2_fu_76_p4;

assign zext_ln440_fu_66_p1 = trunc_ln440_1_fu_56_p4;

endmodule //LINEAR_Block_split10_proc
