// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module LINEAR_OutputBuffer_Pipeline_VITIS_LOOP_329_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_ifc1_AWVALID,
        m_axi_ifc1_AWREADY,
        m_axi_ifc1_AWADDR,
        m_axi_ifc1_AWID,
        m_axi_ifc1_AWLEN,
        m_axi_ifc1_AWSIZE,
        m_axi_ifc1_AWBURST,
        m_axi_ifc1_AWLOCK,
        m_axi_ifc1_AWCACHE,
        m_axi_ifc1_AWPROT,
        m_axi_ifc1_AWQOS,
        m_axi_ifc1_AWREGION,
        m_axi_ifc1_AWUSER,
        m_axi_ifc1_WVALID,
        m_axi_ifc1_WREADY,
        m_axi_ifc1_WDATA,
        m_axi_ifc1_WSTRB,
        m_axi_ifc1_WLAST,
        m_axi_ifc1_WID,
        m_axi_ifc1_WUSER,
        m_axi_ifc1_ARVALID,
        m_axi_ifc1_ARREADY,
        m_axi_ifc1_ARADDR,
        m_axi_ifc1_ARID,
        m_axi_ifc1_ARLEN,
        m_axi_ifc1_ARSIZE,
        m_axi_ifc1_ARBURST,
        m_axi_ifc1_ARLOCK,
        m_axi_ifc1_ARCACHE,
        m_axi_ifc1_ARPROT,
        m_axi_ifc1_ARQOS,
        m_axi_ifc1_ARREGION,
        m_axi_ifc1_ARUSER,
        m_axi_ifc1_RVALID,
        m_axi_ifc1_RREADY,
        m_axi_ifc1_RDATA,
        m_axi_ifc1_RLAST,
        m_axi_ifc1_RID,
        m_axi_ifc1_RUSER,
        m_axi_ifc1_RRESP,
        m_axi_ifc1_BVALID,
        m_axi_ifc1_BREADY,
        m_axi_ifc1_BRESP,
        m_axi_ifc1_BID,
        m_axi_ifc1_BUSER,
        sext_ln329,
        trunc_ln329_1,
        output_buf_address0,
        output_buf_ce0,
        output_buf_q0,
        output_buf_address1,
        output_buf_ce1,
        output_buf_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_ifc1_AWVALID;
input   m_axi_ifc1_AWREADY;
output  [63:0] m_axi_ifc1_AWADDR;
output  [0:0] m_axi_ifc1_AWID;
output  [31:0] m_axi_ifc1_AWLEN;
output  [2:0] m_axi_ifc1_AWSIZE;
output  [1:0] m_axi_ifc1_AWBURST;
output  [1:0] m_axi_ifc1_AWLOCK;
output  [3:0] m_axi_ifc1_AWCACHE;
output  [2:0] m_axi_ifc1_AWPROT;
output  [3:0] m_axi_ifc1_AWQOS;
output  [3:0] m_axi_ifc1_AWREGION;
output  [0:0] m_axi_ifc1_AWUSER;
output   m_axi_ifc1_WVALID;
input   m_axi_ifc1_WREADY;
output  [127:0] m_axi_ifc1_WDATA;
output  [15:0] m_axi_ifc1_WSTRB;
output   m_axi_ifc1_WLAST;
output  [0:0] m_axi_ifc1_WID;
output  [0:0] m_axi_ifc1_WUSER;
output   m_axi_ifc1_ARVALID;
input   m_axi_ifc1_ARREADY;
output  [63:0] m_axi_ifc1_ARADDR;
output  [0:0] m_axi_ifc1_ARID;
output  [31:0] m_axi_ifc1_ARLEN;
output  [2:0] m_axi_ifc1_ARSIZE;
output  [1:0] m_axi_ifc1_ARBURST;
output  [1:0] m_axi_ifc1_ARLOCK;
output  [3:0] m_axi_ifc1_ARCACHE;
output  [2:0] m_axi_ifc1_ARPROT;
output  [3:0] m_axi_ifc1_ARQOS;
output  [3:0] m_axi_ifc1_ARREGION;
output  [0:0] m_axi_ifc1_ARUSER;
input   m_axi_ifc1_RVALID;
output   m_axi_ifc1_RREADY;
input  [127:0] m_axi_ifc1_RDATA;
input   m_axi_ifc1_RLAST;
input  [0:0] m_axi_ifc1_RID;
input  [0:0] m_axi_ifc1_RUSER;
input  [1:0] m_axi_ifc1_RRESP;
input   m_axi_ifc1_BVALID;
output   m_axi_ifc1_BREADY;
input  [1:0] m_axi_ifc1_BRESP;
input  [0:0] m_axi_ifc1_BID;
input  [0:0] m_axi_ifc1_BUSER;
input  [59:0] sext_ln329;
input  [28:0] trunc_ln329_1;
output  [9:0] output_buf_address0;
output   output_buf_ce0;
input  [31:0] output_buf_q0;
output  [9:0] output_buf_address1;
output   output_buf_ce1;
input  [31:0] output_buf_q1;

reg ap_idle;
reg m_axi_ifc1_WVALID;
reg[9:0] output_buf_address0;
reg output_buf_ce0;
reg[9:0] output_buf_address1;
reg output_buf_ce1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
reg   [0:0] icmp_ln329_reg_252;
reg   [0:0] icmp_ln329_reg_252_pp0_iter1_reg;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage1_subdone;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ifc1_blk_n_W;
wire    ap_block_pp0_stage1;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln329_fu_143_p2;
wire   [9:0] add_ln640_fu_179_p2;
reg   [9:0] add_ln640_reg_256;
reg    ap_block_pp0_stage1_11001;
reg   [31:0] output_buf_load_reg_282;
reg   [31:0] output_buf_load_1_reg_287;
reg   [31:0] output_buf_load_2_reg_297;
reg   [31:0] output_buf_load_3_reg_302;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter1_stage0;
reg    ap_idle_pp0_0to0;
wire   [63:0] zext_ln640_fu_185_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln640_1_fu_196_p1;
wire   [63:0] zext_ln640_2_fu_211_p1;
wire   [63:0] zext_ln640_3_fu_221_p1;
wire    ap_block_pp0_stage1_01001;
reg   [28:0] i_fu_66;
wire    ap_loop_init;
reg   [28:0] ap_sig_allocacmp_overall_addr;
wire   [28:0] add_ln335_fu_149_p2;
wire   [5:0] trunc_ln640_fu_155_p1;
wire   [7:0] trunc_ln640_1_fu_167_p1;
wire   [9:0] tmp_cast_fu_159_p3;
wire   [9:0] tmp_65_cast_fu_171_p3;
wire   [9:0] or_ln640_fu_190_p2;
wire   [9:0] or_ln640_1_fu_206_p2;
wire   [9:0] or_ln640_2_fu_216_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
reg    ap_done_pending_pp0;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

LINEAR_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_exit_pp0_iter1_stage0) & (ap_idle_pp0_0to0 == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone)) | ((1'b1 == ap_condition_exit_pp0_iter1_stage0) & (ap_idle_pp0_0to0 == 1'b1)))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln329_fu_143_p2 == 1'd0))) begin
            i_fu_66 <= add_ln335_fu_149_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_66 <= 29'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln329_fu_143_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln640_reg_256[9 : 2] <= add_ln640_fu_179_p2[9 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln329_reg_252 <= icmp_ln329_fu_143_p2;
        icmp_ln329_reg_252_pp0_iter1_reg <= icmp_ln329_reg_252;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln329_reg_252 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        output_buf_load_1_reg_287 <= output_buf_q0;
        output_buf_load_reg_282 <= output_buf_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln329_reg_252 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_buf_load_2_reg_297 <= output_buf_q1;
        output_buf_load_3_reg_302 <= output_buf_q0;
    end
end

always @ (*) begin
    if (((icmp_ln329_reg_252 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln329_reg_252 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (~((ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (ap_loop_exit_ready == 1'b0))) begin
        ap_done_pending_pp0 = 1'b1;
    end else begin
        ap_done_pending_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_overall_addr = 29'd0;
    end else begin
        ap_sig_allocacmp_overall_addr = i_fu_66;
    end
end

always @ (*) begin
    if (((icmp_ln329_reg_252_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        ifc1_blk_n_W = m_axi_ifc1_WREADY;
    end else begin
        ifc1_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln329_reg_252_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        m_axi_ifc1_WVALID = 1'b1;
    end else begin
        m_axi_ifc1_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            output_buf_address0 = zext_ln640_3_fu_221_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            output_buf_address0 = zext_ln640_1_fu_196_p1;
        end else begin
            output_buf_address0 = 'bx;
        end
    end else begin
        output_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            output_buf_address1 = zext_ln640_2_fu_211_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            output_buf_address1 = zext_ln640_fu_185_p1;
        end else begin
            output_buf_address1 = 'bx;
        end
    end else begin
        output_buf_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        output_buf_ce0 = 1'b1;
    end else begin
        output_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        output_buf_ce1 = 1'b1;
    end else begin
        output_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((1'b1 == ap_condition_exit_pp0_iter1_stage0) & (ap_idle_pp0_0to0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_done_pending_pp0 == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln335_fu_149_p2 = (ap_sig_allocacmp_overall_addr + 29'd1);

assign add_ln640_fu_179_p2 = (tmp_cast_fu_159_p3 + tmp_65_cast_fu_171_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state4_io));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state4_io));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((icmp_ln329_reg_252_pp0_iter1_reg == 1'd0) & (m_axi_ifc1_WREADY == 1'b0));
end

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign icmp_ln329_fu_143_p2 = ((ap_sig_allocacmp_overall_addr == trunc_ln329_1) ? 1'b1 : 1'b0);

assign m_axi_ifc1_ARADDR = 64'd0;

assign m_axi_ifc1_ARBURST = 2'd0;

assign m_axi_ifc1_ARCACHE = 4'd0;

assign m_axi_ifc1_ARID = 1'd0;

assign m_axi_ifc1_ARLEN = 32'd0;

assign m_axi_ifc1_ARLOCK = 2'd0;

assign m_axi_ifc1_ARPROT = 3'd0;

assign m_axi_ifc1_ARQOS = 4'd0;

assign m_axi_ifc1_ARREGION = 4'd0;

assign m_axi_ifc1_ARSIZE = 3'd0;

assign m_axi_ifc1_ARUSER = 1'd0;

assign m_axi_ifc1_ARVALID = 1'b0;

assign m_axi_ifc1_AWADDR = 64'd0;

assign m_axi_ifc1_AWBURST = 2'd0;

assign m_axi_ifc1_AWCACHE = 4'd0;

assign m_axi_ifc1_AWID = 1'd0;

assign m_axi_ifc1_AWLEN = 32'd0;

assign m_axi_ifc1_AWLOCK = 2'd0;

assign m_axi_ifc1_AWPROT = 3'd0;

assign m_axi_ifc1_AWQOS = 4'd0;

assign m_axi_ifc1_AWREGION = 4'd0;

assign m_axi_ifc1_AWSIZE = 3'd0;

assign m_axi_ifc1_AWUSER = 1'd0;

assign m_axi_ifc1_AWVALID = 1'b0;

assign m_axi_ifc1_BREADY = 1'b0;

assign m_axi_ifc1_RREADY = 1'b0;

assign m_axi_ifc1_WDATA = {{{{output_buf_load_3_reg_302}, {output_buf_load_2_reg_297}}, {output_buf_load_1_reg_287}}, {output_buf_load_reg_282}};

assign m_axi_ifc1_WID = 1'd0;

assign m_axi_ifc1_WLAST = 1'b0;

assign m_axi_ifc1_WSTRB = 16'd65535;

assign m_axi_ifc1_WUSER = 1'd0;

assign or_ln640_1_fu_206_p2 = (10'd2 | add_ln640_reg_256);

assign or_ln640_2_fu_216_p2 = (10'd3 | add_ln640_reg_256);

assign or_ln640_fu_190_p2 = (10'd1 | add_ln640_fu_179_p2);

assign tmp_65_cast_fu_171_p3 = {{trunc_ln640_1_fu_167_p1}, {2'd0}};

assign tmp_cast_fu_159_p3 = {{trunc_ln640_fu_155_p1}, {4'd0}};

assign trunc_ln640_1_fu_167_p1 = ap_sig_allocacmp_overall_addr[7:0];

assign trunc_ln640_fu_155_p1 = ap_sig_allocacmp_overall_addr[5:0];

assign zext_ln640_1_fu_196_p1 = or_ln640_fu_190_p2;

assign zext_ln640_2_fu_211_p1 = or_ln640_1_fu_206_p2;

assign zext_ln640_3_fu_221_p1 = or_ln640_2_fu_216_p2;

assign zext_ln640_fu_185_p1 = add_ln640_fu_179_p2;

always @ (posedge ap_clk) begin
    add_ln640_reg_256[1:0] <= 2'b00;
end

endmodule //LINEAR_OutputBuffer_Pipeline_VITIS_LOOP_329_1
