-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LINEAR_OutputBuffer_Pipeline_VITIS_LOOP_329_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_ifc1_AWVALID : OUT STD_LOGIC;
    m_axi_ifc1_AWREADY : IN STD_LOGIC;
    m_axi_ifc1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_ifc1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ifc1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ifc1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ifc1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ifc1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ifc1_WVALID : OUT STD_LOGIC;
    m_axi_ifc1_WREADY : IN STD_LOGIC;
    m_axi_ifc1_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    m_axi_ifc1_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_ifc1_WLAST : OUT STD_LOGIC;
    m_axi_ifc1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ifc1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ifc1_ARVALID : OUT STD_LOGIC;
    m_axi_ifc1_ARREADY : IN STD_LOGIC;
    m_axi_ifc1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_ifc1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ifc1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ifc1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ifc1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ifc1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ifc1_RVALID : IN STD_LOGIC;
    m_axi_ifc1_RREADY : OUT STD_LOGIC;
    m_axi_ifc1_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    m_axi_ifc1_RLAST : IN STD_LOGIC;
    m_axi_ifc1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ifc1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ifc1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc1_BVALID : IN STD_LOGIC;
    m_axi_ifc1_BREADY : OUT STD_LOGIC;
    m_axi_ifc1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ifc1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln329 : IN STD_LOGIC_VECTOR (59 downto 0);
    trunc_ln329_1 : IN STD_LOGIC_VECTOR (28 downto 0);
    output_buf_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_buf_ce0 : OUT STD_LOGIC;
    output_buf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_buf_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_buf_ce1 : OUT STD_LOGIC;
    output_buf_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of LINEAR_OutputBuffer_Pipeline_VITIS_LOOP_329_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv29_1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal icmp_ln329_reg_252 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln329_reg_252_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ifc1_blk_n_W : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln329_fu_143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln640_fu_179_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln640_reg_256 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal output_buf_load_reg_282 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_buf_load_1_reg_287 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_buf_load_2_reg_297 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_buf_load_3_reg_302 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal zext_ln640_fu_185_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln640_1_fu_196_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln640_2_fu_211_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln640_3_fu_221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal i_fu_66 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_overall_addr : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln335_fu_149_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln640_fu_155_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln640_1_fu_167_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_cast_fu_159_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_65_cast_fu_171_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln640_fu_190_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln640_1_fu_206_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln640_2_fu_216_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component LINEAR_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component LINEAR_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) or ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0) and (ap_idle_pp0_0to0 = ap_const_logic_1)))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    i_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln329_fu_143_p2 = ap_const_lv1_0))) then 
                    i_fu_66 <= add_ln335_fu_149_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_66 <= ap_const_lv29_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln329_fu_143_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    add_ln640_reg_256(9 downto 2) <= add_ln640_fu_179_p2(9 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln329_reg_252 <= icmp_ln329_fu_143_p2;
                icmp_ln329_reg_252_pp0_iter1_reg <= icmp_ln329_reg_252;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln329_reg_252 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                output_buf_load_1_reg_287 <= output_buf_q0;
                output_buf_load_reg_282 <= output_buf_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln329_reg_252 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                output_buf_load_2_reg_297 <= output_buf_q1;
                output_buf_load_3_reg_302 <= output_buf_q0;
            end if;
        end if;
    end process;
    add_ln640_reg_256(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter1_stage0, ap_idle_pp0_0to0, ap_idle_pp0_1to1, ap_done_pending_pp0, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln335_fu_149_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_overall_addr) + unsigned(ap_const_lv29_1));
    add_ln640_fu_179_p2 <= std_logic_vector(unsigned(tmp_cast_fu_159_p3) + unsigned(tmp_65_cast_fu_171_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state4_io)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state4_io)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(m_axi_ifc1_WREADY, icmp_ln329_reg_252_pp0_iter1_reg)
    begin
                ap_block_state4_io <= ((icmp_ln329_reg_252_pp0_iter1_reg = ap_const_lv1_0) and (m_axi_ifc1_WREADY = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln329_reg_252, ap_block_pp0_stage1_subdone)
    begin
        if (((icmp_ln329_reg_252 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln329_reg_252, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln329_reg_252 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (not(((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0) and (ap_loop_exit_ready = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_overall_addr_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_66, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_overall_addr <= ap_const_lv29_0;
        else 
            ap_sig_allocacmp_overall_addr <= i_fu_66;
        end if; 
    end process;

    icmp_ln329_fu_143_p2 <= "1" when (ap_sig_allocacmp_overall_addr = trunc_ln329_1) else "0";

    ifc1_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, m_axi_ifc1_WREADY, icmp_ln329_reg_252_pp0_iter1_reg, ap_block_pp0_stage1)
    begin
        if (((icmp_ln329_reg_252_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            ifc1_blk_n_W <= m_axi_ifc1_WREADY;
        else 
            ifc1_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    m_axi_ifc1_ARADDR <= ap_const_lv64_0;
    m_axi_ifc1_ARBURST <= ap_const_lv2_0;
    m_axi_ifc1_ARCACHE <= ap_const_lv4_0;
    m_axi_ifc1_ARID <= ap_const_lv1_0;
    m_axi_ifc1_ARLEN <= ap_const_lv32_0;
    m_axi_ifc1_ARLOCK <= ap_const_lv2_0;
    m_axi_ifc1_ARPROT <= ap_const_lv3_0;
    m_axi_ifc1_ARQOS <= ap_const_lv4_0;
    m_axi_ifc1_ARREGION <= ap_const_lv4_0;
    m_axi_ifc1_ARSIZE <= ap_const_lv3_0;
    m_axi_ifc1_ARUSER <= ap_const_lv1_0;
    m_axi_ifc1_ARVALID <= ap_const_logic_0;
    m_axi_ifc1_AWADDR <= ap_const_lv64_0;
    m_axi_ifc1_AWBURST <= ap_const_lv2_0;
    m_axi_ifc1_AWCACHE <= ap_const_lv4_0;
    m_axi_ifc1_AWID <= ap_const_lv1_0;
    m_axi_ifc1_AWLEN <= ap_const_lv32_0;
    m_axi_ifc1_AWLOCK <= ap_const_lv2_0;
    m_axi_ifc1_AWPROT <= ap_const_lv3_0;
    m_axi_ifc1_AWQOS <= ap_const_lv4_0;
    m_axi_ifc1_AWREGION <= ap_const_lv4_0;
    m_axi_ifc1_AWSIZE <= ap_const_lv3_0;
    m_axi_ifc1_AWUSER <= ap_const_lv1_0;
    m_axi_ifc1_AWVALID <= ap_const_logic_0;
    m_axi_ifc1_BREADY <= ap_const_logic_0;
    m_axi_ifc1_RREADY <= ap_const_logic_0;
    m_axi_ifc1_WDATA <= (((output_buf_load_3_reg_302 & output_buf_load_2_reg_297) & output_buf_load_1_reg_287) & output_buf_load_reg_282);
    m_axi_ifc1_WID <= ap_const_lv1_0;
    m_axi_ifc1_WLAST <= ap_const_logic_0;
    m_axi_ifc1_WSTRB <= ap_const_lv16_FFFF;
    m_axi_ifc1_WUSER <= ap_const_lv1_0;

    m_axi_ifc1_WVALID_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln329_reg_252_pp0_iter1_reg, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln329_reg_252_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            m_axi_ifc1_WVALID <= ap_const_logic_1;
        else 
            m_axi_ifc1_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln640_1_fu_206_p2 <= (ap_const_lv10_2 or add_ln640_reg_256);
    or_ln640_2_fu_216_p2 <= (ap_const_lv10_3 or add_ln640_reg_256);
    or_ln640_fu_190_p2 <= (ap_const_lv10_1 or add_ln640_fu_179_p2);

    output_buf_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, zext_ln640_1_fu_196_p1, zext_ln640_3_fu_221_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                output_buf_address0 <= zext_ln640_3_fu_221_p1(10 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                output_buf_address0 <= zext_ln640_1_fu_196_p1(10 - 1 downto 0);
            else 
                output_buf_address0 <= "XXXXXXXXXX";
            end if;
        else 
            output_buf_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    output_buf_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, zext_ln640_fu_185_p1, ap_block_pp0_stage0, zext_ln640_2_fu_211_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                output_buf_address1 <= zext_ln640_2_fu_211_p1(10 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                output_buf_address1 <= zext_ln640_fu_185_p1(10 - 1 downto 0);
            else 
                output_buf_address1 <= "XXXXXXXXXX";
            end if;
        else 
            output_buf_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    output_buf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            output_buf_ce0 <= ap_const_logic_1;
        else 
            output_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_buf_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            output_buf_ce1 <= ap_const_logic_1;
        else 
            output_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_65_cast_fu_171_p3 <= (trunc_ln640_1_fu_167_p1 & ap_const_lv2_0);
    tmp_cast_fu_159_p3 <= (trunc_ln640_fu_155_p1 & ap_const_lv4_0);
    trunc_ln640_1_fu_167_p1 <= ap_sig_allocacmp_overall_addr(8 - 1 downto 0);
    trunc_ln640_fu_155_p1 <= ap_sig_allocacmp_overall_addr(6 - 1 downto 0);
    zext_ln640_1_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln640_fu_190_p2),64));
    zext_ln640_2_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln640_1_fu_206_p2),64));
    zext_ln640_3_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln640_2_fu_216_p2),64));
    zext_ln640_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln640_fu_179_p2),64));
end behav;
