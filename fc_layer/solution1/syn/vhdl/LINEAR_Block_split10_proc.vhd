-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LINEAR_Block_split10_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Wt_X : IN STD_LOGIC_VECTOR (31 downto 0);
    Wt_Y : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (27 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (27 downto 0) );
end;


architecture behav of LINEAR_Block_split10_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv65_19999999A : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000110011001100110011001100110011010";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal sub_ln440_fu_50_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln440_1_fu_56_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln440_fu_66_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln440_2_fu_76_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_fu_42_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln440_1_fu_70_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln440_1_fu_86_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln441_fu_102_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln441_fu_102_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_106_fu_114_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln441_fu_108_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_106_fu_114_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_107_fu_122_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_108_fu_132_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln441_fu_142_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sub_ln441_1_fu_150_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal block_num_x_fu_90_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln441_1_fu_156_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component LINEAR_mul_32s_34ns_65_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (33 downto 0);
        dout : OUT STD_LOGIC_VECTOR (64 downto 0) );
    end component;



begin
    mul_32s_34ns_65_1_1_U2 : component LINEAR_mul_32s_34ns_65_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 34,
        dout_WIDTH => 65)
    port map (
        din0 => Wt_Y,
        din1 => mul_ln441_fu_102_p1,
        dout => mul_ln441_fu_102_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv28_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_0_preg <= block_num_x_fu_90_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv28_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_1_preg <= select_ln441_1_fu_156_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, block_num_x_fu_90_p3, ap_return_0_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_0 <= block_num_x_fu_90_p3;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, select_ln441_1_fu_156_p3, ap_return_1_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_1 <= select_ln441_1_fu_156_p3;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    block_num_x_fu_90_p3 <= 
        sub_ln440_1_fu_70_p2 when (tmp_fu_42_p3(0) = '1') else 
        zext_ln440_1_fu_86_p1;
    mul_ln441_fu_102_p1 <= ap_const_lv65_19999999A(34 - 1 downto 0);
    select_ln441_1_fu_156_p3 <= 
        sub_ln441_1_fu_150_p2 when (tmp_106_fu_114_p3(0) = '1') else 
        tmp_108_fu_132_p4;
    select_ln441_fu_142_p3 <= 
        tmp_107_fu_122_p4 when (tmp_106_fu_114_p3(0) = '1') else 
        tmp_108_fu_132_p4;
    sub_ln440_1_fu_70_p2 <= std_logic_vector(unsigned(ap_const_lv28_0) - unsigned(zext_ln440_fu_66_p1));
    sub_ln440_fu_50_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(Wt_X));
    sub_ln441_1_fu_150_p2 <= std_logic_vector(unsigned(ap_const_lv28_0) - unsigned(select_ln441_fu_142_p3));
    sub_ln441_fu_108_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_ln441_fu_102_p2));
    tmp_106_fu_114_p1 <= Wt_Y;
    tmp_106_fu_114_p3 <= tmp_106_fu_114_p1(31 downto 31);
    tmp_107_fu_122_p4 <= sub_ln441_fu_108_p2(64 downto 37);
    tmp_108_fu_132_p4 <= mul_ln441_fu_102_p2(64 downto 37);
    tmp_fu_42_p3 <= Wt_X(31 downto 31);
    trunc_ln440_1_fu_56_p4 <= sub_ln440_fu_50_p2(31 downto 5);
    trunc_ln440_2_fu_76_p4 <= Wt_X(31 downto 5);
    zext_ln440_1_fu_86_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln440_2_fu_76_p4),28));
    zext_ln440_fu_66_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln440_1_fu_56_p4),28));
end behav;
