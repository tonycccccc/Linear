-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LINEAR is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IFC1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_IFC1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IFC1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IFC1_DATA_WIDTH : INTEGER := 128;
    C_M_AXI_IFC1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IFC1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IFC1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IFC1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IFC2_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_IFC2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IFC2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IFC2_DATA_WIDTH : INTEGER := 128;
    C_M_AXI_IFC2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IFC2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IFC2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IFC2_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IFC3_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_IFC3_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IFC3_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IFC3_DATA_WIDTH : INTEGER := 128;
    C_M_AXI_IFC3_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IFC3_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IFC3_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IFC3_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IFC4_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_IFC4_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IFC4_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IFC4_DATA_WIDTH : INTEGER := 128;
    C_M_AXI_IFC4_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IFC4_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IFC4_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IFC4_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IFC5_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_IFC5_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IFC5_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IFC5_DATA_WIDTH : INTEGER := 128;
    C_M_AXI_IFC5_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IFC5_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IFC5_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IFC5_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IFC6_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_IFC6_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IFC6_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IFC6_DATA_WIDTH : INTEGER := 128;
    C_M_AXI_IFC6_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IFC6_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IFC6_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IFC6_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IFC1_USER_VALUE : INTEGER := 0;
    C_M_AXI_IFC1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IFC1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_IFC2_USER_VALUE : INTEGER := 0;
    C_M_AXI_IFC2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IFC2_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_IFC3_USER_VALUE : INTEGER := 0;
    C_M_AXI_IFC3_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IFC3_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_IFC4_USER_VALUE : INTEGER := 0;
    C_M_AXI_IFC4_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IFC4_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_IFC5_USER_VALUE : INTEGER := 0;
    C_M_AXI_IFC5_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IFC5_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_IFC6_USER_VALUE : INTEGER := 0;
    C_M_AXI_IFC6_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IFC6_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc1_AWVALID : OUT STD_LOGIC;
    m_axi_ifc1_AWREADY : IN STD_LOGIC;
    m_axi_ifc1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC1_ADDR_WIDTH-1 downto 0);
    m_axi_ifc1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC1_ID_WIDTH-1 downto 0);
    m_axi_ifc1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ifc1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ifc1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ifc1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC1_AWUSER_WIDTH-1 downto 0);
    m_axi_ifc1_WVALID : OUT STD_LOGIC;
    m_axi_ifc1_WREADY : IN STD_LOGIC;
    m_axi_ifc1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC1_DATA_WIDTH-1 downto 0);
    m_axi_ifc1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC1_DATA_WIDTH/8-1 downto 0);
    m_axi_ifc1_WLAST : OUT STD_LOGIC;
    m_axi_ifc1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC1_ID_WIDTH-1 downto 0);
    m_axi_ifc1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC1_WUSER_WIDTH-1 downto 0);
    m_axi_ifc1_ARVALID : OUT STD_LOGIC;
    m_axi_ifc1_ARREADY : IN STD_LOGIC;
    m_axi_ifc1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC1_ADDR_WIDTH-1 downto 0);
    m_axi_ifc1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC1_ID_WIDTH-1 downto 0);
    m_axi_ifc1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ifc1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ifc1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ifc1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC1_ARUSER_WIDTH-1 downto 0);
    m_axi_ifc1_RVALID : IN STD_LOGIC;
    m_axi_ifc1_RREADY : OUT STD_LOGIC;
    m_axi_ifc1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IFC1_DATA_WIDTH-1 downto 0);
    m_axi_ifc1_RLAST : IN STD_LOGIC;
    m_axi_ifc1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IFC1_ID_WIDTH-1 downto 0);
    m_axi_ifc1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IFC1_RUSER_WIDTH-1 downto 0);
    m_axi_ifc1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc1_BVALID : IN STD_LOGIC;
    m_axi_ifc1_BREADY : OUT STD_LOGIC;
    m_axi_ifc1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IFC1_ID_WIDTH-1 downto 0);
    m_axi_ifc1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IFC1_BUSER_WIDTH-1 downto 0);
    m_axi_ifc2_AWVALID : OUT STD_LOGIC;
    m_axi_ifc2_AWREADY : IN STD_LOGIC;
    m_axi_ifc2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC2_ADDR_WIDTH-1 downto 0);
    m_axi_ifc2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC2_ID_WIDTH-1 downto 0);
    m_axi_ifc2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ifc2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ifc2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ifc2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC2_AWUSER_WIDTH-1 downto 0);
    m_axi_ifc2_WVALID : OUT STD_LOGIC;
    m_axi_ifc2_WREADY : IN STD_LOGIC;
    m_axi_ifc2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC2_DATA_WIDTH-1 downto 0);
    m_axi_ifc2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC2_DATA_WIDTH/8-1 downto 0);
    m_axi_ifc2_WLAST : OUT STD_LOGIC;
    m_axi_ifc2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC2_ID_WIDTH-1 downto 0);
    m_axi_ifc2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC2_WUSER_WIDTH-1 downto 0);
    m_axi_ifc2_ARVALID : OUT STD_LOGIC;
    m_axi_ifc2_ARREADY : IN STD_LOGIC;
    m_axi_ifc2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC2_ADDR_WIDTH-1 downto 0);
    m_axi_ifc2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC2_ID_WIDTH-1 downto 0);
    m_axi_ifc2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ifc2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ifc2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ifc2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC2_ARUSER_WIDTH-1 downto 0);
    m_axi_ifc2_RVALID : IN STD_LOGIC;
    m_axi_ifc2_RREADY : OUT STD_LOGIC;
    m_axi_ifc2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IFC2_DATA_WIDTH-1 downto 0);
    m_axi_ifc2_RLAST : IN STD_LOGIC;
    m_axi_ifc2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IFC2_ID_WIDTH-1 downto 0);
    m_axi_ifc2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IFC2_RUSER_WIDTH-1 downto 0);
    m_axi_ifc2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc2_BVALID : IN STD_LOGIC;
    m_axi_ifc2_BREADY : OUT STD_LOGIC;
    m_axi_ifc2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IFC2_ID_WIDTH-1 downto 0);
    m_axi_ifc2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IFC2_BUSER_WIDTH-1 downto 0);
    m_axi_ifc3_AWVALID : OUT STD_LOGIC;
    m_axi_ifc3_AWREADY : IN STD_LOGIC;
    m_axi_ifc3_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC3_ADDR_WIDTH-1 downto 0);
    m_axi_ifc3_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC3_ID_WIDTH-1 downto 0);
    m_axi_ifc3_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ifc3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ifc3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ifc3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc3_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC3_AWUSER_WIDTH-1 downto 0);
    m_axi_ifc3_WVALID : OUT STD_LOGIC;
    m_axi_ifc3_WREADY : IN STD_LOGIC;
    m_axi_ifc3_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC3_DATA_WIDTH-1 downto 0);
    m_axi_ifc3_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC3_DATA_WIDTH/8-1 downto 0);
    m_axi_ifc3_WLAST : OUT STD_LOGIC;
    m_axi_ifc3_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC3_ID_WIDTH-1 downto 0);
    m_axi_ifc3_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC3_WUSER_WIDTH-1 downto 0);
    m_axi_ifc3_ARVALID : OUT STD_LOGIC;
    m_axi_ifc3_ARREADY : IN STD_LOGIC;
    m_axi_ifc3_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC3_ADDR_WIDTH-1 downto 0);
    m_axi_ifc3_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC3_ID_WIDTH-1 downto 0);
    m_axi_ifc3_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ifc3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ifc3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ifc3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc3_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC3_ARUSER_WIDTH-1 downto 0);
    m_axi_ifc3_RVALID : IN STD_LOGIC;
    m_axi_ifc3_RREADY : OUT STD_LOGIC;
    m_axi_ifc3_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IFC3_DATA_WIDTH-1 downto 0);
    m_axi_ifc3_RLAST : IN STD_LOGIC;
    m_axi_ifc3_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IFC3_ID_WIDTH-1 downto 0);
    m_axi_ifc3_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IFC3_RUSER_WIDTH-1 downto 0);
    m_axi_ifc3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc3_BVALID : IN STD_LOGIC;
    m_axi_ifc3_BREADY : OUT STD_LOGIC;
    m_axi_ifc3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc3_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IFC3_ID_WIDTH-1 downto 0);
    m_axi_ifc3_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IFC3_BUSER_WIDTH-1 downto 0);
    m_axi_ifc4_AWVALID : OUT STD_LOGIC;
    m_axi_ifc4_AWREADY : IN STD_LOGIC;
    m_axi_ifc4_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC4_ADDR_WIDTH-1 downto 0);
    m_axi_ifc4_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC4_ID_WIDTH-1 downto 0);
    m_axi_ifc4_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ifc4_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ifc4_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc4_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc4_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc4_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ifc4_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc4_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc4_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC4_AWUSER_WIDTH-1 downto 0);
    m_axi_ifc4_WVALID : OUT STD_LOGIC;
    m_axi_ifc4_WREADY : IN STD_LOGIC;
    m_axi_ifc4_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC4_DATA_WIDTH-1 downto 0);
    m_axi_ifc4_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC4_DATA_WIDTH/8-1 downto 0);
    m_axi_ifc4_WLAST : OUT STD_LOGIC;
    m_axi_ifc4_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC4_ID_WIDTH-1 downto 0);
    m_axi_ifc4_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC4_WUSER_WIDTH-1 downto 0);
    m_axi_ifc4_ARVALID : OUT STD_LOGIC;
    m_axi_ifc4_ARREADY : IN STD_LOGIC;
    m_axi_ifc4_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC4_ADDR_WIDTH-1 downto 0);
    m_axi_ifc4_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC4_ID_WIDTH-1 downto 0);
    m_axi_ifc4_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ifc4_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ifc4_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc4_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc4_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc4_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ifc4_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc4_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc4_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC4_ARUSER_WIDTH-1 downto 0);
    m_axi_ifc4_RVALID : IN STD_LOGIC;
    m_axi_ifc4_RREADY : OUT STD_LOGIC;
    m_axi_ifc4_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IFC4_DATA_WIDTH-1 downto 0);
    m_axi_ifc4_RLAST : IN STD_LOGIC;
    m_axi_ifc4_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IFC4_ID_WIDTH-1 downto 0);
    m_axi_ifc4_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IFC4_RUSER_WIDTH-1 downto 0);
    m_axi_ifc4_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc4_BVALID : IN STD_LOGIC;
    m_axi_ifc4_BREADY : OUT STD_LOGIC;
    m_axi_ifc4_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc4_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IFC4_ID_WIDTH-1 downto 0);
    m_axi_ifc4_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IFC4_BUSER_WIDTH-1 downto 0);
    m_axi_ifc5_AWVALID : OUT STD_LOGIC;
    m_axi_ifc5_AWREADY : IN STD_LOGIC;
    m_axi_ifc5_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC5_ADDR_WIDTH-1 downto 0);
    m_axi_ifc5_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC5_ID_WIDTH-1 downto 0);
    m_axi_ifc5_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ifc5_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ifc5_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc5_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc5_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc5_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ifc5_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc5_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc5_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC5_AWUSER_WIDTH-1 downto 0);
    m_axi_ifc5_WVALID : OUT STD_LOGIC;
    m_axi_ifc5_WREADY : IN STD_LOGIC;
    m_axi_ifc5_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC5_DATA_WIDTH-1 downto 0);
    m_axi_ifc5_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC5_DATA_WIDTH/8-1 downto 0);
    m_axi_ifc5_WLAST : OUT STD_LOGIC;
    m_axi_ifc5_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC5_ID_WIDTH-1 downto 0);
    m_axi_ifc5_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC5_WUSER_WIDTH-1 downto 0);
    m_axi_ifc5_ARVALID : OUT STD_LOGIC;
    m_axi_ifc5_ARREADY : IN STD_LOGIC;
    m_axi_ifc5_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC5_ADDR_WIDTH-1 downto 0);
    m_axi_ifc5_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC5_ID_WIDTH-1 downto 0);
    m_axi_ifc5_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ifc5_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ifc5_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc5_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc5_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc5_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ifc5_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc5_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc5_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC5_ARUSER_WIDTH-1 downto 0);
    m_axi_ifc5_RVALID : IN STD_LOGIC;
    m_axi_ifc5_RREADY : OUT STD_LOGIC;
    m_axi_ifc5_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IFC5_DATA_WIDTH-1 downto 0);
    m_axi_ifc5_RLAST : IN STD_LOGIC;
    m_axi_ifc5_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IFC5_ID_WIDTH-1 downto 0);
    m_axi_ifc5_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IFC5_RUSER_WIDTH-1 downto 0);
    m_axi_ifc5_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc5_BVALID : IN STD_LOGIC;
    m_axi_ifc5_BREADY : OUT STD_LOGIC;
    m_axi_ifc5_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc5_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IFC5_ID_WIDTH-1 downto 0);
    m_axi_ifc5_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IFC5_BUSER_WIDTH-1 downto 0);
    m_axi_ifc6_AWVALID : OUT STD_LOGIC;
    m_axi_ifc6_AWREADY : IN STD_LOGIC;
    m_axi_ifc6_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC6_ADDR_WIDTH-1 downto 0);
    m_axi_ifc6_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC6_ID_WIDTH-1 downto 0);
    m_axi_ifc6_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ifc6_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ifc6_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc6_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc6_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc6_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ifc6_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc6_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc6_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC6_AWUSER_WIDTH-1 downto 0);
    m_axi_ifc6_WVALID : OUT STD_LOGIC;
    m_axi_ifc6_WREADY : IN STD_LOGIC;
    m_axi_ifc6_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC6_DATA_WIDTH-1 downto 0);
    m_axi_ifc6_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC6_DATA_WIDTH/8-1 downto 0);
    m_axi_ifc6_WLAST : OUT STD_LOGIC;
    m_axi_ifc6_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC6_ID_WIDTH-1 downto 0);
    m_axi_ifc6_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC6_WUSER_WIDTH-1 downto 0);
    m_axi_ifc6_ARVALID : OUT STD_LOGIC;
    m_axi_ifc6_ARREADY : IN STD_LOGIC;
    m_axi_ifc6_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC6_ADDR_WIDTH-1 downto 0);
    m_axi_ifc6_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC6_ID_WIDTH-1 downto 0);
    m_axi_ifc6_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ifc6_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ifc6_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc6_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc6_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc6_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ifc6_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc6_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ifc6_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IFC6_ARUSER_WIDTH-1 downto 0);
    m_axi_ifc6_RVALID : IN STD_LOGIC;
    m_axi_ifc6_RREADY : OUT STD_LOGIC;
    m_axi_ifc6_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IFC6_DATA_WIDTH-1 downto 0);
    m_axi_ifc6_RLAST : IN STD_LOGIC;
    m_axi_ifc6_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IFC6_ID_WIDTH-1 downto 0);
    m_axi_ifc6_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IFC6_RUSER_WIDTH-1 downto 0);
    m_axi_ifc6_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc6_BVALID : IN STD_LOGIC;
    m_axi_ifc6_BREADY : OUT STD_LOGIC;
    m_axi_ifc6_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ifc6_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IFC6_ID_WIDTH-1 downto 0);
    m_axi_ifc6_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IFC6_BUSER_WIDTH-1 downto 0);
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of LINEAR is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "LINEAR_LINEAR,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=207,HLS_SYN_DSP=0,HLS_SYN_FF=80751,HLS_SYN_LUT=170873,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal weight_buffer_V_0_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_1_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_2_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_3_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_4_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_5_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_6_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_7_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_8_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_9_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_10_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_11_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_12_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_13_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_14_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_15_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_16_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_17_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_18_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_19_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_20_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_21_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_22_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_23_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_24_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_25_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_26_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_27_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_28_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_29_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_30_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_31_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_32_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_33_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_34_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_35_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_36_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_37_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_38_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_39_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_40_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_41_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_42_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_43_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_44_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_45_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_46_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_47_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_48_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_49_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_50_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_51_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_52_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_53_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_54_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_55_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_56_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_57_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_58_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_59_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_60_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_61_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_62_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_63_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_64_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_65_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_66_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_67_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_68_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_69_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal weight_buffer_V_70_q0 : STD_LOGIC_VECTOR (287 downto 0);
    signal iact_buffer_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_buf_V_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_buf_V_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_buf_V_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_buf_V_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ifc1_offset : STD_LOGIC_VECTOR (63 downto 0);
    signal ifc2_offset : STD_LOGIC_VECTOR (63 downto 0);
    signal ifc3_offset : STD_LOGIC_VECTOR (63 downto 0);
    signal ifc4_offset : STD_LOGIC_VECTOR (63 downto 0);
    signal ifc5_offset : STD_LOGIC_VECTOR (63 downto 0);
    signal ifc6_offset : STD_LOGIC_VECTOR (63 downto 0);
    signal ifc7 : STD_LOGIC_VECTOR (63 downto 0);
    signal X : STD_LOGIC_VECTOR (31 downto 0);
    signal Y : STD_LOGIC_VECTOR (31 downto 0);
    signal Wt_X : STD_LOGIC_VECTOR (31 downto 0);
    signal Wt_Y : STD_LOGIC_VECTOR (31 downto 0);
    signal bias : STD_LOGIC_VECTOR (31 downto 0);
    signal ifc1_AWREADY : STD_LOGIC;
    signal ifc1_WREADY : STD_LOGIC;
    signal ifc1_ARREADY : STD_LOGIC;
    signal ifc1_RVALID : STD_LOGIC;
    signal ifc1_RDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal ifc1_RLAST : STD_LOGIC;
    signal ifc1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal ifc1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ifc1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ifc1_BVALID : STD_LOGIC;
    signal ifc1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ifc1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal ifc1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ifc2_AWREADY : STD_LOGIC;
    signal ifc2_WREADY : STD_LOGIC;
    signal ifc2_ARREADY : STD_LOGIC;
    signal ifc2_RVALID : STD_LOGIC;
    signal ifc2_RDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal ifc2_RLAST : STD_LOGIC;
    signal ifc2_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal ifc2_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ifc2_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ifc2_BVALID : STD_LOGIC;
    signal ifc2_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ifc2_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal ifc2_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ifc3_AWREADY : STD_LOGIC;
    signal ifc3_WREADY : STD_LOGIC;
    signal ifc3_ARREADY : STD_LOGIC;
    signal ifc3_RVALID : STD_LOGIC;
    signal ifc3_RDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal ifc3_RLAST : STD_LOGIC;
    signal ifc3_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal ifc3_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ifc3_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ifc3_BVALID : STD_LOGIC;
    signal ifc3_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ifc3_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal ifc3_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ifc4_AWREADY : STD_LOGIC;
    signal ifc4_WREADY : STD_LOGIC;
    signal ifc4_ARREADY : STD_LOGIC;
    signal ifc4_RVALID : STD_LOGIC;
    signal ifc4_RDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal ifc4_RLAST : STD_LOGIC;
    signal ifc4_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal ifc4_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ifc4_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ifc4_BVALID : STD_LOGIC;
    signal ifc4_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ifc4_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal ifc4_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ifc5_AWREADY : STD_LOGIC;
    signal ifc5_WREADY : STD_LOGIC;
    signal ifc5_ARREADY : STD_LOGIC;
    signal ifc5_RVALID : STD_LOGIC;
    signal ifc5_RDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal ifc5_RLAST : STD_LOGIC;
    signal ifc5_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal ifc5_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ifc5_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ifc5_BVALID : STD_LOGIC;
    signal ifc5_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ifc5_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal ifc5_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ifc6_AWREADY : STD_LOGIC;
    signal ifc6_WREADY : STD_LOGIC;
    signal ifc6_ARREADY : STD_LOGIC;
    signal ifc6_RVALID : STD_LOGIC;
    signal ifc6_RDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal ifc6_RLAST : STD_LOGIC;
    signal ifc6_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal ifc6_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ifc6_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ifc6_BVALID : STD_LOGIC;
    signal ifc6_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ifc6_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal ifc6_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal ifc7_c_channel_full_n : STD_LOGIC;
    signal Block_split10_proc_U0_ap_start : STD_LOGIC;
    signal Block_split10_proc_U0_ap_done : STD_LOGIC;
    signal Block_split10_proc_U0_ap_continue : STD_LOGIC;
    signal Block_split10_proc_U0_ap_idle : STD_LOGIC;
    signal Block_split10_proc_U0_ap_ready : STD_LOGIC;
    signal Block_split10_proc_U0_ap_return_0 : STD_LOGIC_VECTOR (27 downto 0);
    signal Block_split10_proc_U0_ap_return_1 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_channel_done_block_num_y_cast_loc_channel : STD_LOGIC;
    signal block_num_y_cast_loc_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_block_num_y_cast_loc_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_block_num_y_cast_loc_channel : STD_LOGIC;
    signal ap_channel_done_block_num_x_loc_channel : STD_LOGIC;
    signal block_num_x_loc_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_block_num_x_loc_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_block_num_x_loc_channel : STD_LOGIC;
    signal ReadFromMem_U0_ap_start : STD_LOGIC;
    signal ReadFromMem_U0_ap_done : STD_LOGIC;
    signal ReadFromMem_U0_ap_continue : STD_LOGIC;
    signal ReadFromMem_U0_ap_idle : STD_LOGIC;
    signal ReadFromMem_U0_ap_ready : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc1_AWVALID : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal ReadFromMem_U0_m_axi_ifc1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_m_axi_ifc1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal ReadFromMem_U0_m_axi_ifc1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal ReadFromMem_U0_m_axi_ifc1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal ReadFromMem_U0_m_axi_ifc1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal ReadFromMem_U0_m_axi_ifc1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc1_WVALID : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc1_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal ReadFromMem_U0_m_axi_ifc1_WSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal ReadFromMem_U0_m_axi_ifc1_WLAST : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc1_ARVALID : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal ReadFromMem_U0_m_axi_ifc1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_m_axi_ifc1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal ReadFromMem_U0_m_axi_ifc1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal ReadFromMem_U0_m_axi_ifc1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal ReadFromMem_U0_m_axi_ifc1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal ReadFromMem_U0_m_axi_ifc1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc1_RREADY : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc1_BREADY : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc2_AWVALID : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc2_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal ReadFromMem_U0_m_axi_ifc2_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_m_axi_ifc2_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal ReadFromMem_U0_m_axi_ifc2_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal ReadFromMem_U0_m_axi_ifc2_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal ReadFromMem_U0_m_axi_ifc2_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc2_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal ReadFromMem_U0_m_axi_ifc2_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc2_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc2_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc2_WVALID : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc2_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal ReadFromMem_U0_m_axi_ifc2_WSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal ReadFromMem_U0_m_axi_ifc2_WLAST : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc2_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc2_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc2_ARVALID : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc2_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal ReadFromMem_U0_m_axi_ifc2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_m_axi_ifc2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal ReadFromMem_U0_m_axi_ifc2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal ReadFromMem_U0_m_axi_ifc2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal ReadFromMem_U0_m_axi_ifc2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal ReadFromMem_U0_m_axi_ifc2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc2_RREADY : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc2_BREADY : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc3_AWVALID : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc3_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal ReadFromMem_U0_m_axi_ifc3_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc3_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_m_axi_ifc3_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal ReadFromMem_U0_m_axi_ifc3_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal ReadFromMem_U0_m_axi_ifc3_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal ReadFromMem_U0_m_axi_ifc3_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc3_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal ReadFromMem_U0_m_axi_ifc3_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc3_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc3_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc3_WVALID : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc3_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal ReadFromMem_U0_m_axi_ifc3_WSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal ReadFromMem_U0_m_axi_ifc3_WLAST : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc3_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc3_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc3_ARVALID : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc3_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal ReadFromMem_U0_m_axi_ifc3_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc3_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_m_axi_ifc3_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal ReadFromMem_U0_m_axi_ifc3_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal ReadFromMem_U0_m_axi_ifc3_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal ReadFromMem_U0_m_axi_ifc3_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc3_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal ReadFromMem_U0_m_axi_ifc3_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc3_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc3_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc3_RREADY : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc3_BREADY : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc4_AWVALID : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc4_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal ReadFromMem_U0_m_axi_ifc4_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc4_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_m_axi_ifc4_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal ReadFromMem_U0_m_axi_ifc4_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal ReadFromMem_U0_m_axi_ifc4_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal ReadFromMem_U0_m_axi_ifc4_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc4_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal ReadFromMem_U0_m_axi_ifc4_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc4_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc4_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc4_WVALID : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc4_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal ReadFromMem_U0_m_axi_ifc4_WSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal ReadFromMem_U0_m_axi_ifc4_WLAST : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc4_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc4_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc4_ARVALID : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc4_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal ReadFromMem_U0_m_axi_ifc4_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc4_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_m_axi_ifc4_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal ReadFromMem_U0_m_axi_ifc4_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal ReadFromMem_U0_m_axi_ifc4_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal ReadFromMem_U0_m_axi_ifc4_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc4_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal ReadFromMem_U0_m_axi_ifc4_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc4_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc4_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc4_RREADY : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc4_BREADY : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc5_AWVALID : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc5_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal ReadFromMem_U0_m_axi_ifc5_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc5_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_m_axi_ifc5_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal ReadFromMem_U0_m_axi_ifc5_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal ReadFromMem_U0_m_axi_ifc5_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal ReadFromMem_U0_m_axi_ifc5_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc5_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal ReadFromMem_U0_m_axi_ifc5_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc5_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc5_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc5_WVALID : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc5_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal ReadFromMem_U0_m_axi_ifc5_WSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal ReadFromMem_U0_m_axi_ifc5_WLAST : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc5_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc5_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc5_ARVALID : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc5_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal ReadFromMem_U0_m_axi_ifc5_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc5_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_m_axi_ifc5_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal ReadFromMem_U0_m_axi_ifc5_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal ReadFromMem_U0_m_axi_ifc5_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal ReadFromMem_U0_m_axi_ifc5_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc5_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal ReadFromMem_U0_m_axi_ifc5_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc5_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc5_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc5_RREADY : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc5_BREADY : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc6_AWVALID : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc6_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal ReadFromMem_U0_m_axi_ifc6_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc6_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_m_axi_ifc6_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal ReadFromMem_U0_m_axi_ifc6_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal ReadFromMem_U0_m_axi_ifc6_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal ReadFromMem_U0_m_axi_ifc6_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc6_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal ReadFromMem_U0_m_axi_ifc6_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc6_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc6_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc6_WVALID : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc6_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal ReadFromMem_U0_m_axi_ifc6_WSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal ReadFromMem_U0_m_axi_ifc6_WLAST : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc6_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc6_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc6_ARVALID : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc6_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal ReadFromMem_U0_m_axi_ifc6_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc6_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_m_axi_ifc6_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal ReadFromMem_U0_m_axi_ifc6_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal ReadFromMem_U0_m_axi_ifc6_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal ReadFromMem_U0_m_axi_ifc6_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc6_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal ReadFromMem_U0_m_axi_ifc6_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc6_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal ReadFromMem_U0_m_axi_ifc6_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ReadFromMem_U0_m_axi_ifc6_RREADY : STD_LOGIC;
    signal ReadFromMem_U0_m_axi_ifc6_BREADY : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer1_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer1_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer1_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer2_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer2_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer2_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer3_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer3_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer3_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer3_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer4_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer4_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer4_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer4_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer5_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer5_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer5_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer5_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer6_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer6_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer6_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer6_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer7_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer7_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer7_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer7_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer8_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer8_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer8_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer8_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer9_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer9_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer9_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer9_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer10_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer10_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer10_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer10_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer11_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer11_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer11_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer11_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer12_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer12_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer12_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer12_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer13_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer13_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer13_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer13_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer14_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer14_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer14_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer14_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer15_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer15_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer15_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer15_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer16_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer16_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer16_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer16_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer17_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer17_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer17_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer17_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer18_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer18_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer18_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer18_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer19_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer19_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer19_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer19_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer20_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer20_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer20_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer20_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer21_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer21_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer21_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer21_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer22_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer22_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer22_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer22_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer23_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer23_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer23_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer23_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer24_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer24_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer24_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer24_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer25_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer25_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer25_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer25_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer26_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer26_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer26_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer26_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer27_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer27_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer27_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer27_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer28_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer28_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer28_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer28_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer29_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer29_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer29_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer29_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer30_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer30_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer30_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer30_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer31_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer31_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer31_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer31_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer32_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer32_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer32_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer32_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer33_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer33_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer33_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer33_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer34_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer34_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer34_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer34_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer35_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer35_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer35_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer35_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer36_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer36_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer36_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer36_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer37_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer37_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer37_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer37_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer38_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer38_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer38_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer38_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer39_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer39_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer39_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer39_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer40_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer40_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer40_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer40_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer41_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer41_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer41_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer41_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer42_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer42_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer42_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer42_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer43_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer43_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer43_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer43_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer44_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer44_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer44_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer44_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer45_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer45_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer45_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer45_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer46_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer46_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer46_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer46_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer47_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer47_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer47_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer47_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer48_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer48_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer48_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer48_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer49_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer49_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer49_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer49_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer50_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer50_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer50_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer50_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer51_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer51_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer51_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer51_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer52_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer52_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer52_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer52_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer53_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer53_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer53_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer53_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer54_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer54_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer54_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer54_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer55_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer55_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer55_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer55_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer56_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer56_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer56_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer56_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer57_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer57_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer57_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer57_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer58_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer58_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer58_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer58_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer59_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer59_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer59_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer59_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer60_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer60_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer60_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer60_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer61_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer61_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer61_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer61_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer62_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer62_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer62_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer62_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer63_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer63_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer63_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer63_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer64_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer64_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer64_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer64_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer65_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer65_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer65_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer65_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer66_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer66_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer66_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer66_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer67_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer67_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer67_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer67_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer68_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer68_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer68_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer68_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer69_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer69_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer69_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer69_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weight_buffer70_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ReadFromMem_U0_weight_buffer70_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer70_we0 : STD_LOGIC;
    signal ReadFromMem_U0_weight_buffer70_d0 : STD_LOGIC_VECTOR (287 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_0_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_0_write : STD_LOGIC;
    signal ReadFromMem_U0_weights_stream_0_0_0_071_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_071_write : STD_LOGIC;
    signal ReadFromMem_U0_weights_stream_0_0_0_072_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_072_write : STD_LOGIC;
    signal ReadFromMem_U0_weights_stream_0_0_0_073_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_073_write : STD_LOGIC;
    signal ReadFromMem_U0_weights_stream_0_0_0_074_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_074_write : STD_LOGIC;
    signal ReadFromMem_U0_weights_stream_0_0_0_075_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_075_write : STD_LOGIC;
    signal ReadFromMem_U0_weights_stream_0_0_0_076_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_076_write : STD_LOGIC;
    signal ReadFromMem_U0_weights_stream_0_0_0_077_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_077_write : STD_LOGIC;
    signal ReadFromMem_U0_weights_stream_0_0_0_078_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_078_write : STD_LOGIC;
    signal ReadFromMem_U0_weights_stream_0_0_0_079_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_079_write : STD_LOGIC;
    signal ReadFromMem_U0_weights_stream_0_0_0_080_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_080_write : STD_LOGIC;
    signal ReadFromMem_U0_weights_stream_0_0_0_081_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_081_write : STD_LOGIC;
    signal ReadFromMem_U0_weights_stream_0_0_0_082_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_082_write : STD_LOGIC;
    signal ReadFromMem_U0_weights_stream_0_0_0_083_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_083_write : STD_LOGIC;
    signal ReadFromMem_U0_weights_stream_0_0_0_084_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_084_write : STD_LOGIC;
    signal ReadFromMem_U0_weights_stream_0_0_0_085_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_085_write : STD_LOGIC;
    signal ReadFromMem_U0_weights_stream_0_0_0_086_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_086_write : STD_LOGIC;
    signal ReadFromMem_U0_weights_stream_0_0_0_087_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_087_write : STD_LOGIC;
    signal ReadFromMem_U0_weights_stream_0_0_0_088_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_088_write : STD_LOGIC;
    signal ReadFromMem_U0_weights_stream_0_0_0_089_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_089_write : STD_LOGIC;
    signal ReadFromMem_U0_weights_stream_0_0_0_090_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_090_write : STD_LOGIC;
    signal ReadFromMem_U0_weights_stream_0_0_0_091_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_091_write : STD_LOGIC;
    signal ReadFromMem_U0_weights_stream_0_0_0_092_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_092_write : STD_LOGIC;
    signal ReadFromMem_U0_weights_stream_0_0_0_093_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_093_write : STD_LOGIC;
    signal ReadFromMem_U0_weights_stream_0_0_0_094_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_094_write : STD_LOGIC;
    signal ReadFromMem_U0_weights_stream_0_0_0_095_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_095_write : STD_LOGIC;
    signal ReadFromMem_U0_weights_stream_0_0_0_096_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_096_write : STD_LOGIC;
    signal ReadFromMem_U0_weights_stream_0_0_0_097_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_097_write : STD_LOGIC;
    signal ReadFromMem_U0_weights_stream_0_0_0_098_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_098_write : STD_LOGIC;
    signal ReadFromMem_U0_weights_stream_0_0_0_099_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_099_write : STD_LOGIC;
    signal ReadFromMem_U0_weights_stream_0_0_0_0100_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_0100_write : STD_LOGIC;
    signal ReadFromMem_U0_weights_stream_0_0_0_0101_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_weights_stream_0_0_0_0101_write : STD_LOGIC;
    signal ReadFromMem_U0_iact_buffer_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal ReadFromMem_U0_iact_buffer_ce0 : STD_LOGIC;
    signal ReadFromMem_U0_iact_buffer_we0 : STD_LOGIC;
    signal ReadFromMem_U0_iact_buffer_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_iact_buffer_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ReadFromMem_U0_iact_buffer_ce1 : STD_LOGIC;
    signal ReadFromMem_U0_iact_buffer_we1 : STD_LOGIC;
    signal ReadFromMem_U0_iact_buffer_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_iacts_stream64_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_iacts_stream64_write : STD_LOGIC;
    signal ReadFromMem_U0_X_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_X_c_write : STD_LOGIC;
    signal ReadFromMem_U0_Wt_Y_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadFromMem_U0_Wt_Y_c_write : STD_LOGIC;
    signal RunDataFlow_U0_ap_start : STD_LOGIC;
    signal RunDataFlow_U0_ap_done : STD_LOGIC;
    signal RunDataFlow_U0_ap_continue : STD_LOGIC;
    signal RunDataFlow_U0_ap_idle : STD_LOGIC;
    signal RunDataFlow_U0_ap_ready : STD_LOGIC;
    signal RunDataFlow_U0_iacts_stream_read : STD_LOGIC;
    signal RunDataFlow_U0_weights_stream_V_V_0_read : STD_LOGIC;
    signal RunDataFlow_U0_weights_stream_V_V_1_read : STD_LOGIC;
    signal RunDataFlow_U0_weights_stream_V_V_2_read : STD_LOGIC;
    signal RunDataFlow_U0_weights_stream_V_V_3_read : STD_LOGIC;
    signal RunDataFlow_U0_weights_stream_V_V_4_read : STD_LOGIC;
    signal RunDataFlow_U0_weights_stream_V_V_5_read : STD_LOGIC;
    signal RunDataFlow_U0_weights_stream_V_V_6_read : STD_LOGIC;
    signal RunDataFlow_U0_weights_stream_V_V_7_read : STD_LOGIC;
    signal RunDataFlow_U0_weights_stream_V_V_8_read : STD_LOGIC;
    signal RunDataFlow_U0_weights_stream_V_V_9_read : STD_LOGIC;
    signal RunDataFlow_U0_weights_stream_V_V_10_read : STD_LOGIC;
    signal RunDataFlow_U0_weights_stream_V_V_11_read : STD_LOGIC;
    signal RunDataFlow_U0_weights_stream_V_V_12_read : STD_LOGIC;
    signal RunDataFlow_U0_weights_stream_V_V_13_read : STD_LOGIC;
    signal RunDataFlow_U0_weights_stream_V_V_14_read : STD_LOGIC;
    signal RunDataFlow_U0_weights_stream_V_V_15_read : STD_LOGIC;
    signal RunDataFlow_U0_weights_stream_V_V_16_read : STD_LOGIC;
    signal RunDataFlow_U0_weights_stream_V_V_17_read : STD_LOGIC;
    signal RunDataFlow_U0_weights_stream_V_V_18_read : STD_LOGIC;
    signal RunDataFlow_U0_weights_stream_V_V_19_read : STD_LOGIC;
    signal RunDataFlow_U0_weights_stream_V_V_20_read : STD_LOGIC;
    signal RunDataFlow_U0_weights_stream_V_V_21_read : STD_LOGIC;
    signal RunDataFlow_U0_weights_stream_V_V_22_read : STD_LOGIC;
    signal RunDataFlow_U0_weights_stream_V_V_23_read : STD_LOGIC;
    signal RunDataFlow_U0_weights_stream_V_V_24_read : STD_LOGIC;
    signal RunDataFlow_U0_weights_stream_V_V_25_read : STD_LOGIC;
    signal RunDataFlow_U0_weights_stream_V_V_26_read : STD_LOGIC;
    signal RunDataFlow_U0_weights_stream_V_V_27_read : STD_LOGIC;
    signal RunDataFlow_U0_weights_stream_V_V_28_read : STD_LOGIC;
    signal RunDataFlow_U0_weights_stream_V_V_29_read : STD_LOGIC;
    signal RunDataFlow_U0_weights_stream_V_V_30_read : STD_LOGIC;
    signal RunDataFlow_U0_weights_stream_V_V_31_read : STD_LOGIC;
    signal RunDataFlow_U0_output_buf_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal RunDataFlow_U0_output_buf_V_ce0 : STD_LOGIC;
    signal RunDataFlow_U0_output_buf_V_we0 : STD_LOGIC;
    signal RunDataFlow_U0_output_buf_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal OutputBuffer_U0_ap_start : STD_LOGIC;
    signal OutputBuffer_U0_ap_done : STD_LOGIC;
    signal OutputBuffer_U0_ap_continue : STD_LOGIC;
    signal OutputBuffer_U0_ap_idle : STD_LOGIC;
    signal OutputBuffer_U0_ap_ready : STD_LOGIC;
    signal OutputBuffer_U0_m_axi_ifc1_AWVALID : STD_LOGIC;
    signal OutputBuffer_U0_m_axi_ifc1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal OutputBuffer_U0_m_axi_ifc1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal OutputBuffer_U0_m_axi_ifc1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal OutputBuffer_U0_m_axi_ifc1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal OutputBuffer_U0_m_axi_ifc1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal OutputBuffer_U0_m_axi_ifc1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal OutputBuffer_U0_m_axi_ifc1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal OutputBuffer_U0_m_axi_ifc1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal OutputBuffer_U0_m_axi_ifc1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal OutputBuffer_U0_m_axi_ifc1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal OutputBuffer_U0_m_axi_ifc1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OutputBuffer_U0_m_axi_ifc1_WVALID : STD_LOGIC;
    signal OutputBuffer_U0_m_axi_ifc1_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal OutputBuffer_U0_m_axi_ifc1_WSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal OutputBuffer_U0_m_axi_ifc1_WLAST : STD_LOGIC;
    signal OutputBuffer_U0_m_axi_ifc1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal OutputBuffer_U0_m_axi_ifc1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OutputBuffer_U0_m_axi_ifc1_ARVALID : STD_LOGIC;
    signal OutputBuffer_U0_m_axi_ifc1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal OutputBuffer_U0_m_axi_ifc1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal OutputBuffer_U0_m_axi_ifc1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal OutputBuffer_U0_m_axi_ifc1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal OutputBuffer_U0_m_axi_ifc1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal OutputBuffer_U0_m_axi_ifc1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal OutputBuffer_U0_m_axi_ifc1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal OutputBuffer_U0_m_axi_ifc1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal OutputBuffer_U0_m_axi_ifc1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal OutputBuffer_U0_m_axi_ifc1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal OutputBuffer_U0_m_axi_ifc1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal OutputBuffer_U0_m_axi_ifc1_RREADY : STD_LOGIC;
    signal OutputBuffer_U0_m_axi_ifc1_BREADY : STD_LOGIC;
    signal OutputBuffer_U0_X_read : STD_LOGIC;
    signal OutputBuffer_U0_Wt_Y_read : STD_LOGIC;
    signal OutputBuffer_U0_output_buf_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal OutputBuffer_U0_output_buf_ce0 : STD_LOGIC;
    signal OutputBuffer_U0_output_buf_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal OutputBuffer_U0_output_buf_ce1 : STD_LOGIC;
    signal output_buf_V_i_full_n : STD_LOGIC;
    signal output_buf_V_t_empty_n : STD_LOGIC;
    signal ifc7_c_channel_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal ifc7_c_channel_empty_n : STD_LOGIC;
    signal block_num_x_loc_channel_dout : STD_LOGIC_VECTOR (27 downto 0);
    signal block_num_x_loc_channel_empty_n : STD_LOGIC;
    signal block_num_y_cast_loc_channel_dout : STD_LOGIC_VECTOR (27 downto 0);
    signal block_num_y_cast_loc_channel_empty_n : STD_LOGIC;
    signal weights_stream_V_V_0_full_n : STD_LOGIC;
    signal weights_stream_V_V_0_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_V_V_0_empty_n : STD_LOGIC;
    signal weights_stream_V_V_1_full_n : STD_LOGIC;
    signal weights_stream_V_V_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_V_V_1_empty_n : STD_LOGIC;
    signal weights_stream_V_V_2_full_n : STD_LOGIC;
    signal weights_stream_V_V_2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_V_V_2_empty_n : STD_LOGIC;
    signal weights_stream_V_V_3_full_n : STD_LOGIC;
    signal weights_stream_V_V_3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_V_V_3_empty_n : STD_LOGIC;
    signal weights_stream_V_V_4_full_n : STD_LOGIC;
    signal weights_stream_V_V_4_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_V_V_4_empty_n : STD_LOGIC;
    signal weights_stream_V_V_5_full_n : STD_LOGIC;
    signal weights_stream_V_V_5_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_V_V_5_empty_n : STD_LOGIC;
    signal weights_stream_V_V_6_full_n : STD_LOGIC;
    signal weights_stream_V_V_6_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_V_V_6_empty_n : STD_LOGIC;
    signal weights_stream_V_V_7_full_n : STD_LOGIC;
    signal weights_stream_V_V_7_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_V_V_7_empty_n : STD_LOGIC;
    signal weights_stream_V_V_8_full_n : STD_LOGIC;
    signal weights_stream_V_V_8_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_V_V_8_empty_n : STD_LOGIC;
    signal weights_stream_V_V_9_full_n : STD_LOGIC;
    signal weights_stream_V_V_9_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_V_V_9_empty_n : STD_LOGIC;
    signal weights_stream_V_V_10_full_n : STD_LOGIC;
    signal weights_stream_V_V_10_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_V_V_10_empty_n : STD_LOGIC;
    signal weights_stream_V_V_11_full_n : STD_LOGIC;
    signal weights_stream_V_V_11_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_V_V_11_empty_n : STD_LOGIC;
    signal weights_stream_V_V_12_full_n : STD_LOGIC;
    signal weights_stream_V_V_12_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_V_V_12_empty_n : STD_LOGIC;
    signal weights_stream_V_V_13_full_n : STD_LOGIC;
    signal weights_stream_V_V_13_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_V_V_13_empty_n : STD_LOGIC;
    signal weights_stream_V_V_14_full_n : STD_LOGIC;
    signal weights_stream_V_V_14_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_V_V_14_empty_n : STD_LOGIC;
    signal weights_stream_V_V_15_full_n : STD_LOGIC;
    signal weights_stream_V_V_15_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_V_V_15_empty_n : STD_LOGIC;
    signal weights_stream_V_V_16_full_n : STD_LOGIC;
    signal weights_stream_V_V_16_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_V_V_16_empty_n : STD_LOGIC;
    signal weights_stream_V_V_17_full_n : STD_LOGIC;
    signal weights_stream_V_V_17_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_V_V_17_empty_n : STD_LOGIC;
    signal weights_stream_V_V_18_full_n : STD_LOGIC;
    signal weights_stream_V_V_18_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_V_V_18_empty_n : STD_LOGIC;
    signal weights_stream_V_V_19_full_n : STD_LOGIC;
    signal weights_stream_V_V_19_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_V_V_19_empty_n : STD_LOGIC;
    signal weights_stream_V_V_20_full_n : STD_LOGIC;
    signal weights_stream_V_V_20_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_V_V_20_empty_n : STD_LOGIC;
    signal weights_stream_V_V_21_full_n : STD_LOGIC;
    signal weights_stream_V_V_21_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_V_V_21_empty_n : STD_LOGIC;
    signal weights_stream_V_V_22_full_n : STD_LOGIC;
    signal weights_stream_V_V_22_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_V_V_22_empty_n : STD_LOGIC;
    signal weights_stream_V_V_23_full_n : STD_LOGIC;
    signal weights_stream_V_V_23_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_V_V_23_empty_n : STD_LOGIC;
    signal weights_stream_V_V_24_full_n : STD_LOGIC;
    signal weights_stream_V_V_24_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_V_V_24_empty_n : STD_LOGIC;
    signal weights_stream_V_V_25_full_n : STD_LOGIC;
    signal weights_stream_V_V_25_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_V_V_25_empty_n : STD_LOGIC;
    signal weights_stream_V_V_26_full_n : STD_LOGIC;
    signal weights_stream_V_V_26_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_V_V_26_empty_n : STD_LOGIC;
    signal weights_stream_V_V_27_full_n : STD_LOGIC;
    signal weights_stream_V_V_27_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_V_V_27_empty_n : STD_LOGIC;
    signal weights_stream_V_V_28_full_n : STD_LOGIC;
    signal weights_stream_V_V_28_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_V_V_28_empty_n : STD_LOGIC;
    signal weights_stream_V_V_29_full_n : STD_LOGIC;
    signal weights_stream_V_V_29_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_V_V_29_empty_n : STD_LOGIC;
    signal weights_stream_V_V_30_full_n : STD_LOGIC;
    signal weights_stream_V_V_30_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_V_V_30_empty_n : STD_LOGIC;
    signal weights_stream_V_V_31_full_n : STD_LOGIC;
    signal weights_stream_V_V_31_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_stream_V_V_31_empty_n : STD_LOGIC;
    signal iacts_stream_full_n : STD_LOGIC;
    signal iacts_stream_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal iacts_stream_empty_n : STD_LOGIC;
    signal X_c_full_n : STD_LOGIC;
    signal X_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal X_c_empty_n : STD_LOGIC;
    signal Wt_Y_c_full_n : STD_LOGIC;
    signal Wt_Y_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal Wt_Y_c_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_Block_split10_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_split10_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_ReadFromMem_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_ReadFromMem_U0_ap_ready : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component LINEAR_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ifc7 : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component LINEAR_Block_split10_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Wt_X : IN STD_LOGIC_VECTOR (31 downto 0);
        Wt_Y : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (27 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component LINEAR_ReadFromMem IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_ifc1_AWVALID : OUT STD_LOGIC;
        m_axi_ifc1_AWREADY : IN STD_LOGIC;
        m_axi_ifc1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_ifc1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ifc1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ifc1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ifc1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc1_WVALID : OUT STD_LOGIC;
        m_axi_ifc1_WREADY : IN STD_LOGIC;
        m_axi_ifc1_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        m_axi_ifc1_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_ifc1_WLAST : OUT STD_LOGIC;
        m_axi_ifc1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc1_ARVALID : OUT STD_LOGIC;
        m_axi_ifc1_ARREADY : IN STD_LOGIC;
        m_axi_ifc1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_ifc1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ifc1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ifc1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ifc1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc1_RVALID : IN STD_LOGIC;
        m_axi_ifc1_RREADY : OUT STD_LOGIC;
        m_axi_ifc1_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        m_axi_ifc1_RLAST : IN STD_LOGIC;
        m_axi_ifc1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc1_BVALID : IN STD_LOGIC;
        m_axi_ifc1_BREADY : OUT STD_LOGIC;
        m_axi_ifc1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        ifc11 : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_ifc2_AWVALID : OUT STD_LOGIC;
        m_axi_ifc2_AWREADY : IN STD_LOGIC;
        m_axi_ifc2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_ifc2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ifc2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ifc2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ifc2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc2_WVALID : OUT STD_LOGIC;
        m_axi_ifc2_WREADY : IN STD_LOGIC;
        m_axi_ifc2_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        m_axi_ifc2_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_ifc2_WLAST : OUT STD_LOGIC;
        m_axi_ifc2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc2_ARVALID : OUT STD_LOGIC;
        m_axi_ifc2_ARREADY : IN STD_LOGIC;
        m_axi_ifc2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_ifc2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ifc2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ifc2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ifc2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc2_RVALID : IN STD_LOGIC;
        m_axi_ifc2_RREADY : OUT STD_LOGIC;
        m_axi_ifc2_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        m_axi_ifc2_RLAST : IN STD_LOGIC;
        m_axi_ifc2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc2_BVALID : IN STD_LOGIC;
        m_axi_ifc2_BREADY : OUT STD_LOGIC;
        m_axi_ifc2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        ifc22 : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_ifc3_AWVALID : OUT STD_LOGIC;
        m_axi_ifc3_AWREADY : IN STD_LOGIC;
        m_axi_ifc3_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_ifc3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ifc3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ifc3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ifc3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc3_WVALID : OUT STD_LOGIC;
        m_axi_ifc3_WREADY : IN STD_LOGIC;
        m_axi_ifc3_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        m_axi_ifc3_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_ifc3_WLAST : OUT STD_LOGIC;
        m_axi_ifc3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc3_ARVALID : OUT STD_LOGIC;
        m_axi_ifc3_ARREADY : IN STD_LOGIC;
        m_axi_ifc3_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_ifc3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ifc3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ifc3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ifc3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc3_RVALID : IN STD_LOGIC;
        m_axi_ifc3_RREADY : OUT STD_LOGIC;
        m_axi_ifc3_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        m_axi_ifc3_RLAST : IN STD_LOGIC;
        m_axi_ifc3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc3_BVALID : IN STD_LOGIC;
        m_axi_ifc3_BREADY : OUT STD_LOGIC;
        m_axi_ifc3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        ifc33 : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_ifc4_AWVALID : OUT STD_LOGIC;
        m_axi_ifc4_AWREADY : IN STD_LOGIC;
        m_axi_ifc4_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_ifc4_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc4_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ifc4_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ifc4_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc4_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc4_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc4_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ifc4_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc4_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc4_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc4_WVALID : OUT STD_LOGIC;
        m_axi_ifc4_WREADY : IN STD_LOGIC;
        m_axi_ifc4_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        m_axi_ifc4_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_ifc4_WLAST : OUT STD_LOGIC;
        m_axi_ifc4_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc4_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc4_ARVALID : OUT STD_LOGIC;
        m_axi_ifc4_ARREADY : IN STD_LOGIC;
        m_axi_ifc4_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_ifc4_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc4_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ifc4_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ifc4_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc4_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc4_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc4_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ifc4_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc4_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc4_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc4_RVALID : IN STD_LOGIC;
        m_axi_ifc4_RREADY : OUT STD_LOGIC;
        m_axi_ifc4_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        m_axi_ifc4_RLAST : IN STD_LOGIC;
        m_axi_ifc4_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc4_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc4_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc4_BVALID : IN STD_LOGIC;
        m_axi_ifc4_BREADY : OUT STD_LOGIC;
        m_axi_ifc4_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc4_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc4_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        ifc44 : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_ifc5_AWVALID : OUT STD_LOGIC;
        m_axi_ifc5_AWREADY : IN STD_LOGIC;
        m_axi_ifc5_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_ifc5_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc5_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ifc5_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ifc5_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc5_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc5_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc5_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ifc5_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc5_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc5_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc5_WVALID : OUT STD_LOGIC;
        m_axi_ifc5_WREADY : IN STD_LOGIC;
        m_axi_ifc5_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        m_axi_ifc5_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_ifc5_WLAST : OUT STD_LOGIC;
        m_axi_ifc5_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc5_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc5_ARVALID : OUT STD_LOGIC;
        m_axi_ifc5_ARREADY : IN STD_LOGIC;
        m_axi_ifc5_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_ifc5_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc5_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ifc5_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ifc5_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc5_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc5_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc5_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ifc5_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc5_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc5_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc5_RVALID : IN STD_LOGIC;
        m_axi_ifc5_RREADY : OUT STD_LOGIC;
        m_axi_ifc5_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        m_axi_ifc5_RLAST : IN STD_LOGIC;
        m_axi_ifc5_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc5_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc5_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc5_BVALID : IN STD_LOGIC;
        m_axi_ifc5_BREADY : OUT STD_LOGIC;
        m_axi_ifc5_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc5_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc5_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        ifc55 : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_ifc6_AWVALID : OUT STD_LOGIC;
        m_axi_ifc6_AWREADY : IN STD_LOGIC;
        m_axi_ifc6_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_ifc6_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc6_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ifc6_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ifc6_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc6_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc6_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc6_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ifc6_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc6_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc6_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc6_WVALID : OUT STD_LOGIC;
        m_axi_ifc6_WREADY : IN STD_LOGIC;
        m_axi_ifc6_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        m_axi_ifc6_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_ifc6_WLAST : OUT STD_LOGIC;
        m_axi_ifc6_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc6_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc6_ARVALID : OUT STD_LOGIC;
        m_axi_ifc6_ARREADY : IN STD_LOGIC;
        m_axi_ifc6_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_ifc6_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc6_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ifc6_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ifc6_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc6_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc6_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc6_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ifc6_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc6_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc6_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc6_RVALID : IN STD_LOGIC;
        m_axi_ifc6_RREADY : OUT STD_LOGIC;
        m_axi_ifc6_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        m_axi_ifc6_RLAST : IN STD_LOGIC;
        m_axi_ifc6_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc6_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc6_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc6_BVALID : IN STD_LOGIC;
        m_axi_ifc6_BREADY : OUT STD_LOGIC;
        m_axi_ifc6_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc6_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc6_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        ifc66 : IN STD_LOGIC_VECTOR (63 downto 0);
        weight_buffer_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer_ce0 : OUT STD_LOGIC;
        weight_buffer_we0 : OUT STD_LOGIC;
        weight_buffer_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer1_ce0 : OUT STD_LOGIC;
        weight_buffer1_we0 : OUT STD_LOGIC;
        weight_buffer1_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer1_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer2_ce0 : OUT STD_LOGIC;
        weight_buffer2_we0 : OUT STD_LOGIC;
        weight_buffer2_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer2_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer3_ce0 : OUT STD_LOGIC;
        weight_buffer3_we0 : OUT STD_LOGIC;
        weight_buffer3_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer3_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer4_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer4_ce0 : OUT STD_LOGIC;
        weight_buffer4_we0 : OUT STD_LOGIC;
        weight_buffer4_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer4_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer5_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer5_ce0 : OUT STD_LOGIC;
        weight_buffer5_we0 : OUT STD_LOGIC;
        weight_buffer5_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer5_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer6_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer6_ce0 : OUT STD_LOGIC;
        weight_buffer6_we0 : OUT STD_LOGIC;
        weight_buffer6_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer6_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer7_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer7_ce0 : OUT STD_LOGIC;
        weight_buffer7_we0 : OUT STD_LOGIC;
        weight_buffer7_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer7_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer8_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer8_ce0 : OUT STD_LOGIC;
        weight_buffer8_we0 : OUT STD_LOGIC;
        weight_buffer8_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer8_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer9_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer9_ce0 : OUT STD_LOGIC;
        weight_buffer9_we0 : OUT STD_LOGIC;
        weight_buffer9_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer9_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer10_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer10_ce0 : OUT STD_LOGIC;
        weight_buffer10_we0 : OUT STD_LOGIC;
        weight_buffer10_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer10_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer11_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer11_ce0 : OUT STD_LOGIC;
        weight_buffer11_we0 : OUT STD_LOGIC;
        weight_buffer11_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer11_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer12_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer12_ce0 : OUT STD_LOGIC;
        weight_buffer12_we0 : OUT STD_LOGIC;
        weight_buffer12_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer12_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer13_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer13_ce0 : OUT STD_LOGIC;
        weight_buffer13_we0 : OUT STD_LOGIC;
        weight_buffer13_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer13_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer14_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer14_ce0 : OUT STD_LOGIC;
        weight_buffer14_we0 : OUT STD_LOGIC;
        weight_buffer14_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer14_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer15_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer15_ce0 : OUT STD_LOGIC;
        weight_buffer15_we0 : OUT STD_LOGIC;
        weight_buffer15_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer15_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer16_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer16_ce0 : OUT STD_LOGIC;
        weight_buffer16_we0 : OUT STD_LOGIC;
        weight_buffer16_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer16_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer17_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer17_ce0 : OUT STD_LOGIC;
        weight_buffer17_we0 : OUT STD_LOGIC;
        weight_buffer17_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer17_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer18_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer18_ce0 : OUT STD_LOGIC;
        weight_buffer18_we0 : OUT STD_LOGIC;
        weight_buffer18_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer18_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer19_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer19_ce0 : OUT STD_LOGIC;
        weight_buffer19_we0 : OUT STD_LOGIC;
        weight_buffer19_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer19_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer20_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer20_ce0 : OUT STD_LOGIC;
        weight_buffer20_we0 : OUT STD_LOGIC;
        weight_buffer20_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer20_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer21_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer21_ce0 : OUT STD_LOGIC;
        weight_buffer21_we0 : OUT STD_LOGIC;
        weight_buffer21_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer21_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer22_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer22_ce0 : OUT STD_LOGIC;
        weight_buffer22_we0 : OUT STD_LOGIC;
        weight_buffer22_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer22_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer23_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer23_ce0 : OUT STD_LOGIC;
        weight_buffer23_we0 : OUT STD_LOGIC;
        weight_buffer23_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer23_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer24_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer24_ce0 : OUT STD_LOGIC;
        weight_buffer24_we0 : OUT STD_LOGIC;
        weight_buffer24_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer24_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer25_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer25_ce0 : OUT STD_LOGIC;
        weight_buffer25_we0 : OUT STD_LOGIC;
        weight_buffer25_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer25_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer26_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer26_ce0 : OUT STD_LOGIC;
        weight_buffer26_we0 : OUT STD_LOGIC;
        weight_buffer26_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer26_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer27_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer27_ce0 : OUT STD_LOGIC;
        weight_buffer27_we0 : OUT STD_LOGIC;
        weight_buffer27_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer27_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer28_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer28_ce0 : OUT STD_LOGIC;
        weight_buffer28_we0 : OUT STD_LOGIC;
        weight_buffer28_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer28_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer29_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer29_ce0 : OUT STD_LOGIC;
        weight_buffer29_we0 : OUT STD_LOGIC;
        weight_buffer29_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer29_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer30_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer30_ce0 : OUT STD_LOGIC;
        weight_buffer30_we0 : OUT STD_LOGIC;
        weight_buffer30_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer30_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer31_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer31_ce0 : OUT STD_LOGIC;
        weight_buffer31_we0 : OUT STD_LOGIC;
        weight_buffer31_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer31_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer32_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer32_ce0 : OUT STD_LOGIC;
        weight_buffer32_we0 : OUT STD_LOGIC;
        weight_buffer32_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer32_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer33_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer33_ce0 : OUT STD_LOGIC;
        weight_buffer33_we0 : OUT STD_LOGIC;
        weight_buffer33_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer33_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer34_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer34_ce0 : OUT STD_LOGIC;
        weight_buffer34_we0 : OUT STD_LOGIC;
        weight_buffer34_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer34_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer35_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer35_ce0 : OUT STD_LOGIC;
        weight_buffer35_we0 : OUT STD_LOGIC;
        weight_buffer35_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer35_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer36_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer36_ce0 : OUT STD_LOGIC;
        weight_buffer36_we0 : OUT STD_LOGIC;
        weight_buffer36_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer36_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer37_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer37_ce0 : OUT STD_LOGIC;
        weight_buffer37_we0 : OUT STD_LOGIC;
        weight_buffer37_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer37_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer38_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer38_ce0 : OUT STD_LOGIC;
        weight_buffer38_we0 : OUT STD_LOGIC;
        weight_buffer38_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer38_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer39_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer39_ce0 : OUT STD_LOGIC;
        weight_buffer39_we0 : OUT STD_LOGIC;
        weight_buffer39_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer39_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer40_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer40_ce0 : OUT STD_LOGIC;
        weight_buffer40_we0 : OUT STD_LOGIC;
        weight_buffer40_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer40_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer41_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer41_ce0 : OUT STD_LOGIC;
        weight_buffer41_we0 : OUT STD_LOGIC;
        weight_buffer41_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer41_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer42_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer42_ce0 : OUT STD_LOGIC;
        weight_buffer42_we0 : OUT STD_LOGIC;
        weight_buffer42_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer42_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer43_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer43_ce0 : OUT STD_LOGIC;
        weight_buffer43_we0 : OUT STD_LOGIC;
        weight_buffer43_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer43_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer44_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer44_ce0 : OUT STD_LOGIC;
        weight_buffer44_we0 : OUT STD_LOGIC;
        weight_buffer44_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer44_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer45_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer45_ce0 : OUT STD_LOGIC;
        weight_buffer45_we0 : OUT STD_LOGIC;
        weight_buffer45_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer45_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer46_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer46_ce0 : OUT STD_LOGIC;
        weight_buffer46_we0 : OUT STD_LOGIC;
        weight_buffer46_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer46_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer47_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer47_ce0 : OUT STD_LOGIC;
        weight_buffer47_we0 : OUT STD_LOGIC;
        weight_buffer47_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer47_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer48_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer48_ce0 : OUT STD_LOGIC;
        weight_buffer48_we0 : OUT STD_LOGIC;
        weight_buffer48_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer48_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer49_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer49_ce0 : OUT STD_LOGIC;
        weight_buffer49_we0 : OUT STD_LOGIC;
        weight_buffer49_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer49_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer50_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer50_ce0 : OUT STD_LOGIC;
        weight_buffer50_we0 : OUT STD_LOGIC;
        weight_buffer50_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer50_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer51_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer51_ce0 : OUT STD_LOGIC;
        weight_buffer51_we0 : OUT STD_LOGIC;
        weight_buffer51_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer51_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer52_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer52_ce0 : OUT STD_LOGIC;
        weight_buffer52_we0 : OUT STD_LOGIC;
        weight_buffer52_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer52_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer53_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer53_ce0 : OUT STD_LOGIC;
        weight_buffer53_we0 : OUT STD_LOGIC;
        weight_buffer53_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer53_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer54_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer54_ce0 : OUT STD_LOGIC;
        weight_buffer54_we0 : OUT STD_LOGIC;
        weight_buffer54_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer54_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer55_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer55_ce0 : OUT STD_LOGIC;
        weight_buffer55_we0 : OUT STD_LOGIC;
        weight_buffer55_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer55_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer56_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer56_ce0 : OUT STD_LOGIC;
        weight_buffer56_we0 : OUT STD_LOGIC;
        weight_buffer56_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer56_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer57_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer57_ce0 : OUT STD_LOGIC;
        weight_buffer57_we0 : OUT STD_LOGIC;
        weight_buffer57_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer57_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer58_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer58_ce0 : OUT STD_LOGIC;
        weight_buffer58_we0 : OUT STD_LOGIC;
        weight_buffer58_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer58_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer59_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer59_ce0 : OUT STD_LOGIC;
        weight_buffer59_we0 : OUT STD_LOGIC;
        weight_buffer59_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer59_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer60_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer60_ce0 : OUT STD_LOGIC;
        weight_buffer60_we0 : OUT STD_LOGIC;
        weight_buffer60_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer60_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer61_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer61_ce0 : OUT STD_LOGIC;
        weight_buffer61_we0 : OUT STD_LOGIC;
        weight_buffer61_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer61_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer62_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer62_ce0 : OUT STD_LOGIC;
        weight_buffer62_we0 : OUT STD_LOGIC;
        weight_buffer62_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer62_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer63_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer63_ce0 : OUT STD_LOGIC;
        weight_buffer63_we0 : OUT STD_LOGIC;
        weight_buffer63_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer63_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer64_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer64_ce0 : OUT STD_LOGIC;
        weight_buffer64_we0 : OUT STD_LOGIC;
        weight_buffer64_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer64_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer65_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer65_ce0 : OUT STD_LOGIC;
        weight_buffer65_we0 : OUT STD_LOGIC;
        weight_buffer65_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer65_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer66_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer66_ce0 : OUT STD_LOGIC;
        weight_buffer66_we0 : OUT STD_LOGIC;
        weight_buffer66_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer66_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer67_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer67_ce0 : OUT STD_LOGIC;
        weight_buffer67_we0 : OUT STD_LOGIC;
        weight_buffer67_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer67_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer68_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer68_ce0 : OUT STD_LOGIC;
        weight_buffer68_we0 : OUT STD_LOGIC;
        weight_buffer68_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer68_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer69_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer69_ce0 : OUT STD_LOGIC;
        weight_buffer69_we0 : OUT STD_LOGIC;
        weight_buffer69_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer69_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer70_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weight_buffer70_ce0 : OUT STD_LOGIC;
        weight_buffer70_we0 : OUT STD_LOGIC;
        weight_buffer70_d0 : OUT STD_LOGIC_VECTOR (287 downto 0);
        weight_buffer70_q0 : IN STD_LOGIC_VECTOR (287 downto 0);
        weights_stream_0_0_0_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_0_0_0_0_full_n : IN STD_LOGIC;
        weights_stream_0_0_0_0_write : OUT STD_LOGIC;
        weights_stream_0_0_0_071_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_0_0_0_071_full_n : IN STD_LOGIC;
        weights_stream_0_0_0_071_write : OUT STD_LOGIC;
        weights_stream_0_0_0_072_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_0_0_0_072_full_n : IN STD_LOGIC;
        weights_stream_0_0_0_072_write : OUT STD_LOGIC;
        weights_stream_0_0_0_073_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_0_0_0_073_full_n : IN STD_LOGIC;
        weights_stream_0_0_0_073_write : OUT STD_LOGIC;
        weights_stream_0_0_0_074_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_0_0_0_074_full_n : IN STD_LOGIC;
        weights_stream_0_0_0_074_write : OUT STD_LOGIC;
        weights_stream_0_0_0_075_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_0_0_0_075_full_n : IN STD_LOGIC;
        weights_stream_0_0_0_075_write : OUT STD_LOGIC;
        weights_stream_0_0_0_076_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_0_0_0_076_full_n : IN STD_LOGIC;
        weights_stream_0_0_0_076_write : OUT STD_LOGIC;
        weights_stream_0_0_0_077_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_0_0_0_077_full_n : IN STD_LOGIC;
        weights_stream_0_0_0_077_write : OUT STD_LOGIC;
        weights_stream_0_0_0_078_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_0_0_0_078_full_n : IN STD_LOGIC;
        weights_stream_0_0_0_078_write : OUT STD_LOGIC;
        weights_stream_0_0_0_079_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_0_0_0_079_full_n : IN STD_LOGIC;
        weights_stream_0_0_0_079_write : OUT STD_LOGIC;
        weights_stream_0_0_0_080_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_0_0_0_080_full_n : IN STD_LOGIC;
        weights_stream_0_0_0_080_write : OUT STD_LOGIC;
        weights_stream_0_0_0_081_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_0_0_0_081_full_n : IN STD_LOGIC;
        weights_stream_0_0_0_081_write : OUT STD_LOGIC;
        weights_stream_0_0_0_082_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_0_0_0_082_full_n : IN STD_LOGIC;
        weights_stream_0_0_0_082_write : OUT STD_LOGIC;
        weights_stream_0_0_0_083_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_0_0_0_083_full_n : IN STD_LOGIC;
        weights_stream_0_0_0_083_write : OUT STD_LOGIC;
        weights_stream_0_0_0_084_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_0_0_0_084_full_n : IN STD_LOGIC;
        weights_stream_0_0_0_084_write : OUT STD_LOGIC;
        weights_stream_0_0_0_085_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_0_0_0_085_full_n : IN STD_LOGIC;
        weights_stream_0_0_0_085_write : OUT STD_LOGIC;
        weights_stream_0_0_0_086_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_0_0_0_086_full_n : IN STD_LOGIC;
        weights_stream_0_0_0_086_write : OUT STD_LOGIC;
        weights_stream_0_0_0_087_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_0_0_0_087_full_n : IN STD_LOGIC;
        weights_stream_0_0_0_087_write : OUT STD_LOGIC;
        weights_stream_0_0_0_088_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_0_0_0_088_full_n : IN STD_LOGIC;
        weights_stream_0_0_0_088_write : OUT STD_LOGIC;
        weights_stream_0_0_0_089_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_0_0_0_089_full_n : IN STD_LOGIC;
        weights_stream_0_0_0_089_write : OUT STD_LOGIC;
        weights_stream_0_0_0_090_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_0_0_0_090_full_n : IN STD_LOGIC;
        weights_stream_0_0_0_090_write : OUT STD_LOGIC;
        weights_stream_0_0_0_091_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_0_0_0_091_full_n : IN STD_LOGIC;
        weights_stream_0_0_0_091_write : OUT STD_LOGIC;
        weights_stream_0_0_0_092_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_0_0_0_092_full_n : IN STD_LOGIC;
        weights_stream_0_0_0_092_write : OUT STD_LOGIC;
        weights_stream_0_0_0_093_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_0_0_0_093_full_n : IN STD_LOGIC;
        weights_stream_0_0_0_093_write : OUT STD_LOGIC;
        weights_stream_0_0_0_094_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_0_0_0_094_full_n : IN STD_LOGIC;
        weights_stream_0_0_0_094_write : OUT STD_LOGIC;
        weights_stream_0_0_0_095_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_0_0_0_095_full_n : IN STD_LOGIC;
        weights_stream_0_0_0_095_write : OUT STD_LOGIC;
        weights_stream_0_0_0_096_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_0_0_0_096_full_n : IN STD_LOGIC;
        weights_stream_0_0_0_096_write : OUT STD_LOGIC;
        weights_stream_0_0_0_097_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_0_0_0_097_full_n : IN STD_LOGIC;
        weights_stream_0_0_0_097_write : OUT STD_LOGIC;
        weights_stream_0_0_0_098_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_0_0_0_098_full_n : IN STD_LOGIC;
        weights_stream_0_0_0_098_write : OUT STD_LOGIC;
        weights_stream_0_0_0_099_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_0_0_0_099_full_n : IN STD_LOGIC;
        weights_stream_0_0_0_099_write : OUT STD_LOGIC;
        weights_stream_0_0_0_0100_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_0_0_0_0100_full_n : IN STD_LOGIC;
        weights_stream_0_0_0_0100_write : OUT STD_LOGIC;
        weights_stream_0_0_0_0101_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_0_0_0_0101_full_n : IN STD_LOGIC;
        weights_stream_0_0_0_0101_write : OUT STD_LOGIC;
        iact_buffer_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        iact_buffer_ce0 : OUT STD_LOGIC;
        iact_buffer_we0 : OUT STD_LOGIC;
        iact_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        iact_buffer_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        iact_buffer_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        iact_buffer_ce1 : OUT STD_LOGIC;
        iact_buffer_we1 : OUT STD_LOGIC;
        iact_buffer_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        iacts_stream64_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        iacts_stream64_full_n : IN STD_LOGIC;
        iacts_stream64_write : OUT STD_LOGIC;
        X : IN STD_LOGIC_VECTOR (31 downto 0);
        Y : IN STD_LOGIC_VECTOR (31 downto 0);
        Wt_X : IN STD_LOGIC_VECTOR (31 downto 0);
        Wt_Y : IN STD_LOGIC_VECTOR (31 downto 0);
        X_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_c_full_n : IN STD_LOGIC;
        X_c_write : OUT STD_LOGIC;
        Wt_Y_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        Wt_Y_c_full_n : IN STD_LOGIC;
        Wt_Y_c_write : OUT STD_LOGIC );
    end component;


    component LINEAR_RunDataFlow IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (27 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (27 downto 0);
        iacts_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        iacts_stream_empty_n : IN STD_LOGIC;
        iacts_stream_read : OUT STD_LOGIC;
        weights_stream_V_V_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_V_V_0_empty_n : IN STD_LOGIC;
        weights_stream_V_V_0_read : OUT STD_LOGIC;
        weights_stream_V_V_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_V_V_1_empty_n : IN STD_LOGIC;
        weights_stream_V_V_1_read : OUT STD_LOGIC;
        weights_stream_V_V_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_V_V_2_empty_n : IN STD_LOGIC;
        weights_stream_V_V_2_read : OUT STD_LOGIC;
        weights_stream_V_V_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_V_V_3_empty_n : IN STD_LOGIC;
        weights_stream_V_V_3_read : OUT STD_LOGIC;
        weights_stream_V_V_4_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_V_V_4_empty_n : IN STD_LOGIC;
        weights_stream_V_V_4_read : OUT STD_LOGIC;
        weights_stream_V_V_5_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_V_V_5_empty_n : IN STD_LOGIC;
        weights_stream_V_V_5_read : OUT STD_LOGIC;
        weights_stream_V_V_6_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_V_V_6_empty_n : IN STD_LOGIC;
        weights_stream_V_V_6_read : OUT STD_LOGIC;
        weights_stream_V_V_7_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_V_V_7_empty_n : IN STD_LOGIC;
        weights_stream_V_V_7_read : OUT STD_LOGIC;
        weights_stream_V_V_8_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_V_V_8_empty_n : IN STD_LOGIC;
        weights_stream_V_V_8_read : OUT STD_LOGIC;
        weights_stream_V_V_9_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_V_V_9_empty_n : IN STD_LOGIC;
        weights_stream_V_V_9_read : OUT STD_LOGIC;
        weights_stream_V_V_10_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_V_V_10_empty_n : IN STD_LOGIC;
        weights_stream_V_V_10_read : OUT STD_LOGIC;
        weights_stream_V_V_11_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_V_V_11_empty_n : IN STD_LOGIC;
        weights_stream_V_V_11_read : OUT STD_LOGIC;
        weights_stream_V_V_12_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_V_V_12_empty_n : IN STD_LOGIC;
        weights_stream_V_V_12_read : OUT STD_LOGIC;
        weights_stream_V_V_13_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_V_V_13_empty_n : IN STD_LOGIC;
        weights_stream_V_V_13_read : OUT STD_LOGIC;
        weights_stream_V_V_14_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_V_V_14_empty_n : IN STD_LOGIC;
        weights_stream_V_V_14_read : OUT STD_LOGIC;
        weights_stream_V_V_15_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_V_V_15_empty_n : IN STD_LOGIC;
        weights_stream_V_V_15_read : OUT STD_LOGIC;
        weights_stream_V_V_16_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_V_V_16_empty_n : IN STD_LOGIC;
        weights_stream_V_V_16_read : OUT STD_LOGIC;
        weights_stream_V_V_17_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_V_V_17_empty_n : IN STD_LOGIC;
        weights_stream_V_V_17_read : OUT STD_LOGIC;
        weights_stream_V_V_18_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_V_V_18_empty_n : IN STD_LOGIC;
        weights_stream_V_V_18_read : OUT STD_LOGIC;
        weights_stream_V_V_19_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_V_V_19_empty_n : IN STD_LOGIC;
        weights_stream_V_V_19_read : OUT STD_LOGIC;
        weights_stream_V_V_20_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_V_V_20_empty_n : IN STD_LOGIC;
        weights_stream_V_V_20_read : OUT STD_LOGIC;
        weights_stream_V_V_21_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_V_V_21_empty_n : IN STD_LOGIC;
        weights_stream_V_V_21_read : OUT STD_LOGIC;
        weights_stream_V_V_22_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_V_V_22_empty_n : IN STD_LOGIC;
        weights_stream_V_V_22_read : OUT STD_LOGIC;
        weights_stream_V_V_23_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_V_V_23_empty_n : IN STD_LOGIC;
        weights_stream_V_V_23_read : OUT STD_LOGIC;
        weights_stream_V_V_24_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_V_V_24_empty_n : IN STD_LOGIC;
        weights_stream_V_V_24_read : OUT STD_LOGIC;
        weights_stream_V_V_25_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_V_V_25_empty_n : IN STD_LOGIC;
        weights_stream_V_V_25_read : OUT STD_LOGIC;
        weights_stream_V_V_26_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_V_V_26_empty_n : IN STD_LOGIC;
        weights_stream_V_V_26_read : OUT STD_LOGIC;
        weights_stream_V_V_27_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_V_V_27_empty_n : IN STD_LOGIC;
        weights_stream_V_V_27_read : OUT STD_LOGIC;
        weights_stream_V_V_28_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_V_V_28_empty_n : IN STD_LOGIC;
        weights_stream_V_V_28_read : OUT STD_LOGIC;
        weights_stream_V_V_29_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_V_V_29_empty_n : IN STD_LOGIC;
        weights_stream_V_V_29_read : OUT STD_LOGIC;
        weights_stream_V_V_30_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_V_V_30_empty_n : IN STD_LOGIC;
        weights_stream_V_V_30_read : OUT STD_LOGIC;
        weights_stream_V_V_31_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_stream_V_V_31_empty_n : IN STD_LOGIC;
        weights_stream_V_V_31_read : OUT STD_LOGIC;
        output_buf_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_buf_V_ce0 : OUT STD_LOGIC;
        output_buf_V_we0 : OUT STD_LOGIC;
        output_buf_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_buf_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LINEAR_OutputBuffer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_ifc1_AWVALID : OUT STD_LOGIC;
        m_axi_ifc1_AWREADY : IN STD_LOGIC;
        m_axi_ifc1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_ifc1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ifc1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ifc1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ifc1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc1_WVALID : OUT STD_LOGIC;
        m_axi_ifc1_WREADY : IN STD_LOGIC;
        m_axi_ifc1_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        m_axi_ifc1_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_ifc1_WLAST : OUT STD_LOGIC;
        m_axi_ifc1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc1_ARVALID : OUT STD_LOGIC;
        m_axi_ifc1_ARREADY : IN STD_LOGIC;
        m_axi_ifc1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_ifc1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ifc1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ifc1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ifc1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ifc1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc1_RVALID : IN STD_LOGIC;
        m_axi_ifc1_RREADY : OUT STD_LOGIC;
        m_axi_ifc1_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        m_axi_ifc1_RLAST : IN STD_LOGIC;
        m_axi_ifc1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc1_BVALID : IN STD_LOGIC;
        m_axi_ifc1_BREADY : OUT STD_LOGIC;
        m_axi_ifc1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ifc1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ifc1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        p_read : IN STD_LOGIC_VECTOR (63 downto 0);
        X_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        X_empty_n : IN STD_LOGIC;
        X_read : OUT STD_LOGIC;
        Wt_Y_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        Wt_Y_empty_n : IN STD_LOGIC;
        Wt_Y_read : OUT STD_LOGIC;
        output_buf_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_buf_ce0 : OUT STD_LOGIC;
        output_buf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_buf_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_buf_ce1 : OUT STD_LOGIC;
        output_buf_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LINEAR_weight_buffer_V_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (287 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (287 downto 0) );
    end component;


    component LINEAR_weight_buffer_V_5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (287 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (287 downto 0) );
    end component;


    component LINEAR_iact_buffer_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LINEAR_output_buf_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component LINEAR_fifo_w64_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component LINEAR_fifo_w28_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (27 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (27 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component LINEAR_fifo_w32_d100_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component LINEAR_fifo_w32_d32_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component LINEAR_fifo_w32_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component LINEAR_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ifc1_offset : OUT STD_LOGIC_VECTOR (63 downto 0);
        ifc2_offset : OUT STD_LOGIC_VECTOR (63 downto 0);
        ifc3_offset : OUT STD_LOGIC_VECTOR (63 downto 0);
        ifc4_offset : OUT STD_LOGIC_VECTOR (63 downto 0);
        ifc5_offset : OUT STD_LOGIC_VECTOR (63 downto 0);
        ifc6_offset : OUT STD_LOGIC_VECTOR (63 downto 0);
        ifc7 : OUT STD_LOGIC_VECTOR (63 downto 0);
        X : OUT STD_LOGIC_VECTOR (31 downto 0);
        Y : OUT STD_LOGIC_VECTOR (31 downto 0);
        Wt_X : OUT STD_LOGIC_VECTOR (31 downto 0);
        Wt_Y : OUT STD_LOGIC_VECTOR (31 downto 0);
        bias : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LINEAR_ifc1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component LINEAR_ifc2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component LINEAR_ifc3_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component LINEAR_ifc4_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component LINEAR_ifc5_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component LINEAR_ifc6_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    weight_buffer_V_0_U : component LINEAR_weight_buffer_V_0
    generic map (
        DataWidth => 288,
        AddressRange => 3246,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer_address0,
        ce0 => ReadFromMem_U0_weight_buffer_ce0,
        we0 => ReadFromMem_U0_weight_buffer_we0,
        d0 => ReadFromMem_U0_weight_buffer_d0,
        q0 => weight_buffer_V_0_q0);

    weight_buffer_V_1_U : component LINEAR_weight_buffer_V_0
    generic map (
        DataWidth => 288,
        AddressRange => 3246,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer1_address0,
        ce0 => ReadFromMem_U0_weight_buffer1_ce0,
        we0 => ReadFromMem_U0_weight_buffer1_we0,
        d0 => ReadFromMem_U0_weight_buffer1_d0,
        q0 => weight_buffer_V_1_q0);

    weight_buffer_V_2_U : component LINEAR_weight_buffer_V_0
    generic map (
        DataWidth => 288,
        AddressRange => 3246,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer2_address0,
        ce0 => ReadFromMem_U0_weight_buffer2_ce0,
        we0 => ReadFromMem_U0_weight_buffer2_we0,
        d0 => ReadFromMem_U0_weight_buffer2_d0,
        q0 => weight_buffer_V_2_q0);

    weight_buffer_V_3_U : component LINEAR_weight_buffer_V_0
    generic map (
        DataWidth => 288,
        AddressRange => 3246,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer3_address0,
        ce0 => ReadFromMem_U0_weight_buffer3_ce0,
        we0 => ReadFromMem_U0_weight_buffer3_we0,
        d0 => ReadFromMem_U0_weight_buffer3_d0,
        q0 => weight_buffer_V_3_q0);

    weight_buffer_V_4_U : component LINEAR_weight_buffer_V_0
    generic map (
        DataWidth => 288,
        AddressRange => 3246,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer4_address0,
        ce0 => ReadFromMem_U0_weight_buffer4_ce0,
        we0 => ReadFromMem_U0_weight_buffer4_we0,
        d0 => ReadFromMem_U0_weight_buffer4_d0,
        q0 => weight_buffer_V_4_q0);

    weight_buffer_V_5_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer5_address0,
        ce0 => ReadFromMem_U0_weight_buffer5_ce0,
        we0 => ReadFromMem_U0_weight_buffer5_we0,
        d0 => ReadFromMem_U0_weight_buffer5_d0,
        q0 => weight_buffer_V_5_q0);

    weight_buffer_V_6_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer6_address0,
        ce0 => ReadFromMem_U0_weight_buffer6_ce0,
        we0 => ReadFromMem_U0_weight_buffer6_we0,
        d0 => ReadFromMem_U0_weight_buffer6_d0,
        q0 => weight_buffer_V_6_q0);

    weight_buffer_V_7_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer7_address0,
        ce0 => ReadFromMem_U0_weight_buffer7_ce0,
        we0 => ReadFromMem_U0_weight_buffer7_we0,
        d0 => ReadFromMem_U0_weight_buffer7_d0,
        q0 => weight_buffer_V_7_q0);

    weight_buffer_V_8_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer8_address0,
        ce0 => ReadFromMem_U0_weight_buffer8_ce0,
        we0 => ReadFromMem_U0_weight_buffer8_we0,
        d0 => ReadFromMem_U0_weight_buffer8_d0,
        q0 => weight_buffer_V_8_q0);

    weight_buffer_V_9_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer9_address0,
        ce0 => ReadFromMem_U0_weight_buffer9_ce0,
        we0 => ReadFromMem_U0_weight_buffer9_we0,
        d0 => ReadFromMem_U0_weight_buffer9_d0,
        q0 => weight_buffer_V_9_q0);

    weight_buffer_V_10_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer10_address0,
        ce0 => ReadFromMem_U0_weight_buffer10_ce0,
        we0 => ReadFromMem_U0_weight_buffer10_we0,
        d0 => ReadFromMem_U0_weight_buffer10_d0,
        q0 => weight_buffer_V_10_q0);

    weight_buffer_V_11_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer11_address0,
        ce0 => ReadFromMem_U0_weight_buffer11_ce0,
        we0 => ReadFromMem_U0_weight_buffer11_we0,
        d0 => ReadFromMem_U0_weight_buffer11_d0,
        q0 => weight_buffer_V_11_q0);

    weight_buffer_V_12_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer12_address0,
        ce0 => ReadFromMem_U0_weight_buffer12_ce0,
        we0 => ReadFromMem_U0_weight_buffer12_we0,
        d0 => ReadFromMem_U0_weight_buffer12_d0,
        q0 => weight_buffer_V_12_q0);

    weight_buffer_V_13_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer13_address0,
        ce0 => ReadFromMem_U0_weight_buffer13_ce0,
        we0 => ReadFromMem_U0_weight_buffer13_we0,
        d0 => ReadFromMem_U0_weight_buffer13_d0,
        q0 => weight_buffer_V_13_q0);

    weight_buffer_V_14_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer14_address0,
        ce0 => ReadFromMem_U0_weight_buffer14_ce0,
        we0 => ReadFromMem_U0_weight_buffer14_we0,
        d0 => ReadFromMem_U0_weight_buffer14_d0,
        q0 => weight_buffer_V_14_q0);

    weight_buffer_V_15_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer15_address0,
        ce0 => ReadFromMem_U0_weight_buffer15_ce0,
        we0 => ReadFromMem_U0_weight_buffer15_we0,
        d0 => ReadFromMem_U0_weight_buffer15_d0,
        q0 => weight_buffer_V_15_q0);

    weight_buffer_V_16_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer16_address0,
        ce0 => ReadFromMem_U0_weight_buffer16_ce0,
        we0 => ReadFromMem_U0_weight_buffer16_we0,
        d0 => ReadFromMem_U0_weight_buffer16_d0,
        q0 => weight_buffer_V_16_q0);

    weight_buffer_V_17_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer17_address0,
        ce0 => ReadFromMem_U0_weight_buffer17_ce0,
        we0 => ReadFromMem_U0_weight_buffer17_we0,
        d0 => ReadFromMem_U0_weight_buffer17_d0,
        q0 => weight_buffer_V_17_q0);

    weight_buffer_V_18_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer18_address0,
        ce0 => ReadFromMem_U0_weight_buffer18_ce0,
        we0 => ReadFromMem_U0_weight_buffer18_we0,
        d0 => ReadFromMem_U0_weight_buffer18_d0,
        q0 => weight_buffer_V_18_q0);

    weight_buffer_V_19_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer19_address0,
        ce0 => ReadFromMem_U0_weight_buffer19_ce0,
        we0 => ReadFromMem_U0_weight_buffer19_we0,
        d0 => ReadFromMem_U0_weight_buffer19_d0,
        q0 => weight_buffer_V_19_q0);

    weight_buffer_V_20_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer20_address0,
        ce0 => ReadFromMem_U0_weight_buffer20_ce0,
        we0 => ReadFromMem_U0_weight_buffer20_we0,
        d0 => ReadFromMem_U0_weight_buffer20_d0,
        q0 => weight_buffer_V_20_q0);

    weight_buffer_V_21_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer21_address0,
        ce0 => ReadFromMem_U0_weight_buffer21_ce0,
        we0 => ReadFromMem_U0_weight_buffer21_we0,
        d0 => ReadFromMem_U0_weight_buffer21_d0,
        q0 => weight_buffer_V_21_q0);

    weight_buffer_V_22_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer22_address0,
        ce0 => ReadFromMem_U0_weight_buffer22_ce0,
        we0 => ReadFromMem_U0_weight_buffer22_we0,
        d0 => ReadFromMem_U0_weight_buffer22_d0,
        q0 => weight_buffer_V_22_q0);

    weight_buffer_V_23_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer23_address0,
        ce0 => ReadFromMem_U0_weight_buffer23_ce0,
        we0 => ReadFromMem_U0_weight_buffer23_we0,
        d0 => ReadFromMem_U0_weight_buffer23_d0,
        q0 => weight_buffer_V_23_q0);

    weight_buffer_V_24_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer24_address0,
        ce0 => ReadFromMem_U0_weight_buffer24_ce0,
        we0 => ReadFromMem_U0_weight_buffer24_we0,
        d0 => ReadFromMem_U0_weight_buffer24_d0,
        q0 => weight_buffer_V_24_q0);

    weight_buffer_V_25_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer25_address0,
        ce0 => ReadFromMem_U0_weight_buffer25_ce0,
        we0 => ReadFromMem_U0_weight_buffer25_we0,
        d0 => ReadFromMem_U0_weight_buffer25_d0,
        q0 => weight_buffer_V_25_q0);

    weight_buffer_V_26_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer26_address0,
        ce0 => ReadFromMem_U0_weight_buffer26_ce0,
        we0 => ReadFromMem_U0_weight_buffer26_we0,
        d0 => ReadFromMem_U0_weight_buffer26_d0,
        q0 => weight_buffer_V_26_q0);

    weight_buffer_V_27_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer27_address0,
        ce0 => ReadFromMem_U0_weight_buffer27_ce0,
        we0 => ReadFromMem_U0_weight_buffer27_we0,
        d0 => ReadFromMem_U0_weight_buffer27_d0,
        q0 => weight_buffer_V_27_q0);

    weight_buffer_V_28_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer28_address0,
        ce0 => ReadFromMem_U0_weight_buffer28_ce0,
        we0 => ReadFromMem_U0_weight_buffer28_we0,
        d0 => ReadFromMem_U0_weight_buffer28_d0,
        q0 => weight_buffer_V_28_q0);

    weight_buffer_V_29_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer29_address0,
        ce0 => ReadFromMem_U0_weight_buffer29_ce0,
        we0 => ReadFromMem_U0_weight_buffer29_we0,
        d0 => ReadFromMem_U0_weight_buffer29_d0,
        q0 => weight_buffer_V_29_q0);

    weight_buffer_V_30_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer30_address0,
        ce0 => ReadFromMem_U0_weight_buffer30_ce0,
        we0 => ReadFromMem_U0_weight_buffer30_we0,
        d0 => ReadFromMem_U0_weight_buffer30_d0,
        q0 => weight_buffer_V_30_q0);

    weight_buffer_V_31_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer31_address0,
        ce0 => ReadFromMem_U0_weight_buffer31_ce0,
        we0 => ReadFromMem_U0_weight_buffer31_we0,
        d0 => ReadFromMem_U0_weight_buffer31_d0,
        q0 => weight_buffer_V_31_q0);

    weight_buffer_V_32_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer32_address0,
        ce0 => ReadFromMem_U0_weight_buffer32_ce0,
        we0 => ReadFromMem_U0_weight_buffer32_we0,
        d0 => ReadFromMem_U0_weight_buffer32_d0,
        q0 => weight_buffer_V_32_q0);

    weight_buffer_V_33_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer33_address0,
        ce0 => ReadFromMem_U0_weight_buffer33_ce0,
        we0 => ReadFromMem_U0_weight_buffer33_we0,
        d0 => ReadFromMem_U0_weight_buffer33_d0,
        q0 => weight_buffer_V_33_q0);

    weight_buffer_V_34_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer34_address0,
        ce0 => ReadFromMem_U0_weight_buffer34_ce0,
        we0 => ReadFromMem_U0_weight_buffer34_we0,
        d0 => ReadFromMem_U0_weight_buffer34_d0,
        q0 => weight_buffer_V_34_q0);

    weight_buffer_V_35_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer35_address0,
        ce0 => ReadFromMem_U0_weight_buffer35_ce0,
        we0 => ReadFromMem_U0_weight_buffer35_we0,
        d0 => ReadFromMem_U0_weight_buffer35_d0,
        q0 => weight_buffer_V_35_q0);

    weight_buffer_V_36_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer36_address0,
        ce0 => ReadFromMem_U0_weight_buffer36_ce0,
        we0 => ReadFromMem_U0_weight_buffer36_we0,
        d0 => ReadFromMem_U0_weight_buffer36_d0,
        q0 => weight_buffer_V_36_q0);

    weight_buffer_V_37_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer37_address0,
        ce0 => ReadFromMem_U0_weight_buffer37_ce0,
        we0 => ReadFromMem_U0_weight_buffer37_we0,
        d0 => ReadFromMem_U0_weight_buffer37_d0,
        q0 => weight_buffer_V_37_q0);

    weight_buffer_V_38_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer38_address0,
        ce0 => ReadFromMem_U0_weight_buffer38_ce0,
        we0 => ReadFromMem_U0_weight_buffer38_we0,
        d0 => ReadFromMem_U0_weight_buffer38_d0,
        q0 => weight_buffer_V_38_q0);

    weight_buffer_V_39_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer39_address0,
        ce0 => ReadFromMem_U0_weight_buffer39_ce0,
        we0 => ReadFromMem_U0_weight_buffer39_we0,
        d0 => ReadFromMem_U0_weight_buffer39_d0,
        q0 => weight_buffer_V_39_q0);

    weight_buffer_V_40_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer40_address0,
        ce0 => ReadFromMem_U0_weight_buffer40_ce0,
        we0 => ReadFromMem_U0_weight_buffer40_we0,
        d0 => ReadFromMem_U0_weight_buffer40_d0,
        q0 => weight_buffer_V_40_q0);

    weight_buffer_V_41_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer41_address0,
        ce0 => ReadFromMem_U0_weight_buffer41_ce0,
        we0 => ReadFromMem_U0_weight_buffer41_we0,
        d0 => ReadFromMem_U0_weight_buffer41_d0,
        q0 => weight_buffer_V_41_q0);

    weight_buffer_V_42_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer42_address0,
        ce0 => ReadFromMem_U0_weight_buffer42_ce0,
        we0 => ReadFromMem_U0_weight_buffer42_we0,
        d0 => ReadFromMem_U0_weight_buffer42_d0,
        q0 => weight_buffer_V_42_q0);

    weight_buffer_V_43_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer43_address0,
        ce0 => ReadFromMem_U0_weight_buffer43_ce0,
        we0 => ReadFromMem_U0_weight_buffer43_we0,
        d0 => ReadFromMem_U0_weight_buffer43_d0,
        q0 => weight_buffer_V_43_q0);

    weight_buffer_V_44_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer44_address0,
        ce0 => ReadFromMem_U0_weight_buffer44_ce0,
        we0 => ReadFromMem_U0_weight_buffer44_we0,
        d0 => ReadFromMem_U0_weight_buffer44_d0,
        q0 => weight_buffer_V_44_q0);

    weight_buffer_V_45_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer45_address0,
        ce0 => ReadFromMem_U0_weight_buffer45_ce0,
        we0 => ReadFromMem_U0_weight_buffer45_we0,
        d0 => ReadFromMem_U0_weight_buffer45_d0,
        q0 => weight_buffer_V_45_q0);

    weight_buffer_V_46_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer46_address0,
        ce0 => ReadFromMem_U0_weight_buffer46_ce0,
        we0 => ReadFromMem_U0_weight_buffer46_we0,
        d0 => ReadFromMem_U0_weight_buffer46_d0,
        q0 => weight_buffer_V_46_q0);

    weight_buffer_V_47_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer47_address0,
        ce0 => ReadFromMem_U0_weight_buffer47_ce0,
        we0 => ReadFromMem_U0_weight_buffer47_we0,
        d0 => ReadFromMem_U0_weight_buffer47_d0,
        q0 => weight_buffer_V_47_q0);

    weight_buffer_V_48_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer48_address0,
        ce0 => ReadFromMem_U0_weight_buffer48_ce0,
        we0 => ReadFromMem_U0_weight_buffer48_we0,
        d0 => ReadFromMem_U0_weight_buffer48_d0,
        q0 => weight_buffer_V_48_q0);

    weight_buffer_V_49_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer49_address0,
        ce0 => ReadFromMem_U0_weight_buffer49_ce0,
        we0 => ReadFromMem_U0_weight_buffer49_we0,
        d0 => ReadFromMem_U0_weight_buffer49_d0,
        q0 => weight_buffer_V_49_q0);

    weight_buffer_V_50_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer50_address0,
        ce0 => ReadFromMem_U0_weight_buffer50_ce0,
        we0 => ReadFromMem_U0_weight_buffer50_we0,
        d0 => ReadFromMem_U0_weight_buffer50_d0,
        q0 => weight_buffer_V_50_q0);

    weight_buffer_V_51_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer51_address0,
        ce0 => ReadFromMem_U0_weight_buffer51_ce0,
        we0 => ReadFromMem_U0_weight_buffer51_we0,
        d0 => ReadFromMem_U0_weight_buffer51_d0,
        q0 => weight_buffer_V_51_q0);

    weight_buffer_V_52_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer52_address0,
        ce0 => ReadFromMem_U0_weight_buffer52_ce0,
        we0 => ReadFromMem_U0_weight_buffer52_we0,
        d0 => ReadFromMem_U0_weight_buffer52_d0,
        q0 => weight_buffer_V_52_q0);

    weight_buffer_V_53_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer53_address0,
        ce0 => ReadFromMem_U0_weight_buffer53_ce0,
        we0 => ReadFromMem_U0_weight_buffer53_we0,
        d0 => ReadFromMem_U0_weight_buffer53_d0,
        q0 => weight_buffer_V_53_q0);

    weight_buffer_V_54_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer54_address0,
        ce0 => ReadFromMem_U0_weight_buffer54_ce0,
        we0 => ReadFromMem_U0_weight_buffer54_we0,
        d0 => ReadFromMem_U0_weight_buffer54_d0,
        q0 => weight_buffer_V_54_q0);

    weight_buffer_V_55_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer55_address0,
        ce0 => ReadFromMem_U0_weight_buffer55_ce0,
        we0 => ReadFromMem_U0_weight_buffer55_we0,
        d0 => ReadFromMem_U0_weight_buffer55_d0,
        q0 => weight_buffer_V_55_q0);

    weight_buffer_V_56_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer56_address0,
        ce0 => ReadFromMem_U0_weight_buffer56_ce0,
        we0 => ReadFromMem_U0_weight_buffer56_we0,
        d0 => ReadFromMem_U0_weight_buffer56_d0,
        q0 => weight_buffer_V_56_q0);

    weight_buffer_V_57_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer57_address0,
        ce0 => ReadFromMem_U0_weight_buffer57_ce0,
        we0 => ReadFromMem_U0_weight_buffer57_we0,
        d0 => ReadFromMem_U0_weight_buffer57_d0,
        q0 => weight_buffer_V_57_q0);

    weight_buffer_V_58_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer58_address0,
        ce0 => ReadFromMem_U0_weight_buffer58_ce0,
        we0 => ReadFromMem_U0_weight_buffer58_we0,
        d0 => ReadFromMem_U0_weight_buffer58_d0,
        q0 => weight_buffer_V_58_q0);

    weight_buffer_V_59_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer59_address0,
        ce0 => ReadFromMem_U0_weight_buffer59_ce0,
        we0 => ReadFromMem_U0_weight_buffer59_we0,
        d0 => ReadFromMem_U0_weight_buffer59_d0,
        q0 => weight_buffer_V_59_q0);

    weight_buffer_V_60_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer60_address0,
        ce0 => ReadFromMem_U0_weight_buffer60_ce0,
        we0 => ReadFromMem_U0_weight_buffer60_we0,
        d0 => ReadFromMem_U0_weight_buffer60_d0,
        q0 => weight_buffer_V_60_q0);

    weight_buffer_V_61_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer61_address0,
        ce0 => ReadFromMem_U0_weight_buffer61_ce0,
        we0 => ReadFromMem_U0_weight_buffer61_we0,
        d0 => ReadFromMem_U0_weight_buffer61_d0,
        q0 => weight_buffer_V_61_q0);

    weight_buffer_V_62_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer62_address0,
        ce0 => ReadFromMem_U0_weight_buffer62_ce0,
        we0 => ReadFromMem_U0_weight_buffer62_we0,
        d0 => ReadFromMem_U0_weight_buffer62_d0,
        q0 => weight_buffer_V_62_q0);

    weight_buffer_V_63_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer63_address0,
        ce0 => ReadFromMem_U0_weight_buffer63_ce0,
        we0 => ReadFromMem_U0_weight_buffer63_we0,
        d0 => ReadFromMem_U0_weight_buffer63_d0,
        q0 => weight_buffer_V_63_q0);

    weight_buffer_V_64_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer64_address0,
        ce0 => ReadFromMem_U0_weight_buffer64_ce0,
        we0 => ReadFromMem_U0_weight_buffer64_we0,
        d0 => ReadFromMem_U0_weight_buffer64_d0,
        q0 => weight_buffer_V_64_q0);

    weight_buffer_V_65_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer65_address0,
        ce0 => ReadFromMem_U0_weight_buffer65_ce0,
        we0 => ReadFromMem_U0_weight_buffer65_we0,
        d0 => ReadFromMem_U0_weight_buffer65_d0,
        q0 => weight_buffer_V_65_q0);

    weight_buffer_V_66_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer66_address0,
        ce0 => ReadFromMem_U0_weight_buffer66_ce0,
        we0 => ReadFromMem_U0_weight_buffer66_we0,
        d0 => ReadFromMem_U0_weight_buffer66_d0,
        q0 => weight_buffer_V_66_q0);

    weight_buffer_V_67_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer67_address0,
        ce0 => ReadFromMem_U0_weight_buffer67_ce0,
        we0 => ReadFromMem_U0_weight_buffer67_we0,
        d0 => ReadFromMem_U0_weight_buffer67_d0,
        q0 => weight_buffer_V_67_q0);

    weight_buffer_V_68_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer68_address0,
        ce0 => ReadFromMem_U0_weight_buffer68_ce0,
        we0 => ReadFromMem_U0_weight_buffer68_we0,
        d0 => ReadFromMem_U0_weight_buffer68_d0,
        q0 => weight_buffer_V_68_q0);

    weight_buffer_V_69_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer69_address0,
        ce0 => ReadFromMem_U0_weight_buffer69_ce0,
        we0 => ReadFromMem_U0_weight_buffer69_we0,
        d0 => ReadFromMem_U0_weight_buffer69_d0,
        q0 => weight_buffer_V_69_q0);

    weight_buffer_V_70_U : component LINEAR_weight_buffer_V_5
    generic map (
        DataWidth => 288,
        AddressRange => 3245,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_weight_buffer70_address0,
        ce0 => ReadFromMem_U0_weight_buffer70_ce0,
        we0 => ReadFromMem_U0_weight_buffer70_we0,
        d0 => ReadFromMem_U0_weight_buffer70_d0,
        q0 => weight_buffer_V_70_q0);

    iact_buffer_V_U : component LINEAR_iact_buffer_V
    generic map (
        DataWidth => 32,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ReadFromMem_U0_iact_buffer_address0,
        ce0 => ReadFromMem_U0_iact_buffer_ce0,
        we0 => ReadFromMem_U0_iact_buffer_we0,
        d0 => ReadFromMem_U0_iact_buffer_d0,
        q0 => iact_buffer_V_q0,
        address1 => ReadFromMem_U0_iact_buffer_address1,
        ce1 => ReadFromMem_U0_iact_buffer_ce1,
        we1 => ReadFromMem_U0_iact_buffer_we1,
        d1 => ReadFromMem_U0_iact_buffer_d1);

    output_buf_V_U : component LINEAR_output_buf_V
    generic map (
        DataWidth => 32,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => RunDataFlow_U0_output_buf_V_address0,
        i_ce0 => RunDataFlow_U0_output_buf_V_ce0,
        i_we0 => RunDataFlow_U0_output_buf_V_we0,
        i_d0 => RunDataFlow_U0_output_buf_V_d0,
        i_q0 => output_buf_V_i_q0,
        i_address1 => ap_const_lv10_0,
        i_ce1 => ap_const_logic_0,
        i_q1 => output_buf_V_i_q1,
        t_address0 => OutputBuffer_U0_output_buf_address0,
        t_ce0 => OutputBuffer_U0_output_buf_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => output_buf_V_t_q0,
        t_address1 => OutputBuffer_U0_output_buf_address1,
        t_ce1 => OutputBuffer_U0_output_buf_ce1,
        t_q1 => output_buf_V_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => output_buf_V_i_full_n,
        i_write => RunDataFlow_U0_ap_done,
        t_empty_n => output_buf_V_t_empty_n,
        t_read => OutputBuffer_U0_ap_ready);

    control_s_axi_U : component LINEAR_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ifc1_offset => ifc1_offset,
        ifc2_offset => ifc2_offset,
        ifc3_offset => ifc3_offset,
        ifc4_offset => ifc4_offset,
        ifc5_offset => ifc5_offset,
        ifc6_offset => ifc6_offset,
        ifc7 => ifc7,
        X => X,
        Y => Y,
        Wt_X => Wt_X,
        Wt_Y => Wt_Y,
        bias => bias);

    ifc1_m_axi_U : component LINEAR_ifc1_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 128,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IFC1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IFC1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IFC1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IFC1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IFC1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IFC1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IFC1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IFC1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IFC1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IFC1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IFC1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_ifc1_AWVALID,
        AWREADY => m_axi_ifc1_AWREADY,
        AWADDR => m_axi_ifc1_AWADDR,
        AWID => m_axi_ifc1_AWID,
        AWLEN => m_axi_ifc1_AWLEN,
        AWSIZE => m_axi_ifc1_AWSIZE,
        AWBURST => m_axi_ifc1_AWBURST,
        AWLOCK => m_axi_ifc1_AWLOCK,
        AWCACHE => m_axi_ifc1_AWCACHE,
        AWPROT => m_axi_ifc1_AWPROT,
        AWQOS => m_axi_ifc1_AWQOS,
        AWREGION => m_axi_ifc1_AWREGION,
        AWUSER => m_axi_ifc1_AWUSER,
        WVALID => m_axi_ifc1_WVALID,
        WREADY => m_axi_ifc1_WREADY,
        WDATA => m_axi_ifc1_WDATA,
        WSTRB => m_axi_ifc1_WSTRB,
        WLAST => m_axi_ifc1_WLAST,
        WID => m_axi_ifc1_WID,
        WUSER => m_axi_ifc1_WUSER,
        ARVALID => m_axi_ifc1_ARVALID,
        ARREADY => m_axi_ifc1_ARREADY,
        ARADDR => m_axi_ifc1_ARADDR,
        ARID => m_axi_ifc1_ARID,
        ARLEN => m_axi_ifc1_ARLEN,
        ARSIZE => m_axi_ifc1_ARSIZE,
        ARBURST => m_axi_ifc1_ARBURST,
        ARLOCK => m_axi_ifc1_ARLOCK,
        ARCACHE => m_axi_ifc1_ARCACHE,
        ARPROT => m_axi_ifc1_ARPROT,
        ARQOS => m_axi_ifc1_ARQOS,
        ARREGION => m_axi_ifc1_ARREGION,
        ARUSER => m_axi_ifc1_ARUSER,
        RVALID => m_axi_ifc1_RVALID,
        RREADY => m_axi_ifc1_RREADY,
        RDATA => m_axi_ifc1_RDATA,
        RLAST => m_axi_ifc1_RLAST,
        RID => m_axi_ifc1_RID,
        RUSER => m_axi_ifc1_RUSER,
        RRESP => m_axi_ifc1_RRESP,
        BVALID => m_axi_ifc1_BVALID,
        BREADY => m_axi_ifc1_BREADY,
        BRESP => m_axi_ifc1_BRESP,
        BID => m_axi_ifc1_BID,
        BUSER => m_axi_ifc1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ReadFromMem_U0_m_axi_ifc1_ARVALID,
        I_ARREADY => ifc1_ARREADY,
        I_ARADDR => ReadFromMem_U0_m_axi_ifc1_ARADDR,
        I_ARID => ReadFromMem_U0_m_axi_ifc1_ARID,
        I_ARLEN => ReadFromMem_U0_m_axi_ifc1_ARLEN,
        I_ARSIZE => ReadFromMem_U0_m_axi_ifc1_ARSIZE,
        I_ARLOCK => ReadFromMem_U0_m_axi_ifc1_ARLOCK,
        I_ARCACHE => ReadFromMem_U0_m_axi_ifc1_ARCACHE,
        I_ARQOS => ReadFromMem_U0_m_axi_ifc1_ARQOS,
        I_ARPROT => ReadFromMem_U0_m_axi_ifc1_ARPROT,
        I_ARUSER => ReadFromMem_U0_m_axi_ifc1_ARUSER,
        I_ARBURST => ReadFromMem_U0_m_axi_ifc1_ARBURST,
        I_ARREGION => ReadFromMem_U0_m_axi_ifc1_ARREGION,
        I_RVALID => ifc1_RVALID,
        I_RREADY => ReadFromMem_U0_m_axi_ifc1_RREADY,
        I_RDATA => ifc1_RDATA,
        I_RID => ifc1_RID,
        I_RUSER => ifc1_RUSER,
        I_RRESP => ifc1_RRESP,
        I_RLAST => ifc1_RLAST,
        I_AWVALID => OutputBuffer_U0_m_axi_ifc1_AWVALID,
        I_AWREADY => ifc1_AWREADY,
        I_AWADDR => OutputBuffer_U0_m_axi_ifc1_AWADDR,
        I_AWID => OutputBuffer_U0_m_axi_ifc1_AWID,
        I_AWLEN => OutputBuffer_U0_m_axi_ifc1_AWLEN,
        I_AWSIZE => OutputBuffer_U0_m_axi_ifc1_AWSIZE,
        I_AWLOCK => OutputBuffer_U0_m_axi_ifc1_AWLOCK,
        I_AWCACHE => OutputBuffer_U0_m_axi_ifc1_AWCACHE,
        I_AWQOS => OutputBuffer_U0_m_axi_ifc1_AWQOS,
        I_AWPROT => OutputBuffer_U0_m_axi_ifc1_AWPROT,
        I_AWUSER => OutputBuffer_U0_m_axi_ifc1_AWUSER,
        I_AWBURST => OutputBuffer_U0_m_axi_ifc1_AWBURST,
        I_AWREGION => OutputBuffer_U0_m_axi_ifc1_AWREGION,
        I_WVALID => OutputBuffer_U0_m_axi_ifc1_WVALID,
        I_WREADY => ifc1_WREADY,
        I_WDATA => OutputBuffer_U0_m_axi_ifc1_WDATA,
        I_WID => OutputBuffer_U0_m_axi_ifc1_WID,
        I_WUSER => OutputBuffer_U0_m_axi_ifc1_WUSER,
        I_WLAST => OutputBuffer_U0_m_axi_ifc1_WLAST,
        I_WSTRB => OutputBuffer_U0_m_axi_ifc1_WSTRB,
        I_BVALID => ifc1_BVALID,
        I_BREADY => OutputBuffer_U0_m_axi_ifc1_BREADY,
        I_BRESP => ifc1_BRESP,
        I_BID => ifc1_BID,
        I_BUSER => ifc1_BUSER);

    ifc2_m_axi_U : component LINEAR_ifc2_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 128,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IFC2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IFC2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IFC2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IFC2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IFC2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IFC2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IFC2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IFC2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IFC2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IFC2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IFC2_CACHE_VALUE)
    port map (
        AWVALID => m_axi_ifc2_AWVALID,
        AWREADY => m_axi_ifc2_AWREADY,
        AWADDR => m_axi_ifc2_AWADDR,
        AWID => m_axi_ifc2_AWID,
        AWLEN => m_axi_ifc2_AWLEN,
        AWSIZE => m_axi_ifc2_AWSIZE,
        AWBURST => m_axi_ifc2_AWBURST,
        AWLOCK => m_axi_ifc2_AWLOCK,
        AWCACHE => m_axi_ifc2_AWCACHE,
        AWPROT => m_axi_ifc2_AWPROT,
        AWQOS => m_axi_ifc2_AWQOS,
        AWREGION => m_axi_ifc2_AWREGION,
        AWUSER => m_axi_ifc2_AWUSER,
        WVALID => m_axi_ifc2_WVALID,
        WREADY => m_axi_ifc2_WREADY,
        WDATA => m_axi_ifc2_WDATA,
        WSTRB => m_axi_ifc2_WSTRB,
        WLAST => m_axi_ifc2_WLAST,
        WID => m_axi_ifc2_WID,
        WUSER => m_axi_ifc2_WUSER,
        ARVALID => m_axi_ifc2_ARVALID,
        ARREADY => m_axi_ifc2_ARREADY,
        ARADDR => m_axi_ifc2_ARADDR,
        ARID => m_axi_ifc2_ARID,
        ARLEN => m_axi_ifc2_ARLEN,
        ARSIZE => m_axi_ifc2_ARSIZE,
        ARBURST => m_axi_ifc2_ARBURST,
        ARLOCK => m_axi_ifc2_ARLOCK,
        ARCACHE => m_axi_ifc2_ARCACHE,
        ARPROT => m_axi_ifc2_ARPROT,
        ARQOS => m_axi_ifc2_ARQOS,
        ARREGION => m_axi_ifc2_ARREGION,
        ARUSER => m_axi_ifc2_ARUSER,
        RVALID => m_axi_ifc2_RVALID,
        RREADY => m_axi_ifc2_RREADY,
        RDATA => m_axi_ifc2_RDATA,
        RLAST => m_axi_ifc2_RLAST,
        RID => m_axi_ifc2_RID,
        RUSER => m_axi_ifc2_RUSER,
        RRESP => m_axi_ifc2_RRESP,
        BVALID => m_axi_ifc2_BVALID,
        BREADY => m_axi_ifc2_BREADY,
        BRESP => m_axi_ifc2_BRESP,
        BID => m_axi_ifc2_BID,
        BUSER => m_axi_ifc2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ReadFromMem_U0_m_axi_ifc2_ARVALID,
        I_ARREADY => ifc2_ARREADY,
        I_ARADDR => ReadFromMem_U0_m_axi_ifc2_ARADDR,
        I_ARID => ReadFromMem_U0_m_axi_ifc2_ARID,
        I_ARLEN => ReadFromMem_U0_m_axi_ifc2_ARLEN,
        I_ARSIZE => ReadFromMem_U0_m_axi_ifc2_ARSIZE,
        I_ARLOCK => ReadFromMem_U0_m_axi_ifc2_ARLOCK,
        I_ARCACHE => ReadFromMem_U0_m_axi_ifc2_ARCACHE,
        I_ARQOS => ReadFromMem_U0_m_axi_ifc2_ARQOS,
        I_ARPROT => ReadFromMem_U0_m_axi_ifc2_ARPROT,
        I_ARUSER => ReadFromMem_U0_m_axi_ifc2_ARUSER,
        I_ARBURST => ReadFromMem_U0_m_axi_ifc2_ARBURST,
        I_ARREGION => ReadFromMem_U0_m_axi_ifc2_ARREGION,
        I_RVALID => ifc2_RVALID,
        I_RREADY => ReadFromMem_U0_m_axi_ifc2_RREADY,
        I_RDATA => ifc2_RDATA,
        I_RID => ifc2_RID,
        I_RUSER => ifc2_RUSER,
        I_RRESP => ifc2_RRESP,
        I_RLAST => ifc2_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => ifc2_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => ifc2_WREADY,
        I_WDATA => ap_const_lv128_lc_1,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv16_0,
        I_BVALID => ifc2_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => ifc2_BRESP,
        I_BID => ifc2_BID,
        I_BUSER => ifc2_BUSER);

    ifc3_m_axi_U : component LINEAR_ifc3_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 128,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IFC3_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IFC3_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IFC3_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IFC3_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IFC3_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IFC3_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IFC3_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IFC3_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IFC3_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IFC3_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IFC3_CACHE_VALUE)
    port map (
        AWVALID => m_axi_ifc3_AWVALID,
        AWREADY => m_axi_ifc3_AWREADY,
        AWADDR => m_axi_ifc3_AWADDR,
        AWID => m_axi_ifc3_AWID,
        AWLEN => m_axi_ifc3_AWLEN,
        AWSIZE => m_axi_ifc3_AWSIZE,
        AWBURST => m_axi_ifc3_AWBURST,
        AWLOCK => m_axi_ifc3_AWLOCK,
        AWCACHE => m_axi_ifc3_AWCACHE,
        AWPROT => m_axi_ifc3_AWPROT,
        AWQOS => m_axi_ifc3_AWQOS,
        AWREGION => m_axi_ifc3_AWREGION,
        AWUSER => m_axi_ifc3_AWUSER,
        WVALID => m_axi_ifc3_WVALID,
        WREADY => m_axi_ifc3_WREADY,
        WDATA => m_axi_ifc3_WDATA,
        WSTRB => m_axi_ifc3_WSTRB,
        WLAST => m_axi_ifc3_WLAST,
        WID => m_axi_ifc3_WID,
        WUSER => m_axi_ifc3_WUSER,
        ARVALID => m_axi_ifc3_ARVALID,
        ARREADY => m_axi_ifc3_ARREADY,
        ARADDR => m_axi_ifc3_ARADDR,
        ARID => m_axi_ifc3_ARID,
        ARLEN => m_axi_ifc3_ARLEN,
        ARSIZE => m_axi_ifc3_ARSIZE,
        ARBURST => m_axi_ifc3_ARBURST,
        ARLOCK => m_axi_ifc3_ARLOCK,
        ARCACHE => m_axi_ifc3_ARCACHE,
        ARPROT => m_axi_ifc3_ARPROT,
        ARQOS => m_axi_ifc3_ARQOS,
        ARREGION => m_axi_ifc3_ARREGION,
        ARUSER => m_axi_ifc3_ARUSER,
        RVALID => m_axi_ifc3_RVALID,
        RREADY => m_axi_ifc3_RREADY,
        RDATA => m_axi_ifc3_RDATA,
        RLAST => m_axi_ifc3_RLAST,
        RID => m_axi_ifc3_RID,
        RUSER => m_axi_ifc3_RUSER,
        RRESP => m_axi_ifc3_RRESP,
        BVALID => m_axi_ifc3_BVALID,
        BREADY => m_axi_ifc3_BREADY,
        BRESP => m_axi_ifc3_BRESP,
        BID => m_axi_ifc3_BID,
        BUSER => m_axi_ifc3_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ReadFromMem_U0_m_axi_ifc3_ARVALID,
        I_ARREADY => ifc3_ARREADY,
        I_ARADDR => ReadFromMem_U0_m_axi_ifc3_ARADDR,
        I_ARID => ReadFromMem_U0_m_axi_ifc3_ARID,
        I_ARLEN => ReadFromMem_U0_m_axi_ifc3_ARLEN,
        I_ARSIZE => ReadFromMem_U0_m_axi_ifc3_ARSIZE,
        I_ARLOCK => ReadFromMem_U0_m_axi_ifc3_ARLOCK,
        I_ARCACHE => ReadFromMem_U0_m_axi_ifc3_ARCACHE,
        I_ARQOS => ReadFromMem_U0_m_axi_ifc3_ARQOS,
        I_ARPROT => ReadFromMem_U0_m_axi_ifc3_ARPROT,
        I_ARUSER => ReadFromMem_U0_m_axi_ifc3_ARUSER,
        I_ARBURST => ReadFromMem_U0_m_axi_ifc3_ARBURST,
        I_ARREGION => ReadFromMem_U0_m_axi_ifc3_ARREGION,
        I_RVALID => ifc3_RVALID,
        I_RREADY => ReadFromMem_U0_m_axi_ifc3_RREADY,
        I_RDATA => ifc3_RDATA,
        I_RID => ifc3_RID,
        I_RUSER => ifc3_RUSER,
        I_RRESP => ifc3_RRESP,
        I_RLAST => ifc3_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => ifc3_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => ifc3_WREADY,
        I_WDATA => ap_const_lv128_lc_1,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv16_0,
        I_BVALID => ifc3_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => ifc3_BRESP,
        I_BID => ifc3_BID,
        I_BUSER => ifc3_BUSER);

    ifc4_m_axi_U : component LINEAR_ifc4_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 128,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IFC4_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IFC4_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IFC4_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IFC4_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IFC4_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IFC4_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IFC4_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IFC4_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IFC4_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IFC4_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IFC4_CACHE_VALUE)
    port map (
        AWVALID => m_axi_ifc4_AWVALID,
        AWREADY => m_axi_ifc4_AWREADY,
        AWADDR => m_axi_ifc4_AWADDR,
        AWID => m_axi_ifc4_AWID,
        AWLEN => m_axi_ifc4_AWLEN,
        AWSIZE => m_axi_ifc4_AWSIZE,
        AWBURST => m_axi_ifc4_AWBURST,
        AWLOCK => m_axi_ifc4_AWLOCK,
        AWCACHE => m_axi_ifc4_AWCACHE,
        AWPROT => m_axi_ifc4_AWPROT,
        AWQOS => m_axi_ifc4_AWQOS,
        AWREGION => m_axi_ifc4_AWREGION,
        AWUSER => m_axi_ifc4_AWUSER,
        WVALID => m_axi_ifc4_WVALID,
        WREADY => m_axi_ifc4_WREADY,
        WDATA => m_axi_ifc4_WDATA,
        WSTRB => m_axi_ifc4_WSTRB,
        WLAST => m_axi_ifc4_WLAST,
        WID => m_axi_ifc4_WID,
        WUSER => m_axi_ifc4_WUSER,
        ARVALID => m_axi_ifc4_ARVALID,
        ARREADY => m_axi_ifc4_ARREADY,
        ARADDR => m_axi_ifc4_ARADDR,
        ARID => m_axi_ifc4_ARID,
        ARLEN => m_axi_ifc4_ARLEN,
        ARSIZE => m_axi_ifc4_ARSIZE,
        ARBURST => m_axi_ifc4_ARBURST,
        ARLOCK => m_axi_ifc4_ARLOCK,
        ARCACHE => m_axi_ifc4_ARCACHE,
        ARPROT => m_axi_ifc4_ARPROT,
        ARQOS => m_axi_ifc4_ARQOS,
        ARREGION => m_axi_ifc4_ARREGION,
        ARUSER => m_axi_ifc4_ARUSER,
        RVALID => m_axi_ifc4_RVALID,
        RREADY => m_axi_ifc4_RREADY,
        RDATA => m_axi_ifc4_RDATA,
        RLAST => m_axi_ifc4_RLAST,
        RID => m_axi_ifc4_RID,
        RUSER => m_axi_ifc4_RUSER,
        RRESP => m_axi_ifc4_RRESP,
        BVALID => m_axi_ifc4_BVALID,
        BREADY => m_axi_ifc4_BREADY,
        BRESP => m_axi_ifc4_BRESP,
        BID => m_axi_ifc4_BID,
        BUSER => m_axi_ifc4_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ReadFromMem_U0_m_axi_ifc4_ARVALID,
        I_ARREADY => ifc4_ARREADY,
        I_ARADDR => ReadFromMem_U0_m_axi_ifc4_ARADDR,
        I_ARID => ReadFromMem_U0_m_axi_ifc4_ARID,
        I_ARLEN => ReadFromMem_U0_m_axi_ifc4_ARLEN,
        I_ARSIZE => ReadFromMem_U0_m_axi_ifc4_ARSIZE,
        I_ARLOCK => ReadFromMem_U0_m_axi_ifc4_ARLOCK,
        I_ARCACHE => ReadFromMem_U0_m_axi_ifc4_ARCACHE,
        I_ARQOS => ReadFromMem_U0_m_axi_ifc4_ARQOS,
        I_ARPROT => ReadFromMem_U0_m_axi_ifc4_ARPROT,
        I_ARUSER => ReadFromMem_U0_m_axi_ifc4_ARUSER,
        I_ARBURST => ReadFromMem_U0_m_axi_ifc4_ARBURST,
        I_ARREGION => ReadFromMem_U0_m_axi_ifc4_ARREGION,
        I_RVALID => ifc4_RVALID,
        I_RREADY => ReadFromMem_U0_m_axi_ifc4_RREADY,
        I_RDATA => ifc4_RDATA,
        I_RID => ifc4_RID,
        I_RUSER => ifc4_RUSER,
        I_RRESP => ifc4_RRESP,
        I_RLAST => ifc4_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => ifc4_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => ifc4_WREADY,
        I_WDATA => ap_const_lv128_lc_1,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv16_0,
        I_BVALID => ifc4_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => ifc4_BRESP,
        I_BID => ifc4_BID,
        I_BUSER => ifc4_BUSER);

    ifc5_m_axi_U : component LINEAR_ifc5_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 128,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IFC5_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IFC5_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IFC5_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IFC5_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IFC5_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IFC5_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IFC5_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IFC5_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IFC5_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IFC5_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IFC5_CACHE_VALUE)
    port map (
        AWVALID => m_axi_ifc5_AWVALID,
        AWREADY => m_axi_ifc5_AWREADY,
        AWADDR => m_axi_ifc5_AWADDR,
        AWID => m_axi_ifc5_AWID,
        AWLEN => m_axi_ifc5_AWLEN,
        AWSIZE => m_axi_ifc5_AWSIZE,
        AWBURST => m_axi_ifc5_AWBURST,
        AWLOCK => m_axi_ifc5_AWLOCK,
        AWCACHE => m_axi_ifc5_AWCACHE,
        AWPROT => m_axi_ifc5_AWPROT,
        AWQOS => m_axi_ifc5_AWQOS,
        AWREGION => m_axi_ifc5_AWREGION,
        AWUSER => m_axi_ifc5_AWUSER,
        WVALID => m_axi_ifc5_WVALID,
        WREADY => m_axi_ifc5_WREADY,
        WDATA => m_axi_ifc5_WDATA,
        WSTRB => m_axi_ifc5_WSTRB,
        WLAST => m_axi_ifc5_WLAST,
        WID => m_axi_ifc5_WID,
        WUSER => m_axi_ifc5_WUSER,
        ARVALID => m_axi_ifc5_ARVALID,
        ARREADY => m_axi_ifc5_ARREADY,
        ARADDR => m_axi_ifc5_ARADDR,
        ARID => m_axi_ifc5_ARID,
        ARLEN => m_axi_ifc5_ARLEN,
        ARSIZE => m_axi_ifc5_ARSIZE,
        ARBURST => m_axi_ifc5_ARBURST,
        ARLOCK => m_axi_ifc5_ARLOCK,
        ARCACHE => m_axi_ifc5_ARCACHE,
        ARPROT => m_axi_ifc5_ARPROT,
        ARQOS => m_axi_ifc5_ARQOS,
        ARREGION => m_axi_ifc5_ARREGION,
        ARUSER => m_axi_ifc5_ARUSER,
        RVALID => m_axi_ifc5_RVALID,
        RREADY => m_axi_ifc5_RREADY,
        RDATA => m_axi_ifc5_RDATA,
        RLAST => m_axi_ifc5_RLAST,
        RID => m_axi_ifc5_RID,
        RUSER => m_axi_ifc5_RUSER,
        RRESP => m_axi_ifc5_RRESP,
        BVALID => m_axi_ifc5_BVALID,
        BREADY => m_axi_ifc5_BREADY,
        BRESP => m_axi_ifc5_BRESP,
        BID => m_axi_ifc5_BID,
        BUSER => m_axi_ifc5_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ReadFromMem_U0_m_axi_ifc5_ARVALID,
        I_ARREADY => ifc5_ARREADY,
        I_ARADDR => ReadFromMem_U0_m_axi_ifc5_ARADDR,
        I_ARID => ReadFromMem_U0_m_axi_ifc5_ARID,
        I_ARLEN => ReadFromMem_U0_m_axi_ifc5_ARLEN,
        I_ARSIZE => ReadFromMem_U0_m_axi_ifc5_ARSIZE,
        I_ARLOCK => ReadFromMem_U0_m_axi_ifc5_ARLOCK,
        I_ARCACHE => ReadFromMem_U0_m_axi_ifc5_ARCACHE,
        I_ARQOS => ReadFromMem_U0_m_axi_ifc5_ARQOS,
        I_ARPROT => ReadFromMem_U0_m_axi_ifc5_ARPROT,
        I_ARUSER => ReadFromMem_U0_m_axi_ifc5_ARUSER,
        I_ARBURST => ReadFromMem_U0_m_axi_ifc5_ARBURST,
        I_ARREGION => ReadFromMem_U0_m_axi_ifc5_ARREGION,
        I_RVALID => ifc5_RVALID,
        I_RREADY => ReadFromMem_U0_m_axi_ifc5_RREADY,
        I_RDATA => ifc5_RDATA,
        I_RID => ifc5_RID,
        I_RUSER => ifc5_RUSER,
        I_RRESP => ifc5_RRESP,
        I_RLAST => ifc5_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => ifc5_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => ifc5_WREADY,
        I_WDATA => ap_const_lv128_lc_1,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv16_0,
        I_BVALID => ifc5_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => ifc5_BRESP,
        I_BID => ifc5_BID,
        I_BUSER => ifc5_BUSER);

    ifc6_m_axi_U : component LINEAR_ifc6_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 128,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IFC6_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IFC6_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IFC6_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IFC6_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IFC6_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IFC6_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IFC6_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IFC6_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IFC6_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IFC6_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IFC6_CACHE_VALUE)
    port map (
        AWVALID => m_axi_ifc6_AWVALID,
        AWREADY => m_axi_ifc6_AWREADY,
        AWADDR => m_axi_ifc6_AWADDR,
        AWID => m_axi_ifc6_AWID,
        AWLEN => m_axi_ifc6_AWLEN,
        AWSIZE => m_axi_ifc6_AWSIZE,
        AWBURST => m_axi_ifc6_AWBURST,
        AWLOCK => m_axi_ifc6_AWLOCK,
        AWCACHE => m_axi_ifc6_AWCACHE,
        AWPROT => m_axi_ifc6_AWPROT,
        AWQOS => m_axi_ifc6_AWQOS,
        AWREGION => m_axi_ifc6_AWREGION,
        AWUSER => m_axi_ifc6_AWUSER,
        WVALID => m_axi_ifc6_WVALID,
        WREADY => m_axi_ifc6_WREADY,
        WDATA => m_axi_ifc6_WDATA,
        WSTRB => m_axi_ifc6_WSTRB,
        WLAST => m_axi_ifc6_WLAST,
        WID => m_axi_ifc6_WID,
        WUSER => m_axi_ifc6_WUSER,
        ARVALID => m_axi_ifc6_ARVALID,
        ARREADY => m_axi_ifc6_ARREADY,
        ARADDR => m_axi_ifc6_ARADDR,
        ARID => m_axi_ifc6_ARID,
        ARLEN => m_axi_ifc6_ARLEN,
        ARSIZE => m_axi_ifc6_ARSIZE,
        ARBURST => m_axi_ifc6_ARBURST,
        ARLOCK => m_axi_ifc6_ARLOCK,
        ARCACHE => m_axi_ifc6_ARCACHE,
        ARPROT => m_axi_ifc6_ARPROT,
        ARQOS => m_axi_ifc6_ARQOS,
        ARREGION => m_axi_ifc6_ARREGION,
        ARUSER => m_axi_ifc6_ARUSER,
        RVALID => m_axi_ifc6_RVALID,
        RREADY => m_axi_ifc6_RREADY,
        RDATA => m_axi_ifc6_RDATA,
        RLAST => m_axi_ifc6_RLAST,
        RID => m_axi_ifc6_RID,
        RUSER => m_axi_ifc6_RUSER,
        RRESP => m_axi_ifc6_RRESP,
        BVALID => m_axi_ifc6_BVALID,
        BREADY => m_axi_ifc6_BREADY,
        BRESP => m_axi_ifc6_BRESP,
        BID => m_axi_ifc6_BID,
        BUSER => m_axi_ifc6_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ReadFromMem_U0_m_axi_ifc6_ARVALID,
        I_ARREADY => ifc6_ARREADY,
        I_ARADDR => ReadFromMem_U0_m_axi_ifc6_ARADDR,
        I_ARID => ReadFromMem_U0_m_axi_ifc6_ARID,
        I_ARLEN => ReadFromMem_U0_m_axi_ifc6_ARLEN,
        I_ARSIZE => ReadFromMem_U0_m_axi_ifc6_ARSIZE,
        I_ARLOCK => ReadFromMem_U0_m_axi_ifc6_ARLOCK,
        I_ARCACHE => ReadFromMem_U0_m_axi_ifc6_ARCACHE,
        I_ARQOS => ReadFromMem_U0_m_axi_ifc6_ARQOS,
        I_ARPROT => ReadFromMem_U0_m_axi_ifc6_ARPROT,
        I_ARUSER => ReadFromMem_U0_m_axi_ifc6_ARUSER,
        I_ARBURST => ReadFromMem_U0_m_axi_ifc6_ARBURST,
        I_ARREGION => ReadFromMem_U0_m_axi_ifc6_ARREGION,
        I_RVALID => ifc6_RVALID,
        I_RREADY => ReadFromMem_U0_m_axi_ifc6_RREADY,
        I_RDATA => ifc6_RDATA,
        I_RID => ifc6_RID,
        I_RUSER => ifc6_RUSER,
        I_RRESP => ifc6_RRESP,
        I_RLAST => ifc6_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => ifc6_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => ifc6_WREADY,
        I_WDATA => ap_const_lv128_lc_1,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv16_0,
        I_BVALID => ifc6_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => ifc6_BRESP,
        I_BID => ifc6_BID,
        I_BUSER => ifc6_BUSER);

    entry_proc_U0 : component LINEAR_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => entry_proc_U0_ap_start,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        ifc7 => ifc7,
        ap_return => entry_proc_U0_ap_return);

    Block_split10_proc_U0 : component LINEAR_Block_split10_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_split10_proc_U0_ap_start,
        ap_done => Block_split10_proc_U0_ap_done,
        ap_continue => Block_split10_proc_U0_ap_continue,
        ap_idle => Block_split10_proc_U0_ap_idle,
        ap_ready => Block_split10_proc_U0_ap_ready,
        Wt_X => Wt_X,
        Wt_Y => Wt_Y,
        ap_return_0 => Block_split10_proc_U0_ap_return_0,
        ap_return_1 => Block_split10_proc_U0_ap_return_1);

    ReadFromMem_U0 : component LINEAR_ReadFromMem
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ReadFromMem_U0_ap_start,
        ap_done => ReadFromMem_U0_ap_done,
        ap_continue => ReadFromMem_U0_ap_continue,
        ap_idle => ReadFromMem_U0_ap_idle,
        ap_ready => ReadFromMem_U0_ap_ready,
        m_axi_ifc1_AWVALID => ReadFromMem_U0_m_axi_ifc1_AWVALID,
        m_axi_ifc1_AWREADY => ap_const_logic_0,
        m_axi_ifc1_AWADDR => ReadFromMem_U0_m_axi_ifc1_AWADDR,
        m_axi_ifc1_AWID => ReadFromMem_U0_m_axi_ifc1_AWID,
        m_axi_ifc1_AWLEN => ReadFromMem_U0_m_axi_ifc1_AWLEN,
        m_axi_ifc1_AWSIZE => ReadFromMem_U0_m_axi_ifc1_AWSIZE,
        m_axi_ifc1_AWBURST => ReadFromMem_U0_m_axi_ifc1_AWBURST,
        m_axi_ifc1_AWLOCK => ReadFromMem_U0_m_axi_ifc1_AWLOCK,
        m_axi_ifc1_AWCACHE => ReadFromMem_U0_m_axi_ifc1_AWCACHE,
        m_axi_ifc1_AWPROT => ReadFromMem_U0_m_axi_ifc1_AWPROT,
        m_axi_ifc1_AWQOS => ReadFromMem_U0_m_axi_ifc1_AWQOS,
        m_axi_ifc1_AWREGION => ReadFromMem_U0_m_axi_ifc1_AWREGION,
        m_axi_ifc1_AWUSER => ReadFromMem_U0_m_axi_ifc1_AWUSER,
        m_axi_ifc1_WVALID => ReadFromMem_U0_m_axi_ifc1_WVALID,
        m_axi_ifc1_WREADY => ap_const_logic_0,
        m_axi_ifc1_WDATA => ReadFromMem_U0_m_axi_ifc1_WDATA,
        m_axi_ifc1_WSTRB => ReadFromMem_U0_m_axi_ifc1_WSTRB,
        m_axi_ifc1_WLAST => ReadFromMem_U0_m_axi_ifc1_WLAST,
        m_axi_ifc1_WID => ReadFromMem_U0_m_axi_ifc1_WID,
        m_axi_ifc1_WUSER => ReadFromMem_U0_m_axi_ifc1_WUSER,
        m_axi_ifc1_ARVALID => ReadFromMem_U0_m_axi_ifc1_ARVALID,
        m_axi_ifc1_ARREADY => ifc1_ARREADY,
        m_axi_ifc1_ARADDR => ReadFromMem_U0_m_axi_ifc1_ARADDR,
        m_axi_ifc1_ARID => ReadFromMem_U0_m_axi_ifc1_ARID,
        m_axi_ifc1_ARLEN => ReadFromMem_U0_m_axi_ifc1_ARLEN,
        m_axi_ifc1_ARSIZE => ReadFromMem_U0_m_axi_ifc1_ARSIZE,
        m_axi_ifc1_ARBURST => ReadFromMem_U0_m_axi_ifc1_ARBURST,
        m_axi_ifc1_ARLOCK => ReadFromMem_U0_m_axi_ifc1_ARLOCK,
        m_axi_ifc1_ARCACHE => ReadFromMem_U0_m_axi_ifc1_ARCACHE,
        m_axi_ifc1_ARPROT => ReadFromMem_U0_m_axi_ifc1_ARPROT,
        m_axi_ifc1_ARQOS => ReadFromMem_U0_m_axi_ifc1_ARQOS,
        m_axi_ifc1_ARREGION => ReadFromMem_U0_m_axi_ifc1_ARREGION,
        m_axi_ifc1_ARUSER => ReadFromMem_U0_m_axi_ifc1_ARUSER,
        m_axi_ifc1_RVALID => ifc1_RVALID,
        m_axi_ifc1_RREADY => ReadFromMem_U0_m_axi_ifc1_RREADY,
        m_axi_ifc1_RDATA => ifc1_RDATA,
        m_axi_ifc1_RLAST => ifc1_RLAST,
        m_axi_ifc1_RID => ifc1_RID,
        m_axi_ifc1_RUSER => ifc1_RUSER,
        m_axi_ifc1_RRESP => ifc1_RRESP,
        m_axi_ifc1_BVALID => ap_const_logic_0,
        m_axi_ifc1_BREADY => ReadFromMem_U0_m_axi_ifc1_BREADY,
        m_axi_ifc1_BRESP => ap_const_lv2_0,
        m_axi_ifc1_BID => ap_const_lv1_0,
        m_axi_ifc1_BUSER => ap_const_lv1_0,
        ifc11 => ifc1_offset,
        m_axi_ifc2_AWVALID => ReadFromMem_U0_m_axi_ifc2_AWVALID,
        m_axi_ifc2_AWREADY => ap_const_logic_0,
        m_axi_ifc2_AWADDR => ReadFromMem_U0_m_axi_ifc2_AWADDR,
        m_axi_ifc2_AWID => ReadFromMem_U0_m_axi_ifc2_AWID,
        m_axi_ifc2_AWLEN => ReadFromMem_U0_m_axi_ifc2_AWLEN,
        m_axi_ifc2_AWSIZE => ReadFromMem_U0_m_axi_ifc2_AWSIZE,
        m_axi_ifc2_AWBURST => ReadFromMem_U0_m_axi_ifc2_AWBURST,
        m_axi_ifc2_AWLOCK => ReadFromMem_U0_m_axi_ifc2_AWLOCK,
        m_axi_ifc2_AWCACHE => ReadFromMem_U0_m_axi_ifc2_AWCACHE,
        m_axi_ifc2_AWPROT => ReadFromMem_U0_m_axi_ifc2_AWPROT,
        m_axi_ifc2_AWQOS => ReadFromMem_U0_m_axi_ifc2_AWQOS,
        m_axi_ifc2_AWREGION => ReadFromMem_U0_m_axi_ifc2_AWREGION,
        m_axi_ifc2_AWUSER => ReadFromMem_U0_m_axi_ifc2_AWUSER,
        m_axi_ifc2_WVALID => ReadFromMem_U0_m_axi_ifc2_WVALID,
        m_axi_ifc2_WREADY => ap_const_logic_0,
        m_axi_ifc2_WDATA => ReadFromMem_U0_m_axi_ifc2_WDATA,
        m_axi_ifc2_WSTRB => ReadFromMem_U0_m_axi_ifc2_WSTRB,
        m_axi_ifc2_WLAST => ReadFromMem_U0_m_axi_ifc2_WLAST,
        m_axi_ifc2_WID => ReadFromMem_U0_m_axi_ifc2_WID,
        m_axi_ifc2_WUSER => ReadFromMem_U0_m_axi_ifc2_WUSER,
        m_axi_ifc2_ARVALID => ReadFromMem_U0_m_axi_ifc2_ARVALID,
        m_axi_ifc2_ARREADY => ifc2_ARREADY,
        m_axi_ifc2_ARADDR => ReadFromMem_U0_m_axi_ifc2_ARADDR,
        m_axi_ifc2_ARID => ReadFromMem_U0_m_axi_ifc2_ARID,
        m_axi_ifc2_ARLEN => ReadFromMem_U0_m_axi_ifc2_ARLEN,
        m_axi_ifc2_ARSIZE => ReadFromMem_U0_m_axi_ifc2_ARSIZE,
        m_axi_ifc2_ARBURST => ReadFromMem_U0_m_axi_ifc2_ARBURST,
        m_axi_ifc2_ARLOCK => ReadFromMem_U0_m_axi_ifc2_ARLOCK,
        m_axi_ifc2_ARCACHE => ReadFromMem_U0_m_axi_ifc2_ARCACHE,
        m_axi_ifc2_ARPROT => ReadFromMem_U0_m_axi_ifc2_ARPROT,
        m_axi_ifc2_ARQOS => ReadFromMem_U0_m_axi_ifc2_ARQOS,
        m_axi_ifc2_ARREGION => ReadFromMem_U0_m_axi_ifc2_ARREGION,
        m_axi_ifc2_ARUSER => ReadFromMem_U0_m_axi_ifc2_ARUSER,
        m_axi_ifc2_RVALID => ifc2_RVALID,
        m_axi_ifc2_RREADY => ReadFromMem_U0_m_axi_ifc2_RREADY,
        m_axi_ifc2_RDATA => ifc2_RDATA,
        m_axi_ifc2_RLAST => ifc2_RLAST,
        m_axi_ifc2_RID => ifc2_RID,
        m_axi_ifc2_RUSER => ifc2_RUSER,
        m_axi_ifc2_RRESP => ifc2_RRESP,
        m_axi_ifc2_BVALID => ap_const_logic_0,
        m_axi_ifc2_BREADY => ReadFromMem_U0_m_axi_ifc2_BREADY,
        m_axi_ifc2_BRESP => ap_const_lv2_0,
        m_axi_ifc2_BID => ap_const_lv1_0,
        m_axi_ifc2_BUSER => ap_const_lv1_0,
        ifc22 => ifc2_offset,
        m_axi_ifc3_AWVALID => ReadFromMem_U0_m_axi_ifc3_AWVALID,
        m_axi_ifc3_AWREADY => ap_const_logic_0,
        m_axi_ifc3_AWADDR => ReadFromMem_U0_m_axi_ifc3_AWADDR,
        m_axi_ifc3_AWID => ReadFromMem_U0_m_axi_ifc3_AWID,
        m_axi_ifc3_AWLEN => ReadFromMem_U0_m_axi_ifc3_AWLEN,
        m_axi_ifc3_AWSIZE => ReadFromMem_U0_m_axi_ifc3_AWSIZE,
        m_axi_ifc3_AWBURST => ReadFromMem_U0_m_axi_ifc3_AWBURST,
        m_axi_ifc3_AWLOCK => ReadFromMem_U0_m_axi_ifc3_AWLOCK,
        m_axi_ifc3_AWCACHE => ReadFromMem_U0_m_axi_ifc3_AWCACHE,
        m_axi_ifc3_AWPROT => ReadFromMem_U0_m_axi_ifc3_AWPROT,
        m_axi_ifc3_AWQOS => ReadFromMem_U0_m_axi_ifc3_AWQOS,
        m_axi_ifc3_AWREGION => ReadFromMem_U0_m_axi_ifc3_AWREGION,
        m_axi_ifc3_AWUSER => ReadFromMem_U0_m_axi_ifc3_AWUSER,
        m_axi_ifc3_WVALID => ReadFromMem_U0_m_axi_ifc3_WVALID,
        m_axi_ifc3_WREADY => ap_const_logic_0,
        m_axi_ifc3_WDATA => ReadFromMem_U0_m_axi_ifc3_WDATA,
        m_axi_ifc3_WSTRB => ReadFromMem_U0_m_axi_ifc3_WSTRB,
        m_axi_ifc3_WLAST => ReadFromMem_U0_m_axi_ifc3_WLAST,
        m_axi_ifc3_WID => ReadFromMem_U0_m_axi_ifc3_WID,
        m_axi_ifc3_WUSER => ReadFromMem_U0_m_axi_ifc3_WUSER,
        m_axi_ifc3_ARVALID => ReadFromMem_U0_m_axi_ifc3_ARVALID,
        m_axi_ifc3_ARREADY => ifc3_ARREADY,
        m_axi_ifc3_ARADDR => ReadFromMem_U0_m_axi_ifc3_ARADDR,
        m_axi_ifc3_ARID => ReadFromMem_U0_m_axi_ifc3_ARID,
        m_axi_ifc3_ARLEN => ReadFromMem_U0_m_axi_ifc3_ARLEN,
        m_axi_ifc3_ARSIZE => ReadFromMem_U0_m_axi_ifc3_ARSIZE,
        m_axi_ifc3_ARBURST => ReadFromMem_U0_m_axi_ifc3_ARBURST,
        m_axi_ifc3_ARLOCK => ReadFromMem_U0_m_axi_ifc3_ARLOCK,
        m_axi_ifc3_ARCACHE => ReadFromMem_U0_m_axi_ifc3_ARCACHE,
        m_axi_ifc3_ARPROT => ReadFromMem_U0_m_axi_ifc3_ARPROT,
        m_axi_ifc3_ARQOS => ReadFromMem_U0_m_axi_ifc3_ARQOS,
        m_axi_ifc3_ARREGION => ReadFromMem_U0_m_axi_ifc3_ARREGION,
        m_axi_ifc3_ARUSER => ReadFromMem_U0_m_axi_ifc3_ARUSER,
        m_axi_ifc3_RVALID => ifc3_RVALID,
        m_axi_ifc3_RREADY => ReadFromMem_U0_m_axi_ifc3_RREADY,
        m_axi_ifc3_RDATA => ifc3_RDATA,
        m_axi_ifc3_RLAST => ifc3_RLAST,
        m_axi_ifc3_RID => ifc3_RID,
        m_axi_ifc3_RUSER => ifc3_RUSER,
        m_axi_ifc3_RRESP => ifc3_RRESP,
        m_axi_ifc3_BVALID => ap_const_logic_0,
        m_axi_ifc3_BREADY => ReadFromMem_U0_m_axi_ifc3_BREADY,
        m_axi_ifc3_BRESP => ap_const_lv2_0,
        m_axi_ifc3_BID => ap_const_lv1_0,
        m_axi_ifc3_BUSER => ap_const_lv1_0,
        ifc33 => ifc3_offset,
        m_axi_ifc4_AWVALID => ReadFromMem_U0_m_axi_ifc4_AWVALID,
        m_axi_ifc4_AWREADY => ap_const_logic_0,
        m_axi_ifc4_AWADDR => ReadFromMem_U0_m_axi_ifc4_AWADDR,
        m_axi_ifc4_AWID => ReadFromMem_U0_m_axi_ifc4_AWID,
        m_axi_ifc4_AWLEN => ReadFromMem_U0_m_axi_ifc4_AWLEN,
        m_axi_ifc4_AWSIZE => ReadFromMem_U0_m_axi_ifc4_AWSIZE,
        m_axi_ifc4_AWBURST => ReadFromMem_U0_m_axi_ifc4_AWBURST,
        m_axi_ifc4_AWLOCK => ReadFromMem_U0_m_axi_ifc4_AWLOCK,
        m_axi_ifc4_AWCACHE => ReadFromMem_U0_m_axi_ifc4_AWCACHE,
        m_axi_ifc4_AWPROT => ReadFromMem_U0_m_axi_ifc4_AWPROT,
        m_axi_ifc4_AWQOS => ReadFromMem_U0_m_axi_ifc4_AWQOS,
        m_axi_ifc4_AWREGION => ReadFromMem_U0_m_axi_ifc4_AWREGION,
        m_axi_ifc4_AWUSER => ReadFromMem_U0_m_axi_ifc4_AWUSER,
        m_axi_ifc4_WVALID => ReadFromMem_U0_m_axi_ifc4_WVALID,
        m_axi_ifc4_WREADY => ap_const_logic_0,
        m_axi_ifc4_WDATA => ReadFromMem_U0_m_axi_ifc4_WDATA,
        m_axi_ifc4_WSTRB => ReadFromMem_U0_m_axi_ifc4_WSTRB,
        m_axi_ifc4_WLAST => ReadFromMem_U0_m_axi_ifc4_WLAST,
        m_axi_ifc4_WID => ReadFromMem_U0_m_axi_ifc4_WID,
        m_axi_ifc4_WUSER => ReadFromMem_U0_m_axi_ifc4_WUSER,
        m_axi_ifc4_ARVALID => ReadFromMem_U0_m_axi_ifc4_ARVALID,
        m_axi_ifc4_ARREADY => ifc4_ARREADY,
        m_axi_ifc4_ARADDR => ReadFromMem_U0_m_axi_ifc4_ARADDR,
        m_axi_ifc4_ARID => ReadFromMem_U0_m_axi_ifc4_ARID,
        m_axi_ifc4_ARLEN => ReadFromMem_U0_m_axi_ifc4_ARLEN,
        m_axi_ifc4_ARSIZE => ReadFromMem_U0_m_axi_ifc4_ARSIZE,
        m_axi_ifc4_ARBURST => ReadFromMem_U0_m_axi_ifc4_ARBURST,
        m_axi_ifc4_ARLOCK => ReadFromMem_U0_m_axi_ifc4_ARLOCK,
        m_axi_ifc4_ARCACHE => ReadFromMem_U0_m_axi_ifc4_ARCACHE,
        m_axi_ifc4_ARPROT => ReadFromMem_U0_m_axi_ifc4_ARPROT,
        m_axi_ifc4_ARQOS => ReadFromMem_U0_m_axi_ifc4_ARQOS,
        m_axi_ifc4_ARREGION => ReadFromMem_U0_m_axi_ifc4_ARREGION,
        m_axi_ifc4_ARUSER => ReadFromMem_U0_m_axi_ifc4_ARUSER,
        m_axi_ifc4_RVALID => ifc4_RVALID,
        m_axi_ifc4_RREADY => ReadFromMem_U0_m_axi_ifc4_RREADY,
        m_axi_ifc4_RDATA => ifc4_RDATA,
        m_axi_ifc4_RLAST => ifc4_RLAST,
        m_axi_ifc4_RID => ifc4_RID,
        m_axi_ifc4_RUSER => ifc4_RUSER,
        m_axi_ifc4_RRESP => ifc4_RRESP,
        m_axi_ifc4_BVALID => ap_const_logic_0,
        m_axi_ifc4_BREADY => ReadFromMem_U0_m_axi_ifc4_BREADY,
        m_axi_ifc4_BRESP => ap_const_lv2_0,
        m_axi_ifc4_BID => ap_const_lv1_0,
        m_axi_ifc4_BUSER => ap_const_lv1_0,
        ifc44 => ifc4_offset,
        m_axi_ifc5_AWVALID => ReadFromMem_U0_m_axi_ifc5_AWVALID,
        m_axi_ifc5_AWREADY => ap_const_logic_0,
        m_axi_ifc5_AWADDR => ReadFromMem_U0_m_axi_ifc5_AWADDR,
        m_axi_ifc5_AWID => ReadFromMem_U0_m_axi_ifc5_AWID,
        m_axi_ifc5_AWLEN => ReadFromMem_U0_m_axi_ifc5_AWLEN,
        m_axi_ifc5_AWSIZE => ReadFromMem_U0_m_axi_ifc5_AWSIZE,
        m_axi_ifc5_AWBURST => ReadFromMem_U0_m_axi_ifc5_AWBURST,
        m_axi_ifc5_AWLOCK => ReadFromMem_U0_m_axi_ifc5_AWLOCK,
        m_axi_ifc5_AWCACHE => ReadFromMem_U0_m_axi_ifc5_AWCACHE,
        m_axi_ifc5_AWPROT => ReadFromMem_U0_m_axi_ifc5_AWPROT,
        m_axi_ifc5_AWQOS => ReadFromMem_U0_m_axi_ifc5_AWQOS,
        m_axi_ifc5_AWREGION => ReadFromMem_U0_m_axi_ifc5_AWREGION,
        m_axi_ifc5_AWUSER => ReadFromMem_U0_m_axi_ifc5_AWUSER,
        m_axi_ifc5_WVALID => ReadFromMem_U0_m_axi_ifc5_WVALID,
        m_axi_ifc5_WREADY => ap_const_logic_0,
        m_axi_ifc5_WDATA => ReadFromMem_U0_m_axi_ifc5_WDATA,
        m_axi_ifc5_WSTRB => ReadFromMem_U0_m_axi_ifc5_WSTRB,
        m_axi_ifc5_WLAST => ReadFromMem_U0_m_axi_ifc5_WLAST,
        m_axi_ifc5_WID => ReadFromMem_U0_m_axi_ifc5_WID,
        m_axi_ifc5_WUSER => ReadFromMem_U0_m_axi_ifc5_WUSER,
        m_axi_ifc5_ARVALID => ReadFromMem_U0_m_axi_ifc5_ARVALID,
        m_axi_ifc5_ARREADY => ifc5_ARREADY,
        m_axi_ifc5_ARADDR => ReadFromMem_U0_m_axi_ifc5_ARADDR,
        m_axi_ifc5_ARID => ReadFromMem_U0_m_axi_ifc5_ARID,
        m_axi_ifc5_ARLEN => ReadFromMem_U0_m_axi_ifc5_ARLEN,
        m_axi_ifc5_ARSIZE => ReadFromMem_U0_m_axi_ifc5_ARSIZE,
        m_axi_ifc5_ARBURST => ReadFromMem_U0_m_axi_ifc5_ARBURST,
        m_axi_ifc5_ARLOCK => ReadFromMem_U0_m_axi_ifc5_ARLOCK,
        m_axi_ifc5_ARCACHE => ReadFromMem_U0_m_axi_ifc5_ARCACHE,
        m_axi_ifc5_ARPROT => ReadFromMem_U0_m_axi_ifc5_ARPROT,
        m_axi_ifc5_ARQOS => ReadFromMem_U0_m_axi_ifc5_ARQOS,
        m_axi_ifc5_ARREGION => ReadFromMem_U0_m_axi_ifc5_ARREGION,
        m_axi_ifc5_ARUSER => ReadFromMem_U0_m_axi_ifc5_ARUSER,
        m_axi_ifc5_RVALID => ifc5_RVALID,
        m_axi_ifc5_RREADY => ReadFromMem_U0_m_axi_ifc5_RREADY,
        m_axi_ifc5_RDATA => ifc5_RDATA,
        m_axi_ifc5_RLAST => ifc5_RLAST,
        m_axi_ifc5_RID => ifc5_RID,
        m_axi_ifc5_RUSER => ifc5_RUSER,
        m_axi_ifc5_RRESP => ifc5_RRESP,
        m_axi_ifc5_BVALID => ap_const_logic_0,
        m_axi_ifc5_BREADY => ReadFromMem_U0_m_axi_ifc5_BREADY,
        m_axi_ifc5_BRESP => ap_const_lv2_0,
        m_axi_ifc5_BID => ap_const_lv1_0,
        m_axi_ifc5_BUSER => ap_const_lv1_0,
        ifc55 => ifc5_offset,
        m_axi_ifc6_AWVALID => ReadFromMem_U0_m_axi_ifc6_AWVALID,
        m_axi_ifc6_AWREADY => ap_const_logic_0,
        m_axi_ifc6_AWADDR => ReadFromMem_U0_m_axi_ifc6_AWADDR,
        m_axi_ifc6_AWID => ReadFromMem_U0_m_axi_ifc6_AWID,
        m_axi_ifc6_AWLEN => ReadFromMem_U0_m_axi_ifc6_AWLEN,
        m_axi_ifc6_AWSIZE => ReadFromMem_U0_m_axi_ifc6_AWSIZE,
        m_axi_ifc6_AWBURST => ReadFromMem_U0_m_axi_ifc6_AWBURST,
        m_axi_ifc6_AWLOCK => ReadFromMem_U0_m_axi_ifc6_AWLOCK,
        m_axi_ifc6_AWCACHE => ReadFromMem_U0_m_axi_ifc6_AWCACHE,
        m_axi_ifc6_AWPROT => ReadFromMem_U0_m_axi_ifc6_AWPROT,
        m_axi_ifc6_AWQOS => ReadFromMem_U0_m_axi_ifc6_AWQOS,
        m_axi_ifc6_AWREGION => ReadFromMem_U0_m_axi_ifc6_AWREGION,
        m_axi_ifc6_AWUSER => ReadFromMem_U0_m_axi_ifc6_AWUSER,
        m_axi_ifc6_WVALID => ReadFromMem_U0_m_axi_ifc6_WVALID,
        m_axi_ifc6_WREADY => ap_const_logic_0,
        m_axi_ifc6_WDATA => ReadFromMem_U0_m_axi_ifc6_WDATA,
        m_axi_ifc6_WSTRB => ReadFromMem_U0_m_axi_ifc6_WSTRB,
        m_axi_ifc6_WLAST => ReadFromMem_U0_m_axi_ifc6_WLAST,
        m_axi_ifc6_WID => ReadFromMem_U0_m_axi_ifc6_WID,
        m_axi_ifc6_WUSER => ReadFromMem_U0_m_axi_ifc6_WUSER,
        m_axi_ifc6_ARVALID => ReadFromMem_U0_m_axi_ifc6_ARVALID,
        m_axi_ifc6_ARREADY => ifc6_ARREADY,
        m_axi_ifc6_ARADDR => ReadFromMem_U0_m_axi_ifc6_ARADDR,
        m_axi_ifc6_ARID => ReadFromMem_U0_m_axi_ifc6_ARID,
        m_axi_ifc6_ARLEN => ReadFromMem_U0_m_axi_ifc6_ARLEN,
        m_axi_ifc6_ARSIZE => ReadFromMem_U0_m_axi_ifc6_ARSIZE,
        m_axi_ifc6_ARBURST => ReadFromMem_U0_m_axi_ifc6_ARBURST,
        m_axi_ifc6_ARLOCK => ReadFromMem_U0_m_axi_ifc6_ARLOCK,
        m_axi_ifc6_ARCACHE => ReadFromMem_U0_m_axi_ifc6_ARCACHE,
        m_axi_ifc6_ARPROT => ReadFromMem_U0_m_axi_ifc6_ARPROT,
        m_axi_ifc6_ARQOS => ReadFromMem_U0_m_axi_ifc6_ARQOS,
        m_axi_ifc6_ARREGION => ReadFromMem_U0_m_axi_ifc6_ARREGION,
        m_axi_ifc6_ARUSER => ReadFromMem_U0_m_axi_ifc6_ARUSER,
        m_axi_ifc6_RVALID => ifc6_RVALID,
        m_axi_ifc6_RREADY => ReadFromMem_U0_m_axi_ifc6_RREADY,
        m_axi_ifc6_RDATA => ifc6_RDATA,
        m_axi_ifc6_RLAST => ifc6_RLAST,
        m_axi_ifc6_RID => ifc6_RID,
        m_axi_ifc6_RUSER => ifc6_RUSER,
        m_axi_ifc6_RRESP => ifc6_RRESP,
        m_axi_ifc6_BVALID => ap_const_logic_0,
        m_axi_ifc6_BREADY => ReadFromMem_U0_m_axi_ifc6_BREADY,
        m_axi_ifc6_BRESP => ap_const_lv2_0,
        m_axi_ifc6_BID => ap_const_lv1_0,
        m_axi_ifc6_BUSER => ap_const_lv1_0,
        ifc66 => ifc6_offset,
        weight_buffer_address0 => ReadFromMem_U0_weight_buffer_address0,
        weight_buffer_ce0 => ReadFromMem_U0_weight_buffer_ce0,
        weight_buffer_we0 => ReadFromMem_U0_weight_buffer_we0,
        weight_buffer_d0 => ReadFromMem_U0_weight_buffer_d0,
        weight_buffer_q0 => weight_buffer_V_0_q0,
        weight_buffer1_address0 => ReadFromMem_U0_weight_buffer1_address0,
        weight_buffer1_ce0 => ReadFromMem_U0_weight_buffer1_ce0,
        weight_buffer1_we0 => ReadFromMem_U0_weight_buffer1_we0,
        weight_buffer1_d0 => ReadFromMem_U0_weight_buffer1_d0,
        weight_buffer1_q0 => weight_buffer_V_1_q0,
        weight_buffer2_address0 => ReadFromMem_U0_weight_buffer2_address0,
        weight_buffer2_ce0 => ReadFromMem_U0_weight_buffer2_ce0,
        weight_buffer2_we0 => ReadFromMem_U0_weight_buffer2_we0,
        weight_buffer2_d0 => ReadFromMem_U0_weight_buffer2_d0,
        weight_buffer2_q0 => weight_buffer_V_2_q0,
        weight_buffer3_address0 => ReadFromMem_U0_weight_buffer3_address0,
        weight_buffer3_ce0 => ReadFromMem_U0_weight_buffer3_ce0,
        weight_buffer3_we0 => ReadFromMem_U0_weight_buffer3_we0,
        weight_buffer3_d0 => ReadFromMem_U0_weight_buffer3_d0,
        weight_buffer3_q0 => weight_buffer_V_3_q0,
        weight_buffer4_address0 => ReadFromMem_U0_weight_buffer4_address0,
        weight_buffer4_ce0 => ReadFromMem_U0_weight_buffer4_ce0,
        weight_buffer4_we0 => ReadFromMem_U0_weight_buffer4_we0,
        weight_buffer4_d0 => ReadFromMem_U0_weight_buffer4_d0,
        weight_buffer4_q0 => weight_buffer_V_4_q0,
        weight_buffer5_address0 => ReadFromMem_U0_weight_buffer5_address0,
        weight_buffer5_ce0 => ReadFromMem_U0_weight_buffer5_ce0,
        weight_buffer5_we0 => ReadFromMem_U0_weight_buffer5_we0,
        weight_buffer5_d0 => ReadFromMem_U0_weight_buffer5_d0,
        weight_buffer5_q0 => weight_buffer_V_5_q0,
        weight_buffer6_address0 => ReadFromMem_U0_weight_buffer6_address0,
        weight_buffer6_ce0 => ReadFromMem_U0_weight_buffer6_ce0,
        weight_buffer6_we0 => ReadFromMem_U0_weight_buffer6_we0,
        weight_buffer6_d0 => ReadFromMem_U0_weight_buffer6_d0,
        weight_buffer6_q0 => weight_buffer_V_6_q0,
        weight_buffer7_address0 => ReadFromMem_U0_weight_buffer7_address0,
        weight_buffer7_ce0 => ReadFromMem_U0_weight_buffer7_ce0,
        weight_buffer7_we0 => ReadFromMem_U0_weight_buffer7_we0,
        weight_buffer7_d0 => ReadFromMem_U0_weight_buffer7_d0,
        weight_buffer7_q0 => weight_buffer_V_7_q0,
        weight_buffer8_address0 => ReadFromMem_U0_weight_buffer8_address0,
        weight_buffer8_ce0 => ReadFromMem_U0_weight_buffer8_ce0,
        weight_buffer8_we0 => ReadFromMem_U0_weight_buffer8_we0,
        weight_buffer8_d0 => ReadFromMem_U0_weight_buffer8_d0,
        weight_buffer8_q0 => weight_buffer_V_8_q0,
        weight_buffer9_address0 => ReadFromMem_U0_weight_buffer9_address0,
        weight_buffer9_ce0 => ReadFromMem_U0_weight_buffer9_ce0,
        weight_buffer9_we0 => ReadFromMem_U0_weight_buffer9_we0,
        weight_buffer9_d0 => ReadFromMem_U0_weight_buffer9_d0,
        weight_buffer9_q0 => weight_buffer_V_9_q0,
        weight_buffer10_address0 => ReadFromMem_U0_weight_buffer10_address0,
        weight_buffer10_ce0 => ReadFromMem_U0_weight_buffer10_ce0,
        weight_buffer10_we0 => ReadFromMem_U0_weight_buffer10_we0,
        weight_buffer10_d0 => ReadFromMem_U0_weight_buffer10_d0,
        weight_buffer10_q0 => weight_buffer_V_10_q0,
        weight_buffer11_address0 => ReadFromMem_U0_weight_buffer11_address0,
        weight_buffer11_ce0 => ReadFromMem_U0_weight_buffer11_ce0,
        weight_buffer11_we0 => ReadFromMem_U0_weight_buffer11_we0,
        weight_buffer11_d0 => ReadFromMem_U0_weight_buffer11_d0,
        weight_buffer11_q0 => weight_buffer_V_11_q0,
        weight_buffer12_address0 => ReadFromMem_U0_weight_buffer12_address0,
        weight_buffer12_ce0 => ReadFromMem_U0_weight_buffer12_ce0,
        weight_buffer12_we0 => ReadFromMem_U0_weight_buffer12_we0,
        weight_buffer12_d0 => ReadFromMem_U0_weight_buffer12_d0,
        weight_buffer12_q0 => weight_buffer_V_12_q0,
        weight_buffer13_address0 => ReadFromMem_U0_weight_buffer13_address0,
        weight_buffer13_ce0 => ReadFromMem_U0_weight_buffer13_ce0,
        weight_buffer13_we0 => ReadFromMem_U0_weight_buffer13_we0,
        weight_buffer13_d0 => ReadFromMem_U0_weight_buffer13_d0,
        weight_buffer13_q0 => weight_buffer_V_13_q0,
        weight_buffer14_address0 => ReadFromMem_U0_weight_buffer14_address0,
        weight_buffer14_ce0 => ReadFromMem_U0_weight_buffer14_ce0,
        weight_buffer14_we0 => ReadFromMem_U0_weight_buffer14_we0,
        weight_buffer14_d0 => ReadFromMem_U0_weight_buffer14_d0,
        weight_buffer14_q0 => weight_buffer_V_14_q0,
        weight_buffer15_address0 => ReadFromMem_U0_weight_buffer15_address0,
        weight_buffer15_ce0 => ReadFromMem_U0_weight_buffer15_ce0,
        weight_buffer15_we0 => ReadFromMem_U0_weight_buffer15_we0,
        weight_buffer15_d0 => ReadFromMem_U0_weight_buffer15_d0,
        weight_buffer15_q0 => weight_buffer_V_15_q0,
        weight_buffer16_address0 => ReadFromMem_U0_weight_buffer16_address0,
        weight_buffer16_ce0 => ReadFromMem_U0_weight_buffer16_ce0,
        weight_buffer16_we0 => ReadFromMem_U0_weight_buffer16_we0,
        weight_buffer16_d0 => ReadFromMem_U0_weight_buffer16_d0,
        weight_buffer16_q0 => weight_buffer_V_16_q0,
        weight_buffer17_address0 => ReadFromMem_U0_weight_buffer17_address0,
        weight_buffer17_ce0 => ReadFromMem_U0_weight_buffer17_ce0,
        weight_buffer17_we0 => ReadFromMem_U0_weight_buffer17_we0,
        weight_buffer17_d0 => ReadFromMem_U0_weight_buffer17_d0,
        weight_buffer17_q0 => weight_buffer_V_17_q0,
        weight_buffer18_address0 => ReadFromMem_U0_weight_buffer18_address0,
        weight_buffer18_ce0 => ReadFromMem_U0_weight_buffer18_ce0,
        weight_buffer18_we0 => ReadFromMem_U0_weight_buffer18_we0,
        weight_buffer18_d0 => ReadFromMem_U0_weight_buffer18_d0,
        weight_buffer18_q0 => weight_buffer_V_18_q0,
        weight_buffer19_address0 => ReadFromMem_U0_weight_buffer19_address0,
        weight_buffer19_ce0 => ReadFromMem_U0_weight_buffer19_ce0,
        weight_buffer19_we0 => ReadFromMem_U0_weight_buffer19_we0,
        weight_buffer19_d0 => ReadFromMem_U0_weight_buffer19_d0,
        weight_buffer19_q0 => weight_buffer_V_19_q0,
        weight_buffer20_address0 => ReadFromMem_U0_weight_buffer20_address0,
        weight_buffer20_ce0 => ReadFromMem_U0_weight_buffer20_ce0,
        weight_buffer20_we0 => ReadFromMem_U0_weight_buffer20_we0,
        weight_buffer20_d0 => ReadFromMem_U0_weight_buffer20_d0,
        weight_buffer20_q0 => weight_buffer_V_20_q0,
        weight_buffer21_address0 => ReadFromMem_U0_weight_buffer21_address0,
        weight_buffer21_ce0 => ReadFromMem_U0_weight_buffer21_ce0,
        weight_buffer21_we0 => ReadFromMem_U0_weight_buffer21_we0,
        weight_buffer21_d0 => ReadFromMem_U0_weight_buffer21_d0,
        weight_buffer21_q0 => weight_buffer_V_21_q0,
        weight_buffer22_address0 => ReadFromMem_U0_weight_buffer22_address0,
        weight_buffer22_ce0 => ReadFromMem_U0_weight_buffer22_ce0,
        weight_buffer22_we0 => ReadFromMem_U0_weight_buffer22_we0,
        weight_buffer22_d0 => ReadFromMem_U0_weight_buffer22_d0,
        weight_buffer22_q0 => weight_buffer_V_22_q0,
        weight_buffer23_address0 => ReadFromMem_U0_weight_buffer23_address0,
        weight_buffer23_ce0 => ReadFromMem_U0_weight_buffer23_ce0,
        weight_buffer23_we0 => ReadFromMem_U0_weight_buffer23_we0,
        weight_buffer23_d0 => ReadFromMem_U0_weight_buffer23_d0,
        weight_buffer23_q0 => weight_buffer_V_23_q0,
        weight_buffer24_address0 => ReadFromMem_U0_weight_buffer24_address0,
        weight_buffer24_ce0 => ReadFromMem_U0_weight_buffer24_ce0,
        weight_buffer24_we0 => ReadFromMem_U0_weight_buffer24_we0,
        weight_buffer24_d0 => ReadFromMem_U0_weight_buffer24_d0,
        weight_buffer24_q0 => weight_buffer_V_24_q0,
        weight_buffer25_address0 => ReadFromMem_U0_weight_buffer25_address0,
        weight_buffer25_ce0 => ReadFromMem_U0_weight_buffer25_ce0,
        weight_buffer25_we0 => ReadFromMem_U0_weight_buffer25_we0,
        weight_buffer25_d0 => ReadFromMem_U0_weight_buffer25_d0,
        weight_buffer25_q0 => weight_buffer_V_25_q0,
        weight_buffer26_address0 => ReadFromMem_U0_weight_buffer26_address0,
        weight_buffer26_ce0 => ReadFromMem_U0_weight_buffer26_ce0,
        weight_buffer26_we0 => ReadFromMem_U0_weight_buffer26_we0,
        weight_buffer26_d0 => ReadFromMem_U0_weight_buffer26_d0,
        weight_buffer26_q0 => weight_buffer_V_26_q0,
        weight_buffer27_address0 => ReadFromMem_U0_weight_buffer27_address0,
        weight_buffer27_ce0 => ReadFromMem_U0_weight_buffer27_ce0,
        weight_buffer27_we0 => ReadFromMem_U0_weight_buffer27_we0,
        weight_buffer27_d0 => ReadFromMem_U0_weight_buffer27_d0,
        weight_buffer27_q0 => weight_buffer_V_27_q0,
        weight_buffer28_address0 => ReadFromMem_U0_weight_buffer28_address0,
        weight_buffer28_ce0 => ReadFromMem_U0_weight_buffer28_ce0,
        weight_buffer28_we0 => ReadFromMem_U0_weight_buffer28_we0,
        weight_buffer28_d0 => ReadFromMem_U0_weight_buffer28_d0,
        weight_buffer28_q0 => weight_buffer_V_28_q0,
        weight_buffer29_address0 => ReadFromMem_U0_weight_buffer29_address0,
        weight_buffer29_ce0 => ReadFromMem_U0_weight_buffer29_ce0,
        weight_buffer29_we0 => ReadFromMem_U0_weight_buffer29_we0,
        weight_buffer29_d0 => ReadFromMem_U0_weight_buffer29_d0,
        weight_buffer29_q0 => weight_buffer_V_29_q0,
        weight_buffer30_address0 => ReadFromMem_U0_weight_buffer30_address0,
        weight_buffer30_ce0 => ReadFromMem_U0_weight_buffer30_ce0,
        weight_buffer30_we0 => ReadFromMem_U0_weight_buffer30_we0,
        weight_buffer30_d0 => ReadFromMem_U0_weight_buffer30_d0,
        weight_buffer30_q0 => weight_buffer_V_30_q0,
        weight_buffer31_address0 => ReadFromMem_U0_weight_buffer31_address0,
        weight_buffer31_ce0 => ReadFromMem_U0_weight_buffer31_ce0,
        weight_buffer31_we0 => ReadFromMem_U0_weight_buffer31_we0,
        weight_buffer31_d0 => ReadFromMem_U0_weight_buffer31_d0,
        weight_buffer31_q0 => weight_buffer_V_31_q0,
        weight_buffer32_address0 => ReadFromMem_U0_weight_buffer32_address0,
        weight_buffer32_ce0 => ReadFromMem_U0_weight_buffer32_ce0,
        weight_buffer32_we0 => ReadFromMem_U0_weight_buffer32_we0,
        weight_buffer32_d0 => ReadFromMem_U0_weight_buffer32_d0,
        weight_buffer32_q0 => weight_buffer_V_32_q0,
        weight_buffer33_address0 => ReadFromMem_U0_weight_buffer33_address0,
        weight_buffer33_ce0 => ReadFromMem_U0_weight_buffer33_ce0,
        weight_buffer33_we0 => ReadFromMem_U0_weight_buffer33_we0,
        weight_buffer33_d0 => ReadFromMem_U0_weight_buffer33_d0,
        weight_buffer33_q0 => weight_buffer_V_33_q0,
        weight_buffer34_address0 => ReadFromMem_U0_weight_buffer34_address0,
        weight_buffer34_ce0 => ReadFromMem_U0_weight_buffer34_ce0,
        weight_buffer34_we0 => ReadFromMem_U0_weight_buffer34_we0,
        weight_buffer34_d0 => ReadFromMem_U0_weight_buffer34_d0,
        weight_buffer34_q0 => weight_buffer_V_34_q0,
        weight_buffer35_address0 => ReadFromMem_U0_weight_buffer35_address0,
        weight_buffer35_ce0 => ReadFromMem_U0_weight_buffer35_ce0,
        weight_buffer35_we0 => ReadFromMem_U0_weight_buffer35_we0,
        weight_buffer35_d0 => ReadFromMem_U0_weight_buffer35_d0,
        weight_buffer35_q0 => weight_buffer_V_35_q0,
        weight_buffer36_address0 => ReadFromMem_U0_weight_buffer36_address0,
        weight_buffer36_ce0 => ReadFromMem_U0_weight_buffer36_ce0,
        weight_buffer36_we0 => ReadFromMem_U0_weight_buffer36_we0,
        weight_buffer36_d0 => ReadFromMem_U0_weight_buffer36_d0,
        weight_buffer36_q0 => weight_buffer_V_36_q0,
        weight_buffer37_address0 => ReadFromMem_U0_weight_buffer37_address0,
        weight_buffer37_ce0 => ReadFromMem_U0_weight_buffer37_ce0,
        weight_buffer37_we0 => ReadFromMem_U0_weight_buffer37_we0,
        weight_buffer37_d0 => ReadFromMem_U0_weight_buffer37_d0,
        weight_buffer37_q0 => weight_buffer_V_37_q0,
        weight_buffer38_address0 => ReadFromMem_U0_weight_buffer38_address0,
        weight_buffer38_ce0 => ReadFromMem_U0_weight_buffer38_ce0,
        weight_buffer38_we0 => ReadFromMem_U0_weight_buffer38_we0,
        weight_buffer38_d0 => ReadFromMem_U0_weight_buffer38_d0,
        weight_buffer38_q0 => weight_buffer_V_38_q0,
        weight_buffer39_address0 => ReadFromMem_U0_weight_buffer39_address0,
        weight_buffer39_ce0 => ReadFromMem_U0_weight_buffer39_ce0,
        weight_buffer39_we0 => ReadFromMem_U0_weight_buffer39_we0,
        weight_buffer39_d0 => ReadFromMem_U0_weight_buffer39_d0,
        weight_buffer39_q0 => weight_buffer_V_39_q0,
        weight_buffer40_address0 => ReadFromMem_U0_weight_buffer40_address0,
        weight_buffer40_ce0 => ReadFromMem_U0_weight_buffer40_ce0,
        weight_buffer40_we0 => ReadFromMem_U0_weight_buffer40_we0,
        weight_buffer40_d0 => ReadFromMem_U0_weight_buffer40_d0,
        weight_buffer40_q0 => weight_buffer_V_40_q0,
        weight_buffer41_address0 => ReadFromMem_U0_weight_buffer41_address0,
        weight_buffer41_ce0 => ReadFromMem_U0_weight_buffer41_ce0,
        weight_buffer41_we0 => ReadFromMem_U0_weight_buffer41_we0,
        weight_buffer41_d0 => ReadFromMem_U0_weight_buffer41_d0,
        weight_buffer41_q0 => weight_buffer_V_41_q0,
        weight_buffer42_address0 => ReadFromMem_U0_weight_buffer42_address0,
        weight_buffer42_ce0 => ReadFromMem_U0_weight_buffer42_ce0,
        weight_buffer42_we0 => ReadFromMem_U0_weight_buffer42_we0,
        weight_buffer42_d0 => ReadFromMem_U0_weight_buffer42_d0,
        weight_buffer42_q0 => weight_buffer_V_42_q0,
        weight_buffer43_address0 => ReadFromMem_U0_weight_buffer43_address0,
        weight_buffer43_ce0 => ReadFromMem_U0_weight_buffer43_ce0,
        weight_buffer43_we0 => ReadFromMem_U0_weight_buffer43_we0,
        weight_buffer43_d0 => ReadFromMem_U0_weight_buffer43_d0,
        weight_buffer43_q0 => weight_buffer_V_43_q0,
        weight_buffer44_address0 => ReadFromMem_U0_weight_buffer44_address0,
        weight_buffer44_ce0 => ReadFromMem_U0_weight_buffer44_ce0,
        weight_buffer44_we0 => ReadFromMem_U0_weight_buffer44_we0,
        weight_buffer44_d0 => ReadFromMem_U0_weight_buffer44_d0,
        weight_buffer44_q0 => weight_buffer_V_44_q0,
        weight_buffer45_address0 => ReadFromMem_U0_weight_buffer45_address0,
        weight_buffer45_ce0 => ReadFromMem_U0_weight_buffer45_ce0,
        weight_buffer45_we0 => ReadFromMem_U0_weight_buffer45_we0,
        weight_buffer45_d0 => ReadFromMem_U0_weight_buffer45_d0,
        weight_buffer45_q0 => weight_buffer_V_45_q0,
        weight_buffer46_address0 => ReadFromMem_U0_weight_buffer46_address0,
        weight_buffer46_ce0 => ReadFromMem_U0_weight_buffer46_ce0,
        weight_buffer46_we0 => ReadFromMem_U0_weight_buffer46_we0,
        weight_buffer46_d0 => ReadFromMem_U0_weight_buffer46_d0,
        weight_buffer46_q0 => weight_buffer_V_46_q0,
        weight_buffer47_address0 => ReadFromMem_U0_weight_buffer47_address0,
        weight_buffer47_ce0 => ReadFromMem_U0_weight_buffer47_ce0,
        weight_buffer47_we0 => ReadFromMem_U0_weight_buffer47_we0,
        weight_buffer47_d0 => ReadFromMem_U0_weight_buffer47_d0,
        weight_buffer47_q0 => weight_buffer_V_47_q0,
        weight_buffer48_address0 => ReadFromMem_U0_weight_buffer48_address0,
        weight_buffer48_ce0 => ReadFromMem_U0_weight_buffer48_ce0,
        weight_buffer48_we0 => ReadFromMem_U0_weight_buffer48_we0,
        weight_buffer48_d0 => ReadFromMem_U0_weight_buffer48_d0,
        weight_buffer48_q0 => weight_buffer_V_48_q0,
        weight_buffer49_address0 => ReadFromMem_U0_weight_buffer49_address0,
        weight_buffer49_ce0 => ReadFromMem_U0_weight_buffer49_ce0,
        weight_buffer49_we0 => ReadFromMem_U0_weight_buffer49_we0,
        weight_buffer49_d0 => ReadFromMem_U0_weight_buffer49_d0,
        weight_buffer49_q0 => weight_buffer_V_49_q0,
        weight_buffer50_address0 => ReadFromMem_U0_weight_buffer50_address0,
        weight_buffer50_ce0 => ReadFromMem_U0_weight_buffer50_ce0,
        weight_buffer50_we0 => ReadFromMem_U0_weight_buffer50_we0,
        weight_buffer50_d0 => ReadFromMem_U0_weight_buffer50_d0,
        weight_buffer50_q0 => weight_buffer_V_50_q0,
        weight_buffer51_address0 => ReadFromMem_U0_weight_buffer51_address0,
        weight_buffer51_ce0 => ReadFromMem_U0_weight_buffer51_ce0,
        weight_buffer51_we0 => ReadFromMem_U0_weight_buffer51_we0,
        weight_buffer51_d0 => ReadFromMem_U0_weight_buffer51_d0,
        weight_buffer51_q0 => weight_buffer_V_51_q0,
        weight_buffer52_address0 => ReadFromMem_U0_weight_buffer52_address0,
        weight_buffer52_ce0 => ReadFromMem_U0_weight_buffer52_ce0,
        weight_buffer52_we0 => ReadFromMem_U0_weight_buffer52_we0,
        weight_buffer52_d0 => ReadFromMem_U0_weight_buffer52_d0,
        weight_buffer52_q0 => weight_buffer_V_52_q0,
        weight_buffer53_address0 => ReadFromMem_U0_weight_buffer53_address0,
        weight_buffer53_ce0 => ReadFromMem_U0_weight_buffer53_ce0,
        weight_buffer53_we0 => ReadFromMem_U0_weight_buffer53_we0,
        weight_buffer53_d0 => ReadFromMem_U0_weight_buffer53_d0,
        weight_buffer53_q0 => weight_buffer_V_53_q0,
        weight_buffer54_address0 => ReadFromMem_U0_weight_buffer54_address0,
        weight_buffer54_ce0 => ReadFromMem_U0_weight_buffer54_ce0,
        weight_buffer54_we0 => ReadFromMem_U0_weight_buffer54_we0,
        weight_buffer54_d0 => ReadFromMem_U0_weight_buffer54_d0,
        weight_buffer54_q0 => weight_buffer_V_54_q0,
        weight_buffer55_address0 => ReadFromMem_U0_weight_buffer55_address0,
        weight_buffer55_ce0 => ReadFromMem_U0_weight_buffer55_ce0,
        weight_buffer55_we0 => ReadFromMem_U0_weight_buffer55_we0,
        weight_buffer55_d0 => ReadFromMem_U0_weight_buffer55_d0,
        weight_buffer55_q0 => weight_buffer_V_55_q0,
        weight_buffer56_address0 => ReadFromMem_U0_weight_buffer56_address0,
        weight_buffer56_ce0 => ReadFromMem_U0_weight_buffer56_ce0,
        weight_buffer56_we0 => ReadFromMem_U0_weight_buffer56_we0,
        weight_buffer56_d0 => ReadFromMem_U0_weight_buffer56_d0,
        weight_buffer56_q0 => weight_buffer_V_56_q0,
        weight_buffer57_address0 => ReadFromMem_U0_weight_buffer57_address0,
        weight_buffer57_ce0 => ReadFromMem_U0_weight_buffer57_ce0,
        weight_buffer57_we0 => ReadFromMem_U0_weight_buffer57_we0,
        weight_buffer57_d0 => ReadFromMem_U0_weight_buffer57_d0,
        weight_buffer57_q0 => weight_buffer_V_57_q0,
        weight_buffer58_address0 => ReadFromMem_U0_weight_buffer58_address0,
        weight_buffer58_ce0 => ReadFromMem_U0_weight_buffer58_ce0,
        weight_buffer58_we0 => ReadFromMem_U0_weight_buffer58_we0,
        weight_buffer58_d0 => ReadFromMem_U0_weight_buffer58_d0,
        weight_buffer58_q0 => weight_buffer_V_58_q0,
        weight_buffer59_address0 => ReadFromMem_U0_weight_buffer59_address0,
        weight_buffer59_ce0 => ReadFromMem_U0_weight_buffer59_ce0,
        weight_buffer59_we0 => ReadFromMem_U0_weight_buffer59_we0,
        weight_buffer59_d0 => ReadFromMem_U0_weight_buffer59_d0,
        weight_buffer59_q0 => weight_buffer_V_59_q0,
        weight_buffer60_address0 => ReadFromMem_U0_weight_buffer60_address0,
        weight_buffer60_ce0 => ReadFromMem_U0_weight_buffer60_ce0,
        weight_buffer60_we0 => ReadFromMem_U0_weight_buffer60_we0,
        weight_buffer60_d0 => ReadFromMem_U0_weight_buffer60_d0,
        weight_buffer60_q0 => weight_buffer_V_60_q0,
        weight_buffer61_address0 => ReadFromMem_U0_weight_buffer61_address0,
        weight_buffer61_ce0 => ReadFromMem_U0_weight_buffer61_ce0,
        weight_buffer61_we0 => ReadFromMem_U0_weight_buffer61_we0,
        weight_buffer61_d0 => ReadFromMem_U0_weight_buffer61_d0,
        weight_buffer61_q0 => weight_buffer_V_61_q0,
        weight_buffer62_address0 => ReadFromMem_U0_weight_buffer62_address0,
        weight_buffer62_ce0 => ReadFromMem_U0_weight_buffer62_ce0,
        weight_buffer62_we0 => ReadFromMem_U0_weight_buffer62_we0,
        weight_buffer62_d0 => ReadFromMem_U0_weight_buffer62_d0,
        weight_buffer62_q0 => weight_buffer_V_62_q0,
        weight_buffer63_address0 => ReadFromMem_U0_weight_buffer63_address0,
        weight_buffer63_ce0 => ReadFromMem_U0_weight_buffer63_ce0,
        weight_buffer63_we0 => ReadFromMem_U0_weight_buffer63_we0,
        weight_buffer63_d0 => ReadFromMem_U0_weight_buffer63_d0,
        weight_buffer63_q0 => weight_buffer_V_63_q0,
        weight_buffer64_address0 => ReadFromMem_U0_weight_buffer64_address0,
        weight_buffer64_ce0 => ReadFromMem_U0_weight_buffer64_ce0,
        weight_buffer64_we0 => ReadFromMem_U0_weight_buffer64_we0,
        weight_buffer64_d0 => ReadFromMem_U0_weight_buffer64_d0,
        weight_buffer64_q0 => weight_buffer_V_64_q0,
        weight_buffer65_address0 => ReadFromMem_U0_weight_buffer65_address0,
        weight_buffer65_ce0 => ReadFromMem_U0_weight_buffer65_ce0,
        weight_buffer65_we0 => ReadFromMem_U0_weight_buffer65_we0,
        weight_buffer65_d0 => ReadFromMem_U0_weight_buffer65_d0,
        weight_buffer65_q0 => weight_buffer_V_65_q0,
        weight_buffer66_address0 => ReadFromMem_U0_weight_buffer66_address0,
        weight_buffer66_ce0 => ReadFromMem_U0_weight_buffer66_ce0,
        weight_buffer66_we0 => ReadFromMem_U0_weight_buffer66_we0,
        weight_buffer66_d0 => ReadFromMem_U0_weight_buffer66_d0,
        weight_buffer66_q0 => weight_buffer_V_66_q0,
        weight_buffer67_address0 => ReadFromMem_U0_weight_buffer67_address0,
        weight_buffer67_ce0 => ReadFromMem_U0_weight_buffer67_ce0,
        weight_buffer67_we0 => ReadFromMem_U0_weight_buffer67_we0,
        weight_buffer67_d0 => ReadFromMem_U0_weight_buffer67_d0,
        weight_buffer67_q0 => weight_buffer_V_67_q0,
        weight_buffer68_address0 => ReadFromMem_U0_weight_buffer68_address0,
        weight_buffer68_ce0 => ReadFromMem_U0_weight_buffer68_ce0,
        weight_buffer68_we0 => ReadFromMem_U0_weight_buffer68_we0,
        weight_buffer68_d0 => ReadFromMem_U0_weight_buffer68_d0,
        weight_buffer68_q0 => weight_buffer_V_68_q0,
        weight_buffer69_address0 => ReadFromMem_U0_weight_buffer69_address0,
        weight_buffer69_ce0 => ReadFromMem_U0_weight_buffer69_ce0,
        weight_buffer69_we0 => ReadFromMem_U0_weight_buffer69_we0,
        weight_buffer69_d0 => ReadFromMem_U0_weight_buffer69_d0,
        weight_buffer69_q0 => weight_buffer_V_69_q0,
        weight_buffer70_address0 => ReadFromMem_U0_weight_buffer70_address0,
        weight_buffer70_ce0 => ReadFromMem_U0_weight_buffer70_ce0,
        weight_buffer70_we0 => ReadFromMem_U0_weight_buffer70_we0,
        weight_buffer70_d0 => ReadFromMem_U0_weight_buffer70_d0,
        weight_buffer70_q0 => weight_buffer_V_70_q0,
        weights_stream_0_0_0_0_din => ReadFromMem_U0_weights_stream_0_0_0_0_din,
        weights_stream_0_0_0_0_full_n => weights_stream_V_V_0_full_n,
        weights_stream_0_0_0_0_write => ReadFromMem_U0_weights_stream_0_0_0_0_write,
        weights_stream_0_0_0_071_din => ReadFromMem_U0_weights_stream_0_0_0_071_din,
        weights_stream_0_0_0_071_full_n => weights_stream_V_V_1_full_n,
        weights_stream_0_0_0_071_write => ReadFromMem_U0_weights_stream_0_0_0_071_write,
        weights_stream_0_0_0_072_din => ReadFromMem_U0_weights_stream_0_0_0_072_din,
        weights_stream_0_0_0_072_full_n => weights_stream_V_V_2_full_n,
        weights_stream_0_0_0_072_write => ReadFromMem_U0_weights_stream_0_0_0_072_write,
        weights_stream_0_0_0_073_din => ReadFromMem_U0_weights_stream_0_0_0_073_din,
        weights_stream_0_0_0_073_full_n => weights_stream_V_V_3_full_n,
        weights_stream_0_0_0_073_write => ReadFromMem_U0_weights_stream_0_0_0_073_write,
        weights_stream_0_0_0_074_din => ReadFromMem_U0_weights_stream_0_0_0_074_din,
        weights_stream_0_0_0_074_full_n => weights_stream_V_V_4_full_n,
        weights_stream_0_0_0_074_write => ReadFromMem_U0_weights_stream_0_0_0_074_write,
        weights_stream_0_0_0_075_din => ReadFromMem_U0_weights_stream_0_0_0_075_din,
        weights_stream_0_0_0_075_full_n => weights_stream_V_V_5_full_n,
        weights_stream_0_0_0_075_write => ReadFromMem_U0_weights_stream_0_0_0_075_write,
        weights_stream_0_0_0_076_din => ReadFromMem_U0_weights_stream_0_0_0_076_din,
        weights_stream_0_0_0_076_full_n => weights_stream_V_V_6_full_n,
        weights_stream_0_0_0_076_write => ReadFromMem_U0_weights_stream_0_0_0_076_write,
        weights_stream_0_0_0_077_din => ReadFromMem_U0_weights_stream_0_0_0_077_din,
        weights_stream_0_0_0_077_full_n => weights_stream_V_V_7_full_n,
        weights_stream_0_0_0_077_write => ReadFromMem_U0_weights_stream_0_0_0_077_write,
        weights_stream_0_0_0_078_din => ReadFromMem_U0_weights_stream_0_0_0_078_din,
        weights_stream_0_0_0_078_full_n => weights_stream_V_V_8_full_n,
        weights_stream_0_0_0_078_write => ReadFromMem_U0_weights_stream_0_0_0_078_write,
        weights_stream_0_0_0_079_din => ReadFromMem_U0_weights_stream_0_0_0_079_din,
        weights_stream_0_0_0_079_full_n => weights_stream_V_V_9_full_n,
        weights_stream_0_0_0_079_write => ReadFromMem_U0_weights_stream_0_0_0_079_write,
        weights_stream_0_0_0_080_din => ReadFromMem_U0_weights_stream_0_0_0_080_din,
        weights_stream_0_0_0_080_full_n => weights_stream_V_V_10_full_n,
        weights_stream_0_0_0_080_write => ReadFromMem_U0_weights_stream_0_0_0_080_write,
        weights_stream_0_0_0_081_din => ReadFromMem_U0_weights_stream_0_0_0_081_din,
        weights_stream_0_0_0_081_full_n => weights_stream_V_V_11_full_n,
        weights_stream_0_0_0_081_write => ReadFromMem_U0_weights_stream_0_0_0_081_write,
        weights_stream_0_0_0_082_din => ReadFromMem_U0_weights_stream_0_0_0_082_din,
        weights_stream_0_0_0_082_full_n => weights_stream_V_V_12_full_n,
        weights_stream_0_0_0_082_write => ReadFromMem_U0_weights_stream_0_0_0_082_write,
        weights_stream_0_0_0_083_din => ReadFromMem_U0_weights_stream_0_0_0_083_din,
        weights_stream_0_0_0_083_full_n => weights_stream_V_V_13_full_n,
        weights_stream_0_0_0_083_write => ReadFromMem_U0_weights_stream_0_0_0_083_write,
        weights_stream_0_0_0_084_din => ReadFromMem_U0_weights_stream_0_0_0_084_din,
        weights_stream_0_0_0_084_full_n => weights_stream_V_V_14_full_n,
        weights_stream_0_0_0_084_write => ReadFromMem_U0_weights_stream_0_0_0_084_write,
        weights_stream_0_0_0_085_din => ReadFromMem_U0_weights_stream_0_0_0_085_din,
        weights_stream_0_0_0_085_full_n => weights_stream_V_V_15_full_n,
        weights_stream_0_0_0_085_write => ReadFromMem_U0_weights_stream_0_0_0_085_write,
        weights_stream_0_0_0_086_din => ReadFromMem_U0_weights_stream_0_0_0_086_din,
        weights_stream_0_0_0_086_full_n => weights_stream_V_V_16_full_n,
        weights_stream_0_0_0_086_write => ReadFromMem_U0_weights_stream_0_0_0_086_write,
        weights_stream_0_0_0_087_din => ReadFromMem_U0_weights_stream_0_0_0_087_din,
        weights_stream_0_0_0_087_full_n => weights_stream_V_V_17_full_n,
        weights_stream_0_0_0_087_write => ReadFromMem_U0_weights_stream_0_0_0_087_write,
        weights_stream_0_0_0_088_din => ReadFromMem_U0_weights_stream_0_0_0_088_din,
        weights_stream_0_0_0_088_full_n => weights_stream_V_V_18_full_n,
        weights_stream_0_0_0_088_write => ReadFromMem_U0_weights_stream_0_0_0_088_write,
        weights_stream_0_0_0_089_din => ReadFromMem_U0_weights_stream_0_0_0_089_din,
        weights_stream_0_0_0_089_full_n => weights_stream_V_V_19_full_n,
        weights_stream_0_0_0_089_write => ReadFromMem_U0_weights_stream_0_0_0_089_write,
        weights_stream_0_0_0_090_din => ReadFromMem_U0_weights_stream_0_0_0_090_din,
        weights_stream_0_0_0_090_full_n => weights_stream_V_V_20_full_n,
        weights_stream_0_0_0_090_write => ReadFromMem_U0_weights_stream_0_0_0_090_write,
        weights_stream_0_0_0_091_din => ReadFromMem_U0_weights_stream_0_0_0_091_din,
        weights_stream_0_0_0_091_full_n => weights_stream_V_V_21_full_n,
        weights_stream_0_0_0_091_write => ReadFromMem_U0_weights_stream_0_0_0_091_write,
        weights_stream_0_0_0_092_din => ReadFromMem_U0_weights_stream_0_0_0_092_din,
        weights_stream_0_0_0_092_full_n => weights_stream_V_V_22_full_n,
        weights_stream_0_0_0_092_write => ReadFromMem_U0_weights_stream_0_0_0_092_write,
        weights_stream_0_0_0_093_din => ReadFromMem_U0_weights_stream_0_0_0_093_din,
        weights_stream_0_0_0_093_full_n => weights_stream_V_V_23_full_n,
        weights_stream_0_0_0_093_write => ReadFromMem_U0_weights_stream_0_0_0_093_write,
        weights_stream_0_0_0_094_din => ReadFromMem_U0_weights_stream_0_0_0_094_din,
        weights_stream_0_0_0_094_full_n => weights_stream_V_V_24_full_n,
        weights_stream_0_0_0_094_write => ReadFromMem_U0_weights_stream_0_0_0_094_write,
        weights_stream_0_0_0_095_din => ReadFromMem_U0_weights_stream_0_0_0_095_din,
        weights_stream_0_0_0_095_full_n => weights_stream_V_V_25_full_n,
        weights_stream_0_0_0_095_write => ReadFromMem_U0_weights_stream_0_0_0_095_write,
        weights_stream_0_0_0_096_din => ReadFromMem_U0_weights_stream_0_0_0_096_din,
        weights_stream_0_0_0_096_full_n => weights_stream_V_V_26_full_n,
        weights_stream_0_0_0_096_write => ReadFromMem_U0_weights_stream_0_0_0_096_write,
        weights_stream_0_0_0_097_din => ReadFromMem_U0_weights_stream_0_0_0_097_din,
        weights_stream_0_0_0_097_full_n => weights_stream_V_V_27_full_n,
        weights_stream_0_0_0_097_write => ReadFromMem_U0_weights_stream_0_0_0_097_write,
        weights_stream_0_0_0_098_din => ReadFromMem_U0_weights_stream_0_0_0_098_din,
        weights_stream_0_0_0_098_full_n => weights_stream_V_V_28_full_n,
        weights_stream_0_0_0_098_write => ReadFromMem_U0_weights_stream_0_0_0_098_write,
        weights_stream_0_0_0_099_din => ReadFromMem_U0_weights_stream_0_0_0_099_din,
        weights_stream_0_0_0_099_full_n => weights_stream_V_V_29_full_n,
        weights_stream_0_0_0_099_write => ReadFromMem_U0_weights_stream_0_0_0_099_write,
        weights_stream_0_0_0_0100_din => ReadFromMem_U0_weights_stream_0_0_0_0100_din,
        weights_stream_0_0_0_0100_full_n => weights_stream_V_V_30_full_n,
        weights_stream_0_0_0_0100_write => ReadFromMem_U0_weights_stream_0_0_0_0100_write,
        weights_stream_0_0_0_0101_din => ReadFromMem_U0_weights_stream_0_0_0_0101_din,
        weights_stream_0_0_0_0101_full_n => weights_stream_V_V_31_full_n,
        weights_stream_0_0_0_0101_write => ReadFromMem_U0_weights_stream_0_0_0_0101_write,
        iact_buffer_address0 => ReadFromMem_U0_iact_buffer_address0,
        iact_buffer_ce0 => ReadFromMem_U0_iact_buffer_ce0,
        iact_buffer_we0 => ReadFromMem_U0_iact_buffer_we0,
        iact_buffer_d0 => ReadFromMem_U0_iact_buffer_d0,
        iact_buffer_q0 => iact_buffer_V_q0,
        iact_buffer_address1 => ReadFromMem_U0_iact_buffer_address1,
        iact_buffer_ce1 => ReadFromMem_U0_iact_buffer_ce1,
        iact_buffer_we1 => ReadFromMem_U0_iact_buffer_we1,
        iact_buffer_d1 => ReadFromMem_U0_iact_buffer_d1,
        iacts_stream64_din => ReadFromMem_U0_iacts_stream64_din,
        iacts_stream64_full_n => iacts_stream_full_n,
        iacts_stream64_write => ReadFromMem_U0_iacts_stream64_write,
        X => X,
        Y => Y,
        Wt_X => Wt_X,
        Wt_Y => Wt_Y,
        X_c_din => ReadFromMem_U0_X_c_din,
        X_c_full_n => X_c_full_n,
        X_c_write => ReadFromMem_U0_X_c_write,
        Wt_Y_c_din => ReadFromMem_U0_Wt_Y_c_din,
        Wt_Y_c_full_n => Wt_Y_c_full_n,
        Wt_Y_c_write => ReadFromMem_U0_Wt_Y_c_write);

    RunDataFlow_U0 : component LINEAR_RunDataFlow
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => RunDataFlow_U0_ap_start,
        ap_done => RunDataFlow_U0_ap_done,
        ap_continue => RunDataFlow_U0_ap_continue,
        ap_idle => RunDataFlow_U0_ap_idle,
        ap_ready => RunDataFlow_U0_ap_ready,
        p_read => block_num_x_loc_channel_dout,
        p_read1 => block_num_y_cast_loc_channel_dout,
        iacts_stream_dout => iacts_stream_dout,
        iacts_stream_empty_n => iacts_stream_empty_n,
        iacts_stream_read => RunDataFlow_U0_iacts_stream_read,
        weights_stream_V_V_0_dout => weights_stream_V_V_0_dout,
        weights_stream_V_V_0_empty_n => weights_stream_V_V_0_empty_n,
        weights_stream_V_V_0_read => RunDataFlow_U0_weights_stream_V_V_0_read,
        weights_stream_V_V_1_dout => weights_stream_V_V_1_dout,
        weights_stream_V_V_1_empty_n => weights_stream_V_V_1_empty_n,
        weights_stream_V_V_1_read => RunDataFlow_U0_weights_stream_V_V_1_read,
        weights_stream_V_V_2_dout => weights_stream_V_V_2_dout,
        weights_stream_V_V_2_empty_n => weights_stream_V_V_2_empty_n,
        weights_stream_V_V_2_read => RunDataFlow_U0_weights_stream_V_V_2_read,
        weights_stream_V_V_3_dout => weights_stream_V_V_3_dout,
        weights_stream_V_V_3_empty_n => weights_stream_V_V_3_empty_n,
        weights_stream_V_V_3_read => RunDataFlow_U0_weights_stream_V_V_3_read,
        weights_stream_V_V_4_dout => weights_stream_V_V_4_dout,
        weights_stream_V_V_4_empty_n => weights_stream_V_V_4_empty_n,
        weights_stream_V_V_4_read => RunDataFlow_U0_weights_stream_V_V_4_read,
        weights_stream_V_V_5_dout => weights_stream_V_V_5_dout,
        weights_stream_V_V_5_empty_n => weights_stream_V_V_5_empty_n,
        weights_stream_V_V_5_read => RunDataFlow_U0_weights_stream_V_V_5_read,
        weights_stream_V_V_6_dout => weights_stream_V_V_6_dout,
        weights_stream_V_V_6_empty_n => weights_stream_V_V_6_empty_n,
        weights_stream_V_V_6_read => RunDataFlow_U0_weights_stream_V_V_6_read,
        weights_stream_V_V_7_dout => weights_stream_V_V_7_dout,
        weights_stream_V_V_7_empty_n => weights_stream_V_V_7_empty_n,
        weights_stream_V_V_7_read => RunDataFlow_U0_weights_stream_V_V_7_read,
        weights_stream_V_V_8_dout => weights_stream_V_V_8_dout,
        weights_stream_V_V_8_empty_n => weights_stream_V_V_8_empty_n,
        weights_stream_V_V_8_read => RunDataFlow_U0_weights_stream_V_V_8_read,
        weights_stream_V_V_9_dout => weights_stream_V_V_9_dout,
        weights_stream_V_V_9_empty_n => weights_stream_V_V_9_empty_n,
        weights_stream_V_V_9_read => RunDataFlow_U0_weights_stream_V_V_9_read,
        weights_stream_V_V_10_dout => weights_stream_V_V_10_dout,
        weights_stream_V_V_10_empty_n => weights_stream_V_V_10_empty_n,
        weights_stream_V_V_10_read => RunDataFlow_U0_weights_stream_V_V_10_read,
        weights_stream_V_V_11_dout => weights_stream_V_V_11_dout,
        weights_stream_V_V_11_empty_n => weights_stream_V_V_11_empty_n,
        weights_stream_V_V_11_read => RunDataFlow_U0_weights_stream_V_V_11_read,
        weights_stream_V_V_12_dout => weights_stream_V_V_12_dout,
        weights_stream_V_V_12_empty_n => weights_stream_V_V_12_empty_n,
        weights_stream_V_V_12_read => RunDataFlow_U0_weights_stream_V_V_12_read,
        weights_stream_V_V_13_dout => weights_stream_V_V_13_dout,
        weights_stream_V_V_13_empty_n => weights_stream_V_V_13_empty_n,
        weights_stream_V_V_13_read => RunDataFlow_U0_weights_stream_V_V_13_read,
        weights_stream_V_V_14_dout => weights_stream_V_V_14_dout,
        weights_stream_V_V_14_empty_n => weights_stream_V_V_14_empty_n,
        weights_stream_V_V_14_read => RunDataFlow_U0_weights_stream_V_V_14_read,
        weights_stream_V_V_15_dout => weights_stream_V_V_15_dout,
        weights_stream_V_V_15_empty_n => weights_stream_V_V_15_empty_n,
        weights_stream_V_V_15_read => RunDataFlow_U0_weights_stream_V_V_15_read,
        weights_stream_V_V_16_dout => weights_stream_V_V_16_dout,
        weights_stream_V_V_16_empty_n => weights_stream_V_V_16_empty_n,
        weights_stream_V_V_16_read => RunDataFlow_U0_weights_stream_V_V_16_read,
        weights_stream_V_V_17_dout => weights_stream_V_V_17_dout,
        weights_stream_V_V_17_empty_n => weights_stream_V_V_17_empty_n,
        weights_stream_V_V_17_read => RunDataFlow_U0_weights_stream_V_V_17_read,
        weights_stream_V_V_18_dout => weights_stream_V_V_18_dout,
        weights_stream_V_V_18_empty_n => weights_stream_V_V_18_empty_n,
        weights_stream_V_V_18_read => RunDataFlow_U0_weights_stream_V_V_18_read,
        weights_stream_V_V_19_dout => weights_stream_V_V_19_dout,
        weights_stream_V_V_19_empty_n => weights_stream_V_V_19_empty_n,
        weights_stream_V_V_19_read => RunDataFlow_U0_weights_stream_V_V_19_read,
        weights_stream_V_V_20_dout => weights_stream_V_V_20_dout,
        weights_stream_V_V_20_empty_n => weights_stream_V_V_20_empty_n,
        weights_stream_V_V_20_read => RunDataFlow_U0_weights_stream_V_V_20_read,
        weights_stream_V_V_21_dout => weights_stream_V_V_21_dout,
        weights_stream_V_V_21_empty_n => weights_stream_V_V_21_empty_n,
        weights_stream_V_V_21_read => RunDataFlow_U0_weights_stream_V_V_21_read,
        weights_stream_V_V_22_dout => weights_stream_V_V_22_dout,
        weights_stream_V_V_22_empty_n => weights_stream_V_V_22_empty_n,
        weights_stream_V_V_22_read => RunDataFlow_U0_weights_stream_V_V_22_read,
        weights_stream_V_V_23_dout => weights_stream_V_V_23_dout,
        weights_stream_V_V_23_empty_n => weights_stream_V_V_23_empty_n,
        weights_stream_V_V_23_read => RunDataFlow_U0_weights_stream_V_V_23_read,
        weights_stream_V_V_24_dout => weights_stream_V_V_24_dout,
        weights_stream_V_V_24_empty_n => weights_stream_V_V_24_empty_n,
        weights_stream_V_V_24_read => RunDataFlow_U0_weights_stream_V_V_24_read,
        weights_stream_V_V_25_dout => weights_stream_V_V_25_dout,
        weights_stream_V_V_25_empty_n => weights_stream_V_V_25_empty_n,
        weights_stream_V_V_25_read => RunDataFlow_U0_weights_stream_V_V_25_read,
        weights_stream_V_V_26_dout => weights_stream_V_V_26_dout,
        weights_stream_V_V_26_empty_n => weights_stream_V_V_26_empty_n,
        weights_stream_V_V_26_read => RunDataFlow_U0_weights_stream_V_V_26_read,
        weights_stream_V_V_27_dout => weights_stream_V_V_27_dout,
        weights_stream_V_V_27_empty_n => weights_stream_V_V_27_empty_n,
        weights_stream_V_V_27_read => RunDataFlow_U0_weights_stream_V_V_27_read,
        weights_stream_V_V_28_dout => weights_stream_V_V_28_dout,
        weights_stream_V_V_28_empty_n => weights_stream_V_V_28_empty_n,
        weights_stream_V_V_28_read => RunDataFlow_U0_weights_stream_V_V_28_read,
        weights_stream_V_V_29_dout => weights_stream_V_V_29_dout,
        weights_stream_V_V_29_empty_n => weights_stream_V_V_29_empty_n,
        weights_stream_V_V_29_read => RunDataFlow_U0_weights_stream_V_V_29_read,
        weights_stream_V_V_30_dout => weights_stream_V_V_30_dout,
        weights_stream_V_V_30_empty_n => weights_stream_V_V_30_empty_n,
        weights_stream_V_V_30_read => RunDataFlow_U0_weights_stream_V_V_30_read,
        weights_stream_V_V_31_dout => weights_stream_V_V_31_dout,
        weights_stream_V_V_31_empty_n => weights_stream_V_V_31_empty_n,
        weights_stream_V_V_31_read => RunDataFlow_U0_weights_stream_V_V_31_read,
        output_buf_V_address0 => RunDataFlow_U0_output_buf_V_address0,
        output_buf_V_ce0 => RunDataFlow_U0_output_buf_V_ce0,
        output_buf_V_we0 => RunDataFlow_U0_output_buf_V_we0,
        output_buf_V_d0 => RunDataFlow_U0_output_buf_V_d0,
        output_buf_V_q0 => output_buf_V_i_q0);

    OutputBuffer_U0 : component LINEAR_OutputBuffer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => OutputBuffer_U0_ap_start,
        ap_done => OutputBuffer_U0_ap_done,
        ap_continue => OutputBuffer_U0_ap_continue,
        ap_idle => OutputBuffer_U0_ap_idle,
        ap_ready => OutputBuffer_U0_ap_ready,
        m_axi_ifc1_AWVALID => OutputBuffer_U0_m_axi_ifc1_AWVALID,
        m_axi_ifc1_AWREADY => ifc1_AWREADY,
        m_axi_ifc1_AWADDR => OutputBuffer_U0_m_axi_ifc1_AWADDR,
        m_axi_ifc1_AWID => OutputBuffer_U0_m_axi_ifc1_AWID,
        m_axi_ifc1_AWLEN => OutputBuffer_U0_m_axi_ifc1_AWLEN,
        m_axi_ifc1_AWSIZE => OutputBuffer_U0_m_axi_ifc1_AWSIZE,
        m_axi_ifc1_AWBURST => OutputBuffer_U0_m_axi_ifc1_AWBURST,
        m_axi_ifc1_AWLOCK => OutputBuffer_U0_m_axi_ifc1_AWLOCK,
        m_axi_ifc1_AWCACHE => OutputBuffer_U0_m_axi_ifc1_AWCACHE,
        m_axi_ifc1_AWPROT => OutputBuffer_U0_m_axi_ifc1_AWPROT,
        m_axi_ifc1_AWQOS => OutputBuffer_U0_m_axi_ifc1_AWQOS,
        m_axi_ifc1_AWREGION => OutputBuffer_U0_m_axi_ifc1_AWREGION,
        m_axi_ifc1_AWUSER => OutputBuffer_U0_m_axi_ifc1_AWUSER,
        m_axi_ifc1_WVALID => OutputBuffer_U0_m_axi_ifc1_WVALID,
        m_axi_ifc1_WREADY => ifc1_WREADY,
        m_axi_ifc1_WDATA => OutputBuffer_U0_m_axi_ifc1_WDATA,
        m_axi_ifc1_WSTRB => OutputBuffer_U0_m_axi_ifc1_WSTRB,
        m_axi_ifc1_WLAST => OutputBuffer_U0_m_axi_ifc1_WLAST,
        m_axi_ifc1_WID => OutputBuffer_U0_m_axi_ifc1_WID,
        m_axi_ifc1_WUSER => OutputBuffer_U0_m_axi_ifc1_WUSER,
        m_axi_ifc1_ARVALID => OutputBuffer_U0_m_axi_ifc1_ARVALID,
        m_axi_ifc1_ARREADY => ap_const_logic_0,
        m_axi_ifc1_ARADDR => OutputBuffer_U0_m_axi_ifc1_ARADDR,
        m_axi_ifc1_ARID => OutputBuffer_U0_m_axi_ifc1_ARID,
        m_axi_ifc1_ARLEN => OutputBuffer_U0_m_axi_ifc1_ARLEN,
        m_axi_ifc1_ARSIZE => OutputBuffer_U0_m_axi_ifc1_ARSIZE,
        m_axi_ifc1_ARBURST => OutputBuffer_U0_m_axi_ifc1_ARBURST,
        m_axi_ifc1_ARLOCK => OutputBuffer_U0_m_axi_ifc1_ARLOCK,
        m_axi_ifc1_ARCACHE => OutputBuffer_U0_m_axi_ifc1_ARCACHE,
        m_axi_ifc1_ARPROT => OutputBuffer_U0_m_axi_ifc1_ARPROT,
        m_axi_ifc1_ARQOS => OutputBuffer_U0_m_axi_ifc1_ARQOS,
        m_axi_ifc1_ARREGION => OutputBuffer_U0_m_axi_ifc1_ARREGION,
        m_axi_ifc1_ARUSER => OutputBuffer_U0_m_axi_ifc1_ARUSER,
        m_axi_ifc1_RVALID => ap_const_logic_0,
        m_axi_ifc1_RREADY => OutputBuffer_U0_m_axi_ifc1_RREADY,
        m_axi_ifc1_RDATA => ap_const_lv128_lc_1,
        m_axi_ifc1_RLAST => ap_const_logic_0,
        m_axi_ifc1_RID => ap_const_lv1_0,
        m_axi_ifc1_RUSER => ap_const_lv1_0,
        m_axi_ifc1_RRESP => ap_const_lv2_0,
        m_axi_ifc1_BVALID => ifc1_BVALID,
        m_axi_ifc1_BREADY => OutputBuffer_U0_m_axi_ifc1_BREADY,
        m_axi_ifc1_BRESP => ifc1_BRESP,
        m_axi_ifc1_BID => ifc1_BID,
        m_axi_ifc1_BUSER => ifc1_BUSER,
        p_read => ifc7_c_channel_dout,
        X_dout => X_c_dout,
        X_empty_n => X_c_empty_n,
        X_read => OutputBuffer_U0_X_read,
        Wt_Y_dout => Wt_Y_c_dout,
        Wt_Y_empty_n => Wt_Y_c_empty_n,
        Wt_Y_read => OutputBuffer_U0_Wt_Y_read,
        output_buf_address0 => OutputBuffer_U0_output_buf_address0,
        output_buf_ce0 => OutputBuffer_U0_output_buf_ce0,
        output_buf_q0 => output_buf_V_t_q0,
        output_buf_address1 => OutputBuffer_U0_output_buf_address1,
        output_buf_ce1 => OutputBuffer_U0_output_buf_ce1,
        output_buf_q1 => output_buf_V_t_q1);

    ifc7_c_channel_U : component LINEAR_fifo_w64_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_ap_return,
        if_full_n => ifc7_c_channel_full_n,
        if_write => entry_proc_U0_ap_done,
        if_dout => ifc7_c_channel_dout,
        if_empty_n => ifc7_c_channel_empty_n,
        if_read => OutputBuffer_U0_ap_ready);

    block_num_x_loc_channel_U : component LINEAR_fifo_w28_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_split10_proc_U0_ap_return_0,
        if_full_n => block_num_x_loc_channel_full_n,
        if_write => ap_channel_done_block_num_x_loc_channel,
        if_dout => block_num_x_loc_channel_dout,
        if_empty_n => block_num_x_loc_channel_empty_n,
        if_read => RunDataFlow_U0_ap_ready);

    block_num_y_cast_loc_channel_U : component LINEAR_fifo_w28_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_split10_proc_U0_ap_return_1,
        if_full_n => block_num_y_cast_loc_channel_full_n,
        if_write => ap_channel_done_block_num_y_cast_loc_channel,
        if_dout => block_num_y_cast_loc_channel_dout,
        if_empty_n => block_num_y_cast_loc_channel_empty_n,
        if_read => RunDataFlow_U0_ap_ready);

    weights_stream_V_V_0_U : component LINEAR_fifo_w32_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_weights_stream_0_0_0_0_din,
        if_full_n => weights_stream_V_V_0_full_n,
        if_write => ReadFromMem_U0_weights_stream_0_0_0_0_write,
        if_dout => weights_stream_V_V_0_dout,
        if_empty_n => weights_stream_V_V_0_empty_n,
        if_read => RunDataFlow_U0_weights_stream_V_V_0_read);

    weights_stream_V_V_1_U : component LINEAR_fifo_w32_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_weights_stream_0_0_0_071_din,
        if_full_n => weights_stream_V_V_1_full_n,
        if_write => ReadFromMem_U0_weights_stream_0_0_0_071_write,
        if_dout => weights_stream_V_V_1_dout,
        if_empty_n => weights_stream_V_V_1_empty_n,
        if_read => RunDataFlow_U0_weights_stream_V_V_1_read);

    weights_stream_V_V_2_U : component LINEAR_fifo_w32_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_weights_stream_0_0_0_072_din,
        if_full_n => weights_stream_V_V_2_full_n,
        if_write => ReadFromMem_U0_weights_stream_0_0_0_072_write,
        if_dout => weights_stream_V_V_2_dout,
        if_empty_n => weights_stream_V_V_2_empty_n,
        if_read => RunDataFlow_U0_weights_stream_V_V_2_read);

    weights_stream_V_V_3_U : component LINEAR_fifo_w32_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_weights_stream_0_0_0_073_din,
        if_full_n => weights_stream_V_V_3_full_n,
        if_write => ReadFromMem_U0_weights_stream_0_0_0_073_write,
        if_dout => weights_stream_V_V_3_dout,
        if_empty_n => weights_stream_V_V_3_empty_n,
        if_read => RunDataFlow_U0_weights_stream_V_V_3_read);

    weights_stream_V_V_4_U : component LINEAR_fifo_w32_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_weights_stream_0_0_0_074_din,
        if_full_n => weights_stream_V_V_4_full_n,
        if_write => ReadFromMem_U0_weights_stream_0_0_0_074_write,
        if_dout => weights_stream_V_V_4_dout,
        if_empty_n => weights_stream_V_V_4_empty_n,
        if_read => RunDataFlow_U0_weights_stream_V_V_4_read);

    weights_stream_V_V_5_U : component LINEAR_fifo_w32_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_weights_stream_0_0_0_075_din,
        if_full_n => weights_stream_V_V_5_full_n,
        if_write => ReadFromMem_U0_weights_stream_0_0_0_075_write,
        if_dout => weights_stream_V_V_5_dout,
        if_empty_n => weights_stream_V_V_5_empty_n,
        if_read => RunDataFlow_U0_weights_stream_V_V_5_read);

    weights_stream_V_V_6_U : component LINEAR_fifo_w32_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_weights_stream_0_0_0_076_din,
        if_full_n => weights_stream_V_V_6_full_n,
        if_write => ReadFromMem_U0_weights_stream_0_0_0_076_write,
        if_dout => weights_stream_V_V_6_dout,
        if_empty_n => weights_stream_V_V_6_empty_n,
        if_read => RunDataFlow_U0_weights_stream_V_V_6_read);

    weights_stream_V_V_7_U : component LINEAR_fifo_w32_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_weights_stream_0_0_0_077_din,
        if_full_n => weights_stream_V_V_7_full_n,
        if_write => ReadFromMem_U0_weights_stream_0_0_0_077_write,
        if_dout => weights_stream_V_V_7_dout,
        if_empty_n => weights_stream_V_V_7_empty_n,
        if_read => RunDataFlow_U0_weights_stream_V_V_7_read);

    weights_stream_V_V_8_U : component LINEAR_fifo_w32_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_weights_stream_0_0_0_078_din,
        if_full_n => weights_stream_V_V_8_full_n,
        if_write => ReadFromMem_U0_weights_stream_0_0_0_078_write,
        if_dout => weights_stream_V_V_8_dout,
        if_empty_n => weights_stream_V_V_8_empty_n,
        if_read => RunDataFlow_U0_weights_stream_V_V_8_read);

    weights_stream_V_V_9_U : component LINEAR_fifo_w32_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_weights_stream_0_0_0_079_din,
        if_full_n => weights_stream_V_V_9_full_n,
        if_write => ReadFromMem_U0_weights_stream_0_0_0_079_write,
        if_dout => weights_stream_V_V_9_dout,
        if_empty_n => weights_stream_V_V_9_empty_n,
        if_read => RunDataFlow_U0_weights_stream_V_V_9_read);

    weights_stream_V_V_10_U : component LINEAR_fifo_w32_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_weights_stream_0_0_0_080_din,
        if_full_n => weights_stream_V_V_10_full_n,
        if_write => ReadFromMem_U0_weights_stream_0_0_0_080_write,
        if_dout => weights_stream_V_V_10_dout,
        if_empty_n => weights_stream_V_V_10_empty_n,
        if_read => RunDataFlow_U0_weights_stream_V_V_10_read);

    weights_stream_V_V_11_U : component LINEAR_fifo_w32_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_weights_stream_0_0_0_081_din,
        if_full_n => weights_stream_V_V_11_full_n,
        if_write => ReadFromMem_U0_weights_stream_0_0_0_081_write,
        if_dout => weights_stream_V_V_11_dout,
        if_empty_n => weights_stream_V_V_11_empty_n,
        if_read => RunDataFlow_U0_weights_stream_V_V_11_read);

    weights_stream_V_V_12_U : component LINEAR_fifo_w32_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_weights_stream_0_0_0_082_din,
        if_full_n => weights_stream_V_V_12_full_n,
        if_write => ReadFromMem_U0_weights_stream_0_0_0_082_write,
        if_dout => weights_stream_V_V_12_dout,
        if_empty_n => weights_stream_V_V_12_empty_n,
        if_read => RunDataFlow_U0_weights_stream_V_V_12_read);

    weights_stream_V_V_13_U : component LINEAR_fifo_w32_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_weights_stream_0_0_0_083_din,
        if_full_n => weights_stream_V_V_13_full_n,
        if_write => ReadFromMem_U0_weights_stream_0_0_0_083_write,
        if_dout => weights_stream_V_V_13_dout,
        if_empty_n => weights_stream_V_V_13_empty_n,
        if_read => RunDataFlow_U0_weights_stream_V_V_13_read);

    weights_stream_V_V_14_U : component LINEAR_fifo_w32_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_weights_stream_0_0_0_084_din,
        if_full_n => weights_stream_V_V_14_full_n,
        if_write => ReadFromMem_U0_weights_stream_0_0_0_084_write,
        if_dout => weights_stream_V_V_14_dout,
        if_empty_n => weights_stream_V_V_14_empty_n,
        if_read => RunDataFlow_U0_weights_stream_V_V_14_read);

    weights_stream_V_V_15_U : component LINEAR_fifo_w32_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_weights_stream_0_0_0_085_din,
        if_full_n => weights_stream_V_V_15_full_n,
        if_write => ReadFromMem_U0_weights_stream_0_0_0_085_write,
        if_dout => weights_stream_V_V_15_dout,
        if_empty_n => weights_stream_V_V_15_empty_n,
        if_read => RunDataFlow_U0_weights_stream_V_V_15_read);

    weights_stream_V_V_16_U : component LINEAR_fifo_w32_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_weights_stream_0_0_0_086_din,
        if_full_n => weights_stream_V_V_16_full_n,
        if_write => ReadFromMem_U0_weights_stream_0_0_0_086_write,
        if_dout => weights_stream_V_V_16_dout,
        if_empty_n => weights_stream_V_V_16_empty_n,
        if_read => RunDataFlow_U0_weights_stream_V_V_16_read);

    weights_stream_V_V_17_U : component LINEAR_fifo_w32_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_weights_stream_0_0_0_087_din,
        if_full_n => weights_stream_V_V_17_full_n,
        if_write => ReadFromMem_U0_weights_stream_0_0_0_087_write,
        if_dout => weights_stream_V_V_17_dout,
        if_empty_n => weights_stream_V_V_17_empty_n,
        if_read => RunDataFlow_U0_weights_stream_V_V_17_read);

    weights_stream_V_V_18_U : component LINEAR_fifo_w32_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_weights_stream_0_0_0_088_din,
        if_full_n => weights_stream_V_V_18_full_n,
        if_write => ReadFromMem_U0_weights_stream_0_0_0_088_write,
        if_dout => weights_stream_V_V_18_dout,
        if_empty_n => weights_stream_V_V_18_empty_n,
        if_read => RunDataFlow_U0_weights_stream_V_V_18_read);

    weights_stream_V_V_19_U : component LINEAR_fifo_w32_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_weights_stream_0_0_0_089_din,
        if_full_n => weights_stream_V_V_19_full_n,
        if_write => ReadFromMem_U0_weights_stream_0_0_0_089_write,
        if_dout => weights_stream_V_V_19_dout,
        if_empty_n => weights_stream_V_V_19_empty_n,
        if_read => RunDataFlow_U0_weights_stream_V_V_19_read);

    weights_stream_V_V_20_U : component LINEAR_fifo_w32_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_weights_stream_0_0_0_090_din,
        if_full_n => weights_stream_V_V_20_full_n,
        if_write => ReadFromMem_U0_weights_stream_0_0_0_090_write,
        if_dout => weights_stream_V_V_20_dout,
        if_empty_n => weights_stream_V_V_20_empty_n,
        if_read => RunDataFlow_U0_weights_stream_V_V_20_read);

    weights_stream_V_V_21_U : component LINEAR_fifo_w32_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_weights_stream_0_0_0_091_din,
        if_full_n => weights_stream_V_V_21_full_n,
        if_write => ReadFromMem_U0_weights_stream_0_0_0_091_write,
        if_dout => weights_stream_V_V_21_dout,
        if_empty_n => weights_stream_V_V_21_empty_n,
        if_read => RunDataFlow_U0_weights_stream_V_V_21_read);

    weights_stream_V_V_22_U : component LINEAR_fifo_w32_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_weights_stream_0_0_0_092_din,
        if_full_n => weights_stream_V_V_22_full_n,
        if_write => ReadFromMem_U0_weights_stream_0_0_0_092_write,
        if_dout => weights_stream_V_V_22_dout,
        if_empty_n => weights_stream_V_V_22_empty_n,
        if_read => RunDataFlow_U0_weights_stream_V_V_22_read);

    weights_stream_V_V_23_U : component LINEAR_fifo_w32_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_weights_stream_0_0_0_093_din,
        if_full_n => weights_stream_V_V_23_full_n,
        if_write => ReadFromMem_U0_weights_stream_0_0_0_093_write,
        if_dout => weights_stream_V_V_23_dout,
        if_empty_n => weights_stream_V_V_23_empty_n,
        if_read => RunDataFlow_U0_weights_stream_V_V_23_read);

    weights_stream_V_V_24_U : component LINEAR_fifo_w32_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_weights_stream_0_0_0_094_din,
        if_full_n => weights_stream_V_V_24_full_n,
        if_write => ReadFromMem_U0_weights_stream_0_0_0_094_write,
        if_dout => weights_stream_V_V_24_dout,
        if_empty_n => weights_stream_V_V_24_empty_n,
        if_read => RunDataFlow_U0_weights_stream_V_V_24_read);

    weights_stream_V_V_25_U : component LINEAR_fifo_w32_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_weights_stream_0_0_0_095_din,
        if_full_n => weights_stream_V_V_25_full_n,
        if_write => ReadFromMem_U0_weights_stream_0_0_0_095_write,
        if_dout => weights_stream_V_V_25_dout,
        if_empty_n => weights_stream_V_V_25_empty_n,
        if_read => RunDataFlow_U0_weights_stream_V_V_25_read);

    weights_stream_V_V_26_U : component LINEAR_fifo_w32_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_weights_stream_0_0_0_096_din,
        if_full_n => weights_stream_V_V_26_full_n,
        if_write => ReadFromMem_U0_weights_stream_0_0_0_096_write,
        if_dout => weights_stream_V_V_26_dout,
        if_empty_n => weights_stream_V_V_26_empty_n,
        if_read => RunDataFlow_U0_weights_stream_V_V_26_read);

    weights_stream_V_V_27_U : component LINEAR_fifo_w32_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_weights_stream_0_0_0_097_din,
        if_full_n => weights_stream_V_V_27_full_n,
        if_write => ReadFromMem_U0_weights_stream_0_0_0_097_write,
        if_dout => weights_stream_V_V_27_dout,
        if_empty_n => weights_stream_V_V_27_empty_n,
        if_read => RunDataFlow_U0_weights_stream_V_V_27_read);

    weights_stream_V_V_28_U : component LINEAR_fifo_w32_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_weights_stream_0_0_0_098_din,
        if_full_n => weights_stream_V_V_28_full_n,
        if_write => ReadFromMem_U0_weights_stream_0_0_0_098_write,
        if_dout => weights_stream_V_V_28_dout,
        if_empty_n => weights_stream_V_V_28_empty_n,
        if_read => RunDataFlow_U0_weights_stream_V_V_28_read);

    weights_stream_V_V_29_U : component LINEAR_fifo_w32_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_weights_stream_0_0_0_099_din,
        if_full_n => weights_stream_V_V_29_full_n,
        if_write => ReadFromMem_U0_weights_stream_0_0_0_099_write,
        if_dout => weights_stream_V_V_29_dout,
        if_empty_n => weights_stream_V_V_29_empty_n,
        if_read => RunDataFlow_U0_weights_stream_V_V_29_read);

    weights_stream_V_V_30_U : component LINEAR_fifo_w32_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_weights_stream_0_0_0_0100_din,
        if_full_n => weights_stream_V_V_30_full_n,
        if_write => ReadFromMem_U0_weights_stream_0_0_0_0100_write,
        if_dout => weights_stream_V_V_30_dout,
        if_empty_n => weights_stream_V_V_30_empty_n,
        if_read => RunDataFlow_U0_weights_stream_V_V_30_read);

    weights_stream_V_V_31_U : component LINEAR_fifo_w32_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_weights_stream_0_0_0_0101_din,
        if_full_n => weights_stream_V_V_31_full_n,
        if_write => ReadFromMem_U0_weights_stream_0_0_0_0101_write,
        if_dout => weights_stream_V_V_31_dout,
        if_empty_n => weights_stream_V_V_31_empty_n,
        if_read => RunDataFlow_U0_weights_stream_V_V_31_read);

    iacts_stream_U : component LINEAR_fifo_w32_d32_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_iacts_stream64_din,
        if_full_n => iacts_stream_full_n,
        if_write => ReadFromMem_U0_iacts_stream64_write,
        if_dout => iacts_stream_dout,
        if_empty_n => iacts_stream_empty_n,
        if_read => RunDataFlow_U0_iacts_stream_read);

    X_c_U : component LINEAR_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_X_c_din,
        if_full_n => X_c_full_n,
        if_write => ReadFromMem_U0_X_c_write,
        if_dout => X_c_dout,
        if_empty_n => X_c_empty_n,
        if_read => OutputBuffer_U0_X_read);

    Wt_Y_c_U : component LINEAR_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadFromMem_U0_Wt_Y_c_din,
        if_full_n => Wt_Y_c_full_n,
        if_write => ReadFromMem_U0_Wt_Y_c_write,
        if_dout => Wt_Y_c_dout,
        if_empty_n => Wt_Y_c_empty_n,
        if_read => OutputBuffer_U0_Wt_Y_read);





    ap_sync_reg_Block_split10_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Block_split10_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Block_split10_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_split10_proc_U0_ap_ready <= ap_sync_Block_split10_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_ReadFromMem_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_ReadFromMem_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_ReadFromMem_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_ReadFromMem_U0_ap_ready <= ap_sync_ReadFromMem_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_block_num_x_loc_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_block_num_x_loc_channel <= ap_const_logic_0;
            else
                if (((Block_split10_proc_U0_ap_done and Block_split10_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_block_num_x_loc_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_block_num_x_loc_channel <= ap_sync_channel_write_block_num_x_loc_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_block_num_y_cast_loc_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_block_num_y_cast_loc_channel <= ap_const_logic_0;
            else
                if (((Block_split10_proc_U0_ap_done and Block_split10_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_block_num_y_cast_loc_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_block_num_y_cast_loc_channel <= ap_sync_channel_write_block_num_y_cast_loc_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    Block_split10_proc_U0_ap_continue <= (ap_sync_channel_write_block_num_y_cast_loc_channel and ap_sync_channel_write_block_num_x_loc_channel);
    Block_split10_proc_U0_ap_start <= ((ap_sync_reg_Block_split10_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    OutputBuffer_U0_ap_continue <= ap_const_logic_1;
    OutputBuffer_U0_ap_start <= (output_buf_V_t_empty_n and ifc7_c_channel_empty_n);
    ReadFromMem_U0_ap_continue <= ap_const_logic_1;
    ReadFromMem_U0_ap_start <= ((ap_sync_reg_ReadFromMem_U0_ap_ready xor ap_const_logic_1) and ap_start);
    RunDataFlow_U0_ap_continue <= output_buf_V_i_full_n;
    RunDataFlow_U0_ap_start <= (block_num_y_cast_loc_channel_empty_n and block_num_x_loc_channel_empty_n);
    ap_channel_done_block_num_x_loc_channel <= ((ap_sync_reg_channel_write_block_num_x_loc_channel xor ap_const_logic_1) and Block_split10_proc_U0_ap_done);
    ap_channel_done_block_num_y_cast_loc_channel <= ((ap_sync_reg_channel_write_block_num_y_cast_loc_channel xor ap_const_logic_1) and Block_split10_proc_U0_ap_done);
    ap_done <= OutputBuffer_U0_ap_done;
    ap_idle <= ((block_num_y_cast_loc_channel_empty_n xor ap_const_logic_1) and (block_num_x_loc_channel_empty_n xor ap_const_logic_1) and (ifc7_c_channel_empty_n xor ap_const_logic_1) and (output_buf_V_t_empty_n xor ap_const_logic_1) and entry_proc_U0_ap_idle and RunDataFlow_U0_ap_idle and ReadFromMem_U0_ap_idle and OutputBuffer_U0_ap_idle and Block_split10_proc_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_Block_split10_proc_U0_ap_ready <= (ap_sync_reg_Block_split10_proc_U0_ap_ready or Block_split10_proc_U0_ap_ready);
    ap_sync_ReadFromMem_U0_ap_ready <= (ap_sync_reg_ReadFromMem_U0_ap_ready or ReadFromMem_U0_ap_ready);
    ap_sync_channel_write_block_num_x_loc_channel <= ((block_num_x_loc_channel_full_n and ap_channel_done_block_num_x_loc_channel) or ap_sync_reg_channel_write_block_num_x_loc_channel);
    ap_sync_channel_write_block_num_y_cast_loc_channel <= ((block_num_y_cast_loc_channel_full_n and ap_channel_done_block_num_y_cast_loc_channel) or ap_sync_reg_channel_write_block_num_y_cast_loc_channel);
    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_ready <= (ap_sync_entry_proc_U0_ap_ready and ap_sync_ReadFromMem_U0_ap_ready and ap_sync_Block_split10_proc_U0_ap_ready);
    entry_proc_U0_ap_continue <= ifc7_c_channel_full_n;
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
end behav;
