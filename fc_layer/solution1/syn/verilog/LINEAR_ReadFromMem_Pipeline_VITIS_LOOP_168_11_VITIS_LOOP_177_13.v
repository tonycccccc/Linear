// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module LINEAR_ReadFromMem_Pipeline_VITIS_LOOP_168_11_VITIS_LOOP_177_13 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mul_ln166_1,
        add_ln168_1,
        payload254_04,
        trunc_ln3,
        iact_buffer_address0,
        iact_buffer_ce0,
        iact_buffer_we0,
        iact_buffer_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] mul_ln166_1;
input  [31:0] add_ln168_1;
input  [767:0] payload254_04;
input  [10:0] trunc_ln3;
output  [10:0] iact_buffer_address0;
output   iact_buffer_ce0;
output   iact_buffer_we0;
output  [31:0] iact_buffer_d0;

reg ap_idle;
reg iact_buffer_ce0;
reg iact_buffer_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln168_fu_154_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln178_fu_274_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] j_2_fu_54;
wire   [31:0] add_ln177_fu_279_p2;
wire    ap_loop_init;
reg   [31:0] i_5_fu_58;
wire   [31:0] select_ln168_2_fu_225_p3;
reg   [63:0] indvar_flatten7_fu_62;
wire   [63:0] add_ln168_fu_159_p2;
wire   [5:0] trunc_ln176_fu_124_p1;
wire   [7:0] trunc_ln176_1_fu_136_p1;
wire   [10:0] shl_ln6_fu_128_p3;
wire   [10:0] shl_ln176_1_fu_140_p3;
wire   [0:0] icmp_ln177_fu_174_p2;
wire   [31:0] add_ln168_2_fu_168_p2;
wire   [5:0] trunc_ln176_2_fu_187_p1;
wire   [7:0] trunc_ln176_3_fu_199_p1;
wire   [10:0] shl_ln176_mid1_fu_191_p3;
wire   [10:0] shl_ln176_1_mid1_fu_203_p3;
wire   [10:0] sub_ln176_1_fu_211_p2;
wire   [10:0] sub_ln176_fu_148_p2;
wire   [31:0] select_ln168_fu_179_p3;
wire   [4:0] trunc_ln674_fu_237_p1;
wire   [9:0] tmp_fu_241_p3;
wire   [767:0] zext_ln674_fu_249_p1;
wire   [767:0] lshr_ln674_fu_253_p2;
wire   [10:0] empty_fu_233_p1;
wire   [10:0] add_ln178_1_fu_263_p2;
wire   [10:0] select_ln168_1_fu_217_p3;
wire   [10:0] add_ln178_fu_268_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

LINEAR_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_5_fu_58 <= 32'd0;
        end else if (((icmp_ln168_fu_154_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_5_fu_58 <= select_ln168_2_fu_225_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten7_fu_62 <= 64'd0;
        end else if (((icmp_ln168_fu_154_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten7_fu_62 <= add_ln168_fu_159_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_2_fu_54 <= 32'd0;
        end else if (((icmp_ln168_fu_154_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_2_fu_54 <= add_ln177_fu_279_p2;
        end
    end
end

always @ (*) begin
    if (((icmp_ln168_fu_154_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        iact_buffer_ce0 = 1'b1;
    end else begin
        iact_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln168_fu_154_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        iact_buffer_we0 = 1'b1;
    end else begin
        iact_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln168_2_fu_168_p2 = (i_5_fu_58 + 32'd1);

assign add_ln168_fu_159_p2 = (indvar_flatten7_fu_62 + 64'd1);

assign add_ln177_fu_279_p2 = (select_ln168_fu_179_p3 + 32'd1);

assign add_ln178_1_fu_263_p2 = (trunc_ln3 + empty_fu_233_p1);

assign add_ln178_fu_268_p2 = (add_ln178_1_fu_263_p2 + select_ln168_1_fu_217_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign empty_fu_233_p1 = select_ln168_fu_179_p3[10:0];

assign iact_buffer_address0 = zext_ln178_fu_274_p1;

assign iact_buffer_d0 = lshr_ln674_fu_253_p2[31:0];

assign icmp_ln168_fu_154_p2 = ((indvar_flatten7_fu_62 == mul_ln166_1) ? 1'b1 : 1'b0);

assign icmp_ln177_fu_174_p2 = ((j_2_fu_54 == add_ln168_1) ? 1'b1 : 1'b0);

assign lshr_ln674_fu_253_p2 = payload254_04 >> zext_ln674_fu_249_p1;

assign select_ln168_1_fu_217_p3 = ((icmp_ln177_fu_174_p2[0:0] == 1'b1) ? sub_ln176_1_fu_211_p2 : sub_ln176_fu_148_p2);

assign select_ln168_2_fu_225_p3 = ((icmp_ln177_fu_174_p2[0:0] == 1'b1) ? add_ln168_2_fu_168_p2 : i_5_fu_58);

assign select_ln168_fu_179_p3 = ((icmp_ln177_fu_174_p2[0:0] == 1'b1) ? 32'd0 : j_2_fu_54);

assign shl_ln176_1_fu_140_p3 = {{trunc_ln176_1_fu_136_p1}, {3'd0}};

assign shl_ln176_1_mid1_fu_203_p3 = {{trunc_ln176_3_fu_199_p1}, {3'd0}};

assign shl_ln176_mid1_fu_191_p3 = {{trunc_ln176_2_fu_187_p1}, {5'd0}};

assign shl_ln6_fu_128_p3 = {{trunc_ln176_fu_124_p1}, {5'd0}};

assign sub_ln176_1_fu_211_p2 = (shl_ln176_mid1_fu_191_p3 - shl_ln176_1_mid1_fu_203_p3);

assign sub_ln176_fu_148_p2 = (shl_ln6_fu_128_p3 - shl_ln176_1_fu_140_p3);

assign tmp_fu_241_p3 = {{trunc_ln674_fu_237_p1}, {5'd0}};

assign trunc_ln176_1_fu_136_p1 = i_5_fu_58[7:0];

assign trunc_ln176_2_fu_187_p1 = add_ln168_2_fu_168_p2[5:0];

assign trunc_ln176_3_fu_199_p1 = add_ln168_2_fu_168_p2[7:0];

assign trunc_ln176_fu_124_p1 = i_5_fu_58[5:0];

assign trunc_ln674_fu_237_p1 = select_ln168_fu_179_p3[4:0];

assign zext_ln178_fu_274_p1 = add_ln178_fu_268_p2;

assign zext_ln674_fu_249_p1 = tmp_fu_241_p3;

endmodule //LINEAR_ReadFromMem_Pipeline_VITIS_LOOP_168_11_VITIS_LOOP_177_13
